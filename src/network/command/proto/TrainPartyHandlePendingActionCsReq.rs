// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `TrainPartyHandlePendingActionCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:TrainPartyHandlePendingActionCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TrainPartyHandlePendingActionCsReq {
    // message fields
    // @@protoc_insertion_point(field:TrainPartyHandlePendingActionCsReq.HBAPCCEGNME)
    pub HBAPCCEGNME: u32,
    // message oneof groups
    pub GNGLHJGMAOK: ::std::option::Option<train_party_handle_pending_action_cs_req::GNGLHJGMAOK>,
    // special fields
    // @@protoc_insertion_point(special_field:TrainPartyHandlePendingActionCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TrainPartyHandlePendingActionCsReq {
    fn default() -> &'a TrainPartyHandlePendingActionCsReq {
        <TrainPartyHandlePendingActionCsReq as ::protobuf::Message>::default_instance()
    }
}

impl TrainPartyHandlePendingActionCsReq {
    pub fn new() -> TrainPartyHandlePendingActionCsReq {
        ::std::default::Default::default()
    }

    // .HPFKGDDIFHG IAMKDJCFMIB = 2026;

    pub fn IAMKDJCFMIB(&self) -> &super::HPFKGDDIFHG::HPFKGDDIFHG {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(ref v)) => v,
            _ => <super::HPFKGDDIFHG::HPFKGDDIFHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IAMKDJCFMIB(&mut self) {
        self.GNGLHJGMAOK = ::std::option::Option::None;
    }

    pub fn has_IAMKDJCFMIB(&self) -> bool {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IAMKDJCFMIB(&mut self, v: super::HPFKGDDIFHG::HPFKGDDIFHG) {
        self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IAMKDJCFMIB(&mut self) -> &mut super::HPFKGDDIFHG::HPFKGDDIFHG {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(_)) = self.GNGLHJGMAOK {
        } else {
            self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(super::HPFKGDDIFHG::HPFKGDDIFHG::new()));
        }
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IAMKDJCFMIB(&mut self) -> super::HPFKGDDIFHG::HPFKGDDIFHG {
        if self.has_IAMKDJCFMIB() {
            match self.GNGLHJGMAOK.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HPFKGDDIFHG::HPFKGDDIFHG::new()
        }
    }

    // .GLBFBNHFCNO PMMGOCJFEEJ = 127;

    pub fn PMMGOCJFEEJ(&self) -> &super::GLBFBNHFCNO::GLBFBNHFCNO {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(ref v)) => v,
            _ => <super::GLBFBNHFCNO::GLBFBNHFCNO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMMGOCJFEEJ(&mut self) {
        self.GNGLHJGMAOK = ::std::option::Option::None;
    }

    pub fn has_PMMGOCJFEEJ(&self) -> bool {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMMGOCJFEEJ(&mut self, v: super::GLBFBNHFCNO::GLBFBNHFCNO) {
        self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMMGOCJFEEJ(&mut self) -> &mut super::GLBFBNHFCNO::GLBFBNHFCNO {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(_)) = self.GNGLHJGMAOK {
        } else {
            self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(super::GLBFBNHFCNO::GLBFBNHFCNO::new()));
        }
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMMGOCJFEEJ(&mut self) -> super::GLBFBNHFCNO::GLBFBNHFCNO {
        if self.has_PMMGOCJFEEJ() {
            match self.GNGLHJGMAOK.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GLBFBNHFCNO::GLBFBNHFCNO::new()
        }
    }

    // .PECGLKCICGO LGBJAELDPNB = 1821;

    pub fn LGBJAELDPNB(&self) -> &super::PECGLKCICGO::PECGLKCICGO {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(ref v)) => v,
            _ => <super::PECGLKCICGO::PECGLKCICGO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LGBJAELDPNB(&mut self) {
        self.GNGLHJGMAOK = ::std::option::Option::None;
    }

    pub fn has_LGBJAELDPNB(&self) -> bool {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LGBJAELDPNB(&mut self, v: super::PECGLKCICGO::PECGLKCICGO) {
        self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LGBJAELDPNB(&mut self) -> &mut super::PECGLKCICGO::PECGLKCICGO {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(_)) = self.GNGLHJGMAOK {
        } else {
            self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(super::PECGLKCICGO::PECGLKCICGO::new()));
        }
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LGBJAELDPNB(&mut self) -> super::PECGLKCICGO::PECGLKCICGO {
        if self.has_LGBJAELDPNB() {
            match self.GNGLHJGMAOK.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PECGLKCICGO::PECGLKCICGO::new()
        }
    }

    // .ENCJKPGOIAL BGJMFBHCMKL = 914;

    pub fn BGJMFBHCMKL(&self) -> &super::ENCJKPGOIAL::ENCJKPGOIAL {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(ref v)) => v,
            _ => <super::ENCJKPGOIAL::ENCJKPGOIAL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BGJMFBHCMKL(&mut self) {
        self.GNGLHJGMAOK = ::std::option::Option::None;
    }

    pub fn has_BGJMFBHCMKL(&self) -> bool {
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BGJMFBHCMKL(&mut self, v: super::ENCJKPGOIAL::ENCJKPGOIAL) {
        self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BGJMFBHCMKL(&mut self) -> &mut super::ENCJKPGOIAL::ENCJKPGOIAL {
        if let ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(_)) = self.GNGLHJGMAOK {
        } else {
            self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(super::ENCJKPGOIAL::ENCJKPGOIAL::new()));
        }
        match self.GNGLHJGMAOK {
            ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BGJMFBHCMKL(&mut self) -> super::ENCJKPGOIAL::ENCJKPGOIAL {
        if self.has_BGJMFBHCMKL() {
            match self.GNGLHJGMAOK.take() {
                ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ENCJKPGOIAL::ENCJKPGOIAL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBAPCCEGNME",
            |m: &TrainPartyHandlePendingActionCsReq| { &m.HBAPCCEGNME },
            |m: &mut TrainPartyHandlePendingActionCsReq| { &mut m.HBAPCCEGNME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HPFKGDDIFHG::HPFKGDDIFHG>(
            "IAMKDJCFMIB",
            TrainPartyHandlePendingActionCsReq::has_IAMKDJCFMIB,
            TrainPartyHandlePendingActionCsReq::IAMKDJCFMIB,
            TrainPartyHandlePendingActionCsReq::mut_IAMKDJCFMIB,
            TrainPartyHandlePendingActionCsReq::set_IAMKDJCFMIB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GLBFBNHFCNO::GLBFBNHFCNO>(
            "PMMGOCJFEEJ",
            TrainPartyHandlePendingActionCsReq::has_PMMGOCJFEEJ,
            TrainPartyHandlePendingActionCsReq::PMMGOCJFEEJ,
            TrainPartyHandlePendingActionCsReq::mut_PMMGOCJFEEJ,
            TrainPartyHandlePendingActionCsReq::set_PMMGOCJFEEJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PECGLKCICGO::PECGLKCICGO>(
            "LGBJAELDPNB",
            TrainPartyHandlePendingActionCsReq::has_LGBJAELDPNB,
            TrainPartyHandlePendingActionCsReq::LGBJAELDPNB,
            TrainPartyHandlePendingActionCsReq::mut_LGBJAELDPNB,
            TrainPartyHandlePendingActionCsReq::set_LGBJAELDPNB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ENCJKPGOIAL::ENCJKPGOIAL>(
            "BGJMFBHCMKL",
            TrainPartyHandlePendingActionCsReq::has_BGJMFBHCMKL,
            TrainPartyHandlePendingActionCsReq::BGJMFBHCMKL,
            TrainPartyHandlePendingActionCsReq::mut_BGJMFBHCMKL,
            TrainPartyHandlePendingActionCsReq::set_BGJMFBHCMKL,
        ));
        oneofs.push(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrainPartyHandlePendingActionCsReq>(
            "TrainPartyHandlePendingActionCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TrainPartyHandlePendingActionCsReq {
    const NAME: &'static str = "TrainPartyHandlePendingActionCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                112 => {
                    self.HBAPCCEGNME = is.read_uint32()?;
                },
                16210 => {
                    self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(is.read_message()?));
                },
                1018 => {
                    self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(is.read_message()?));
                },
                14570 => {
                    self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(is.read_message()?));
                },
                7314 => {
                    self.GNGLHJGMAOK = ::std::option::Option::Some(train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HBAPCCEGNME != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.HBAPCCEGNME);
        }
        if let ::std::option::Option::Some(ref v) = self.GNGLHJGMAOK {
            match v {
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HBAPCCEGNME != 0 {
            os.write_uint32(14, self.HBAPCCEGNME)?;
        }
        if let ::std::option::Option::Some(ref v) = self.GNGLHJGMAOK {
            match v {
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::IAMKDJCFMIB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2026, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::PMMGOCJFEEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(127, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::LGBJAELDPNB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1821, v, os)?;
                },
                &train_party_handle_pending_action_cs_req::GNGLHJGMAOK::BGJMFBHCMKL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(914, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TrainPartyHandlePendingActionCsReq {
        TrainPartyHandlePendingActionCsReq::new()
    }

    fn clear(&mut self) {
        self.HBAPCCEGNME = 0;
        self.GNGLHJGMAOK = ::std::option::Option::None;
        self.GNGLHJGMAOK = ::std::option::Option::None;
        self.GNGLHJGMAOK = ::std::option::Option::None;
        self.GNGLHJGMAOK = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TrainPartyHandlePendingActionCsReq {
        static instance: TrainPartyHandlePendingActionCsReq = TrainPartyHandlePendingActionCsReq {
            HBAPCCEGNME: 0,
            GNGLHJGMAOK: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TrainPartyHandlePendingActionCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TrainPartyHandlePendingActionCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TrainPartyHandlePendingActionCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrainPartyHandlePendingActionCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TrainPartyHandlePendingActionCsReq`
pub mod train_party_handle_pending_action_cs_req {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:TrainPartyHandlePendingActionCsReq.GNGLHJGMAOK)
    pub enum GNGLHJGMAOK {
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.IAMKDJCFMIB)
        IAMKDJCFMIB(super::super::HPFKGDDIFHG::HPFKGDDIFHG),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.PMMGOCJFEEJ)
        PMMGOCJFEEJ(super::super::GLBFBNHFCNO::GLBFBNHFCNO),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.LGBJAELDPNB)
        LGBJAELDPNB(super::super::PECGLKCICGO::PECGLKCICGO),
        // @@protoc_insertion_point(oneof_field:TrainPartyHandlePendingActionCsReq.BGJMFBHCMKL)
        BGJMFBHCMKL(super::super::ENCJKPGOIAL::ENCJKPGOIAL),
    }

    impl ::protobuf::Oneof for GNGLHJGMAOK {
    }

    impl ::protobuf::OneofFull for GNGLHJGMAOK {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TrainPartyHandlePendingActionCsReq as ::protobuf::MessageFull>::descriptor().oneof_by_name("GNGLHJGMAOK").unwrap()).clone()
        }
    }

    impl GNGLHJGMAOK {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GNGLHJGMAOK>("GNGLHJGMAOK")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(TrainPartyHandlePendingActionCsReq.proto\x1a\x11ENCJKPGOIAL.proto\x1a\
    \x11GLBFBNHFCNO.proto\x1a\x11HPFKGDDIFHG.proto\x1a\x11PECGLKCICGO.proto\
    \"\xa0\x02\n\"TrainPartyHandlePendingActionCsReq\x12\x20\n\x0bHBAPCCEGNM\
    E\x18\x0e\x20\x01(\rR\x0bHBAPCCEGNME\x121\n\x0bIAMKDJCFMIB\x18\xea\x0f\
    \x20\x01(\x0b2\x0c.HPFKGDDIFHGH\0R\x0bIAMKDJCFMIB\x120\n\x0bPMMGOCJFEEJ\
    \x18\x7f\x20\x01(\x0b2\x0c.GLBFBNHFCNOH\0R\x0bPMMGOCJFEEJ\x121\n\x0bLGBJ\
    AELDPNB\x18\x9d\x0e\x20\x01(\x0b2\x0c.PECGLKCICGOH\0R\x0bLGBJAELDPNB\x12\
    1\n\x0bBGJMFBHCMKL\x18\x92\x07\x20\x01(\x0b2\x0c.ENCJKPGOIALH\0R\x0bBGJM\
    FBHCMKLB\r\n\x0bGNGLHJGMAOKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::ENCJKPGOIAL::file_descriptor().clone());
            deps.push(super::GLBFBNHFCNO::file_descriptor().clone());
            deps.push(super::HPFKGDDIFHG::file_descriptor().clone());
            deps.push(super::PECGLKCICGO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TrainPartyHandlePendingActionCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
