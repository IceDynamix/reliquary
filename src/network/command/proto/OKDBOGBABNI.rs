// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OKDBOGBABNI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OKDBOGBABNI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OKDBOGBABNI {
    // message fields
    // @@protoc_insertion_point(field:OKDBOGBABNI.HDLJBADEKFI)
    pub HDLJBADEKFI: ::protobuf::MessageField<super::NHAGPMMCDCF::NHAGPMMCDCF>,
    // @@protoc_insertion_point(field:OKDBOGBABNI.PLCCEHDNAFL)
    pub PLCCEHDNAFL: ::protobuf::MessageField<super::GGKBHALPIDK::GGKBHALPIDK>,
    // @@protoc_insertion_point(field:OKDBOGBABNI.APMJFGKIFON)
    pub APMJFGKIFON: ::protobuf::MessageField<super::LFJPDDCNBKC::LFJPDDCNBKC>,
    // message oneof groups
    pub GNKACKHFHHD: ::std::option::Option<okdbogbabni::GNKACKHFHHD>,
    // special fields
    // @@protoc_insertion_point(special_field:OKDBOGBABNI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OKDBOGBABNI {
    fn default() -> &'a OKDBOGBABNI {
        <OKDBOGBABNI as ::protobuf::Message>::default_instance()
    }
}

impl OKDBOGBABNI {
    pub fn new() -> OKDBOGBABNI {
        ::std::default::Default::default()
    }

    // .OGNLDADPJFO EDGFEDJBAHF = 586;

    pub fn EDGFEDJBAHF(&self) -> &super::OGNLDADPJFO::OGNLDADPJFO {
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(ref v)) => v,
            _ => <super::OGNLDADPJFO::OGNLDADPJFO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EDGFEDJBAHF(&mut self) {
        self.GNKACKHFHHD = ::std::option::Option::None;
    }

    pub fn has_EDGFEDJBAHF(&self) -> bool {
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EDGFEDJBAHF(&mut self, v: super::OGNLDADPJFO::OGNLDADPJFO) {
        self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EDGFEDJBAHF(&mut self) -> &mut super::OGNLDADPJFO::OGNLDADPJFO {
        if let ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(_)) = self.GNKACKHFHHD {
        } else {
            self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(super::OGNLDADPJFO::OGNLDADPJFO::new()));
        }
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EDGFEDJBAHF(&mut self) -> super::OGNLDADPJFO::OGNLDADPJFO {
        if self.has_EDGFEDJBAHF() {
            match self.GNKACKHFHHD.take() {
                ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OGNLDADPJFO::OGNLDADPJFO::new()
        }
    }

    // .ANGOAMADOMA OPFPOLCGMED = 166;

    pub fn OPFPOLCGMED(&self) -> &super::ANGOAMADOMA::ANGOAMADOMA {
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(ref v)) => v,
            _ => <super::ANGOAMADOMA::ANGOAMADOMA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OPFPOLCGMED(&mut self) {
        self.GNKACKHFHHD = ::std::option::Option::None;
    }

    pub fn has_OPFPOLCGMED(&self) -> bool {
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OPFPOLCGMED(&mut self, v: super::ANGOAMADOMA::ANGOAMADOMA) {
        self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OPFPOLCGMED(&mut self) -> &mut super::ANGOAMADOMA::ANGOAMADOMA {
        if let ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(_)) = self.GNKACKHFHHD {
        } else {
            self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(super::ANGOAMADOMA::ANGOAMADOMA::new()));
        }
        match self.GNKACKHFHHD {
            ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OPFPOLCGMED(&mut self) -> super::ANGOAMADOMA::ANGOAMADOMA {
        if self.has_OPFPOLCGMED() {
            match self.GNKACKHFHHD.take() {
                ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ANGOAMADOMA::ANGOAMADOMA::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NHAGPMMCDCF::NHAGPMMCDCF>(
            "HDLJBADEKFI",
            |m: &OKDBOGBABNI| { &m.HDLJBADEKFI },
            |m: &mut OKDBOGBABNI| { &mut m.HDLJBADEKFI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GGKBHALPIDK::GGKBHALPIDK>(
            "PLCCEHDNAFL",
            |m: &OKDBOGBABNI| { &m.PLCCEHDNAFL },
            |m: &mut OKDBOGBABNI| { &mut m.PLCCEHDNAFL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LFJPDDCNBKC::LFJPDDCNBKC>(
            "APMJFGKIFON",
            |m: &OKDBOGBABNI| { &m.APMJFGKIFON },
            |m: &mut OKDBOGBABNI| { &mut m.APMJFGKIFON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OGNLDADPJFO::OGNLDADPJFO>(
            "EDGFEDJBAHF",
            OKDBOGBABNI::has_EDGFEDJBAHF,
            OKDBOGBABNI::EDGFEDJBAHF,
            OKDBOGBABNI::mut_EDGFEDJBAHF,
            OKDBOGBABNI::set_EDGFEDJBAHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ANGOAMADOMA::ANGOAMADOMA>(
            "OPFPOLCGMED",
            OKDBOGBABNI::has_OPFPOLCGMED,
            OKDBOGBABNI::OPFPOLCGMED,
            OKDBOGBABNI::mut_OPFPOLCGMED,
            OKDBOGBABNI::set_OPFPOLCGMED,
        ));
        oneofs.push(okdbogbabni::GNKACKHFHHD::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OKDBOGBABNI>(
            "OKDBOGBABNI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OKDBOGBABNI {
    const NAME: &'static str = "OKDBOGBABNI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HDLJBADEKFI)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PLCCEHDNAFL)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.APMJFGKIFON)?;
                },
                4690 => {
                    self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(is.read_message()?));
                },
                1330 => {
                    self.GNKACKHFHHD = ::std::option::Option::Some(okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.HDLJBADEKFI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.PLCCEHDNAFL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.APMJFGKIFON.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.GNKACKHFHHD {
            match v {
                &okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.HDLJBADEKFI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.PLCCEHDNAFL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.APMJFGKIFON.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.GNKACKHFHHD {
            match v {
                &okdbogbabni::GNKACKHFHHD::EDGFEDJBAHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(586, v, os)?;
                },
                &okdbogbabni::GNKACKHFHHD::OPFPOLCGMED(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(166, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OKDBOGBABNI {
        OKDBOGBABNI::new()
    }

    fn clear(&mut self) {
        self.HDLJBADEKFI.clear();
        self.PLCCEHDNAFL.clear();
        self.APMJFGKIFON.clear();
        self.GNKACKHFHHD = ::std::option::Option::None;
        self.GNKACKHFHHD = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OKDBOGBABNI {
        static instance: OKDBOGBABNI = OKDBOGBABNI {
            HDLJBADEKFI: ::protobuf::MessageField::none(),
            PLCCEHDNAFL: ::protobuf::MessageField::none(),
            APMJFGKIFON: ::protobuf::MessageField::none(),
            GNKACKHFHHD: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OKDBOGBABNI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OKDBOGBABNI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OKDBOGBABNI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OKDBOGBABNI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OKDBOGBABNI`
pub mod okdbogbabni {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OKDBOGBABNI.GNKACKHFHHD)
    pub enum GNKACKHFHHD {
        // @@protoc_insertion_point(oneof_field:OKDBOGBABNI.EDGFEDJBAHF)
        EDGFEDJBAHF(super::super::OGNLDADPJFO::OGNLDADPJFO),
        // @@protoc_insertion_point(oneof_field:OKDBOGBABNI.OPFPOLCGMED)
        OPFPOLCGMED(super::super::ANGOAMADOMA::ANGOAMADOMA),
    }

    impl ::protobuf::Oneof for GNKACKHFHHD {
    }

    impl ::protobuf::OneofFull for GNKACKHFHHD {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OKDBOGBABNI as ::protobuf::MessageFull>::descriptor().oneof_by_name("GNKACKHFHHD").unwrap()).clone()
        }
    }

    impl GNKACKHFHHD {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<GNKACKHFHHD>("GNKACKHFHHD")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OKDBOGBABNI.proto\x1a\x11ANGOAMADOMA.proto\x1a\x11GGKBHALPIDK.prot\
    o\x1a\x11LFJPDDCNBKC.proto\x1a\x11NHAGPMMCDCF.proto\x1a\x11OGNLDADPJFO.p\
    roto\"\x92\x02\n\x0bOKDBOGBABNI\x12.\n\x0bHDLJBADEKFI\x18\r\x20\x01(\x0b\
    2\x0c.NHAGPMMCDCFR\x0bHDLJBADEKFI\x12.\n\x0bPLCCEHDNAFL\x18\x05\x20\x01(\
    \x0b2\x0c.GGKBHALPIDKR\x0bPLCCEHDNAFL\x12.\n\x0bAPMJFGKIFON\x18\x0c\x20\
    \x01(\x0b2\x0c.LFJPDDCNBKCR\x0bAPMJFGKIFON\x121\n\x0bEDGFEDJBAHF\x18\xca\
    \x04\x20\x01(\x0b2\x0c.OGNLDADPJFOH\0R\x0bEDGFEDJBAHF\x121\n\x0bOPFPOLCG\
    MED\x18\xa6\x01\x20\x01(\x0b2\x0c.ANGOAMADOMAH\0R\x0bOPFPOLCGMEDB\r\n\
    \x0bGNKACKHFHHDb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::ANGOAMADOMA::file_descriptor().clone());
            deps.push(super::GGKBHALPIDK::file_descriptor().clone());
            deps.push(super::LFJPDDCNBKC::file_descriptor().clone());
            deps.push(super::NHAGPMMCDCF::file_descriptor().clone());
            deps.push(super::OGNLDADPJFO::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OKDBOGBABNI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
