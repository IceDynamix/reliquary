// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JACMENOKJFM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:JACMENOKJFM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JACMENOKJFM {
    // message fields
    // @@protoc_insertion_point(field:JACMENOKJFM.HLAGJPBAEML)
    pub HLAGJPBAEML: ::protobuf::MessageField<super::PGALDKKFBLC::PGALDKKFBLC>,
    // @@protoc_insertion_point(field:JACMENOKJFM.CKMAHDGIBOH)
    pub CKMAHDGIBOH: ::protobuf::MessageField<super::LGELJHJOMLO::LGELJHJOMLO>,
    // @@protoc_insertion_point(field:JACMENOKJFM.FIOCABCBNKB)
    pub FIOCABCBNKB: ::protobuf::MessageField<super::AFAGHELICPD::AFAGHELICPD>,
    // @@protoc_insertion_point(field:JACMENOKJFM.CMNNLMCEMCG)
    pub CMNNLMCEMCG: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:JACMENOKJFM.OFOLHKCNLBA)
    pub OFOLHKCNLBA: ::protobuf::MessageField<super::AJCNDBHNLFL::AJCNDBHNLFL>,
    // @@protoc_insertion_point(field:JACMENOKJFM.BBCPOEBNANC)
    pub BBCPOEBNANC: ::protobuf::MessageField<super::DFFJCMLAICL::DFFJCMLAICL>,
    // @@protoc_insertion_point(field:JACMENOKJFM.CPBMAPFLPLC)
    pub CPBMAPFLPLC: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:JACMENOKJFM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JACMENOKJFM {
    fn default() -> &'a JACMENOKJFM {
        <JACMENOKJFM as ::protobuf::Message>::default_instance()
    }
}

impl JACMENOKJFM {
    pub fn new() -> JACMENOKJFM {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PGALDKKFBLC::PGALDKKFBLC>(
            "HLAGJPBAEML",
            |m: &JACMENOKJFM| { &m.HLAGJPBAEML },
            |m: &mut JACMENOKJFM| { &mut m.HLAGJPBAEML },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LGELJHJOMLO::LGELJHJOMLO>(
            "CKMAHDGIBOH",
            |m: &JACMENOKJFM| { &m.CKMAHDGIBOH },
            |m: &mut JACMENOKJFM| { &mut m.CKMAHDGIBOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AFAGHELICPD::AFAGHELICPD>(
            "FIOCABCBNKB",
            |m: &JACMENOKJFM| { &m.FIOCABCBNKB },
            |m: &mut JACMENOKJFM| { &mut m.FIOCABCBNKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CMNNLMCEMCG",
            |m: &JACMENOKJFM| { &m.CMNNLMCEMCG },
            |m: &mut JACMENOKJFM| { &mut m.CMNNLMCEMCG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::AJCNDBHNLFL::AJCNDBHNLFL>(
            "OFOLHKCNLBA",
            |m: &JACMENOKJFM| { &m.OFOLHKCNLBA },
            |m: &mut JACMENOKJFM| { &mut m.OFOLHKCNLBA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DFFJCMLAICL::DFFJCMLAICL>(
            "BBCPOEBNANC",
            |m: &JACMENOKJFM| { &m.BBCPOEBNANC },
            |m: &mut JACMENOKJFM| { &mut m.BBCPOEBNANC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CPBMAPFLPLC",
            |m: &JACMENOKJFM| { &m.CPBMAPFLPLC },
            |m: &mut JACMENOKJFM| { &mut m.CPBMAPFLPLC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JACMENOKJFM>(
            "JACMENOKJFM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JACMENOKJFM {
    const NAME: &'static str = "JACMENOKJFM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HLAGJPBAEML)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CKMAHDGIBOH)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FIOCABCBNKB)?;
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.CMNNLMCEMCG)?;
                },
                48 => {
                    self.CMNNLMCEMCG.push(is.read_uint32()?);
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OFOLHKCNLBA)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BBCPOEBNANC)?;
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.CPBMAPFLPLC)?;
                },
                104 => {
                    self.CPBMAPFLPLC.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.HLAGJPBAEML.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CKMAHDGIBOH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FIOCABCBNKB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.CMNNLMCEMCG);
        if let Some(v) = self.OFOLHKCNLBA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.BBCPOEBNANC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.CPBMAPFLPLC);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.HLAGJPBAEML.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.CKMAHDGIBOH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.FIOCABCBNKB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_repeated_packed_uint32(6, &self.CMNNLMCEMCG)?;
        if let Some(v) = self.OFOLHKCNLBA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.BBCPOEBNANC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_repeated_packed_uint32(13, &self.CPBMAPFLPLC)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JACMENOKJFM {
        JACMENOKJFM::new()
    }

    fn clear(&mut self) {
        self.HLAGJPBAEML.clear();
        self.CKMAHDGIBOH.clear();
        self.FIOCABCBNKB.clear();
        self.CMNNLMCEMCG.clear();
        self.OFOLHKCNLBA.clear();
        self.BBCPOEBNANC.clear();
        self.CPBMAPFLPLC.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JACMENOKJFM {
        static instance: JACMENOKJFM = JACMENOKJFM {
            HLAGJPBAEML: ::protobuf::MessageField::none(),
            CKMAHDGIBOH: ::protobuf::MessageField::none(),
            FIOCABCBNKB: ::protobuf::MessageField::none(),
            CMNNLMCEMCG: ::std::vec::Vec::new(),
            OFOLHKCNLBA: ::protobuf::MessageField::none(),
            BBCPOEBNANC: ::protobuf::MessageField::none(),
            CPBMAPFLPLC: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JACMENOKJFM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JACMENOKJFM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JACMENOKJFM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JACMENOKJFM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JACMENOKJFM.proto\x1a\x11AFAGHELICPD.proto\x1a\x11AJCNDBHNLFL.prot\
    o\x1a\x11DFFJCMLAICL.proto\x1a\x11LGELJHJOMLO.proto\x1a\x11PGALDKKFBLC.p\
    roto\"\xc1\x02\n\x0bJACMENOKJFM\x12.\n\x0bHLAGJPBAEML\x18\t\x20\x01(\x0b\
    2\x0c.PGALDKKFBLCR\x0bHLAGJPBAEML\x12.\n\x0bCKMAHDGIBOH\x18\x0b\x20\x01(\
    \x0b2\x0c.LGELJHJOMLOR\x0bCKMAHDGIBOH\x12.\n\x0bFIOCABCBNKB\x18\x08\x20\
    \x01(\x0b2\x0c.AFAGHELICPDR\x0bFIOCABCBNKB\x12\x20\n\x0bCMNNLMCEMCG\x18\
    \x06\x20\x03(\rR\x0bCMNNLMCEMCG\x12.\n\x0bOFOLHKCNLBA\x18\x0f\x20\x01(\
    \x0b2\x0c.AJCNDBHNLFLR\x0bOFOLHKCNLBA\x12.\n\x0bBBCPOEBNANC\x18\x05\x20\
    \x01(\x0b2\x0c.DFFJCMLAICLR\x0bBBCPOEBNANC\x12\x20\n\x0bCPBMAPFLPLC\x18\
    \r\x20\x03(\rR\x0bCPBMAPFLPLCb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::AFAGHELICPD::file_descriptor().clone());
            deps.push(super::AJCNDBHNLFL::file_descriptor().clone());
            deps.push(super::DFFJCMLAICL::file_descriptor().clone());
            deps.push(super::LGELJHJOMLO::file_descriptor().clone());
            deps.push(super::PGALDKKFBLC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JACMENOKJFM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
