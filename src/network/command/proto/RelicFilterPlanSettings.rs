// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RelicFilterPlanSettings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RelicFilterPlanSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RelicFilterPlanSettings {
    // message fields
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.rarity_bitset)
    pub rarity_bitset: u32,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.relic_set_list)
    pub relic_set_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.body_main_property_list)
    pub body_main_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.foot_main_property_list)
    pub foot_main_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.sphere_main_property_list)
    pub sphere_main_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.rope_main_property_list)
    pub rope_main_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.is_include_filter_sub_property)
    pub is_include_filter_sub_property: bool,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.sub_property_num)
    pub sub_property_num: u32,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.sub_property_list)
    pub sub_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.head_main_property_list)
    pub head_main_property_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RelicFilterPlanSettings.hand_main_property_list)
    pub hand_main_property_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:RelicFilterPlanSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RelicFilterPlanSettings {
    fn default() -> &'a RelicFilterPlanSettings {
        <RelicFilterPlanSettings as ::protobuf::Message>::default_instance()
    }
}

impl RelicFilterPlanSettings {
    pub fn new() -> RelicFilterPlanSettings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rarity_bitset",
            |m: &RelicFilterPlanSettings| { &m.rarity_bitset },
            |m: &mut RelicFilterPlanSettings| { &mut m.rarity_bitset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relic_set_list",
            |m: &RelicFilterPlanSettings| { &m.relic_set_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.relic_set_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "body_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.body_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.body_main_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "foot_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.foot_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.foot_main_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sphere_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.sphere_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.sphere_main_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rope_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.rope_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.rope_main_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_include_filter_sub_property",
            |m: &RelicFilterPlanSettings| { &m.is_include_filter_sub_property },
            |m: &mut RelicFilterPlanSettings| { &mut m.is_include_filter_sub_property },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sub_property_num",
            |m: &RelicFilterPlanSettings| { &m.sub_property_num },
            |m: &mut RelicFilterPlanSettings| { &mut m.sub_property_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sub_property_list",
            |m: &RelicFilterPlanSettings| { &m.sub_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.sub_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "head_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.head_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.head_main_property_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hand_main_property_list",
            |m: &RelicFilterPlanSettings| { &m.hand_main_property_list },
            |m: &mut RelicFilterPlanSettings| { &mut m.hand_main_property_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelicFilterPlanSettings>(
            "RelicFilterPlanSettings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RelicFilterPlanSettings {
    const NAME: &'static str = "RelicFilterPlanSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rarity_bitset = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.relic_set_list)?;
                },
                16 => {
                    self.relic_set_list.push(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.body_main_property_list)?;
                },
                24 => {
                    self.body_main_property_list.push(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.foot_main_property_list)?;
                },
                32 => {
                    self.foot_main_property_list.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.sphere_main_property_list)?;
                },
                40 => {
                    self.sphere_main_property_list.push(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.rope_main_property_list)?;
                },
                48 => {
                    self.rope_main_property_list.push(is.read_uint32()?);
                },
                56 => {
                    self.is_include_filter_sub_property = is.read_bool()?;
                },
                64 => {
                    self.sub_property_num = is.read_uint32()?;
                },
                74 => {
                    is.read_repeated_packed_uint32_into(&mut self.sub_property_list)?;
                },
                72 => {
                    self.sub_property_list.push(is.read_uint32()?);
                },
                82 => {
                    is.read_repeated_packed_uint32_into(&mut self.head_main_property_list)?;
                },
                80 => {
                    self.head_main_property_list.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.hand_main_property_list)?;
                },
                88 => {
                    self.hand_main_property_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.rarity_bitset != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.rarity_bitset);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(2, &self.relic_set_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.body_main_property_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.foot_main_property_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.sphere_main_property_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.rope_main_property_list);
        if self.is_include_filter_sub_property != false {
            my_size += 1 + 1;
        }
        if self.sub_property_num != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.sub_property_num);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(9, &self.sub_property_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(10, &self.head_main_property_list);
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.hand_main_property_list);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.rarity_bitset != 0 {
            os.write_uint32(1, self.rarity_bitset)?;
        }
        os.write_repeated_packed_uint32(2, &self.relic_set_list)?;
        os.write_repeated_packed_uint32(3, &self.body_main_property_list)?;
        os.write_repeated_packed_uint32(4, &self.foot_main_property_list)?;
        os.write_repeated_packed_uint32(5, &self.sphere_main_property_list)?;
        os.write_repeated_packed_uint32(6, &self.rope_main_property_list)?;
        if self.is_include_filter_sub_property != false {
            os.write_bool(7, self.is_include_filter_sub_property)?;
        }
        if self.sub_property_num != 0 {
            os.write_uint32(8, self.sub_property_num)?;
        }
        os.write_repeated_packed_uint32(9, &self.sub_property_list)?;
        os.write_repeated_packed_uint32(10, &self.head_main_property_list)?;
        os.write_repeated_packed_uint32(11, &self.hand_main_property_list)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RelicFilterPlanSettings {
        RelicFilterPlanSettings::new()
    }

    fn clear(&mut self) {
        self.rarity_bitset = 0;
        self.relic_set_list.clear();
        self.body_main_property_list.clear();
        self.foot_main_property_list.clear();
        self.sphere_main_property_list.clear();
        self.rope_main_property_list.clear();
        self.is_include_filter_sub_property = false;
        self.sub_property_num = 0;
        self.sub_property_list.clear();
        self.head_main_property_list.clear();
        self.hand_main_property_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RelicFilterPlanSettings {
        static instance: RelicFilterPlanSettings = RelicFilterPlanSettings {
            rarity_bitset: 0,
            relic_set_list: ::std::vec::Vec::new(),
            body_main_property_list: ::std::vec::Vec::new(),
            foot_main_property_list: ::std::vec::Vec::new(),
            sphere_main_property_list: ::std::vec::Vec::new(),
            rope_main_property_list: ::std::vec::Vec::new(),
            is_include_filter_sub_property: false,
            sub_property_num: 0,
            sub_property_list: ::std::vec::Vec::new(),
            head_main_property_list: ::std::vec::Vec::new(),
            hand_main_property_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RelicFilterPlanSettings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RelicFilterPlanSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RelicFilterPlanSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelicFilterPlanSettings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dRelicFilterPlanSettings.proto\"\xcc\x04\n\x17RelicFilterPlanSettin\
    gs\x12#\n\rrarity_bitset\x18\x01\x20\x01(\rR\x0crarityBitset\x12$\n\x0er\
    elic_set_list\x18\x02\x20\x03(\rR\x0crelicSetList\x125\n\x17body_main_pr\
    operty_list\x18\x03\x20\x03(\rR\x14bodyMainPropertyList\x125\n\x17foot_m\
    ain_property_list\x18\x04\x20\x03(\rR\x14footMainPropertyList\x129\n\x19\
    sphere_main_property_list\x18\x05\x20\x03(\rR\x16sphereMainPropertyList\
    \x125\n\x17rope_main_property_list\x18\x06\x20\x03(\rR\x14ropeMainProper\
    tyList\x12B\n\x1eis_include_filter_sub_property\x18\x07\x20\x01(\x08R\
    \x1aisIncludeFilterSubProperty\x12(\n\x10sub_property_num\x18\x08\x20\
    \x01(\rR\x0esubPropertyNum\x12*\n\x11sub_property_list\x18\t\x20\x03(\rR\
    \x0fsubPropertyList\x125\n\x17head_main_property_list\x18\n\x20\x03(\rR\
    \x14headMainPropertyList\x125\n\x17hand_main_property_list\x18\x0b\x20\
    \x03(\rR\x14handMainPropertyListb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RelicFilterPlanSettings::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
