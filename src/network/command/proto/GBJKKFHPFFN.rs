// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GBJKKFHPFFN.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GBJKKFHPFFN)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GBJKKFHPFFN {
    // message fields
    // @@protoc_insertion_point(field:GBJKKFHPFFN.AKNKPKPLJHF)
    pub AKNKPKPLJHF: u32,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.AJCIODKLLML)
    pub AJCIODKLLML: bool,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.JFMOFIIDCNP)
    pub JFMOFIIDCNP: u32,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.DEKHDIBCFAB)
    pub DEKHDIBCFAB: bool,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.IHKEJEBCEIB)
    pub IHKEJEBCEIB: u32,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.NDJFNHFPCGD)
    pub NDJFNHFPCGD: ::std::vec::Vec<super::GOAMMAGCIJJ::GOAMMAGCIJJ>,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.CMHGBBHKNCI)
    pub CMHGBBHKNCI: u32,
    // @@protoc_insertion_point(field:GBJKKFHPFFN.FCLNOOGEHMC)
    pub FCLNOOGEHMC: u32,
    // special fields
    // @@protoc_insertion_point(special_field:GBJKKFHPFFN.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GBJKKFHPFFN {
    fn default() -> &'a GBJKKFHPFFN {
        <GBJKKFHPFFN as ::protobuf::Message>::default_instance()
    }
}

impl GBJKKFHPFFN {
    pub fn new() -> GBJKKFHPFFN {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AKNKPKPLJHF",
            |m: &GBJKKFHPFFN| { &m.AKNKPKPLJHF },
            |m: &mut GBJKKFHPFFN| { &mut m.AKNKPKPLJHF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AJCIODKLLML",
            |m: &GBJKKFHPFFN| { &m.AJCIODKLLML },
            |m: &mut GBJKKFHPFFN| { &mut m.AJCIODKLLML },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JFMOFIIDCNP",
            |m: &GBJKKFHPFFN| { &m.JFMOFIIDCNP },
            |m: &mut GBJKKFHPFFN| { &mut m.JFMOFIIDCNP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DEKHDIBCFAB",
            |m: &GBJKKFHPFFN| { &m.DEKHDIBCFAB },
            |m: &mut GBJKKFHPFFN| { &mut m.DEKHDIBCFAB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IHKEJEBCEIB",
            |m: &GBJKKFHPFFN| { &m.IHKEJEBCEIB },
            |m: &mut GBJKKFHPFFN| { &mut m.IHKEJEBCEIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "NDJFNHFPCGD",
            |m: &GBJKKFHPFFN| { &m.NDJFNHFPCGD },
            |m: &mut GBJKKFHPFFN| { &mut m.NDJFNHFPCGD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMHGBBHKNCI",
            |m: &GBJKKFHPFFN| { &m.CMHGBBHKNCI },
            |m: &mut GBJKKFHPFFN| { &mut m.CMHGBBHKNCI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FCLNOOGEHMC",
            |m: &GBJKKFHPFFN| { &m.FCLNOOGEHMC },
            |m: &mut GBJKKFHPFFN| { &mut m.FCLNOOGEHMC },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GBJKKFHPFFN>(
            "GBJKKFHPFFN",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GBJKKFHPFFN {
    const NAME: &'static str = "GBJKKFHPFFN";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.AKNKPKPLJHF = is.read_uint32()?;
                },
                88 => {
                    self.AJCIODKLLML = is.read_bool()?;
                },
                56 => {
                    self.JFMOFIIDCNP = is.read_uint32()?;
                },
                64 => {
                    self.DEKHDIBCFAB = is.read_bool()?;
                },
                80 => {
                    self.IHKEJEBCEIB = is.read_uint32()?;
                },
                10 => {
                    self.NDJFNHFPCGD.push(is.read_message()?);
                },
                104 => {
                    self.CMHGBBHKNCI = is.read_uint32()?;
                },
                112 => {
                    self.FCLNOOGEHMC = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.AKNKPKPLJHF != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.AKNKPKPLJHF);
        }
        if self.AJCIODKLLML != false {
            my_size += 1 + 1;
        }
        if self.JFMOFIIDCNP != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.JFMOFIIDCNP);
        }
        if self.DEKHDIBCFAB != false {
            my_size += 1 + 1;
        }
        if self.IHKEJEBCEIB != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.IHKEJEBCEIB);
        }
        for value in &self.NDJFNHFPCGD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CMHGBBHKNCI != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.CMHGBBHKNCI);
        }
        if self.FCLNOOGEHMC != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.FCLNOOGEHMC);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.AKNKPKPLJHF != 0 {
            os.write_uint32(9, self.AKNKPKPLJHF)?;
        }
        if self.AJCIODKLLML != false {
            os.write_bool(11, self.AJCIODKLLML)?;
        }
        if self.JFMOFIIDCNP != 0 {
            os.write_uint32(7, self.JFMOFIIDCNP)?;
        }
        if self.DEKHDIBCFAB != false {
            os.write_bool(8, self.DEKHDIBCFAB)?;
        }
        if self.IHKEJEBCEIB != 0 {
            os.write_uint32(10, self.IHKEJEBCEIB)?;
        }
        for v in &self.NDJFNHFPCGD {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.CMHGBBHKNCI != 0 {
            os.write_uint32(13, self.CMHGBBHKNCI)?;
        }
        if self.FCLNOOGEHMC != 0 {
            os.write_uint32(14, self.FCLNOOGEHMC)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GBJKKFHPFFN {
        GBJKKFHPFFN::new()
    }

    fn clear(&mut self) {
        self.AKNKPKPLJHF = 0;
        self.AJCIODKLLML = false;
        self.JFMOFIIDCNP = 0;
        self.DEKHDIBCFAB = false;
        self.IHKEJEBCEIB = 0;
        self.NDJFNHFPCGD.clear();
        self.CMHGBBHKNCI = 0;
        self.FCLNOOGEHMC = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GBJKKFHPFFN {
        static instance: GBJKKFHPFFN = GBJKKFHPFFN {
            AKNKPKPLJHF: 0,
            AJCIODKLLML: false,
            JFMOFIIDCNP: 0,
            DEKHDIBCFAB: false,
            IHKEJEBCEIB: 0,
            NDJFNHFPCGD: ::std::vec::Vec::new(),
            CMHGBBHKNCI: 0,
            FCLNOOGEHMC: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GBJKKFHPFFN {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GBJKKFHPFFN").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GBJKKFHPFFN {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GBJKKFHPFFN {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GBJKKFHPFFN.proto\x1a\x11GOAMMAGCIJJ.proto\"\xab\x02\n\x0bGBJKKFHP\
    FFN\x12\x20\n\x0bAKNKPKPLJHF\x18\t\x20\x01(\rR\x0bAKNKPKPLJHF\x12\x20\n\
    \x0bAJCIODKLLML\x18\x0b\x20\x01(\x08R\x0bAJCIODKLLML\x12\x20\n\x0bJFMOFI\
    IDCNP\x18\x07\x20\x01(\rR\x0bJFMOFIIDCNP\x12\x20\n\x0bDEKHDIBCFAB\x18\
    \x08\x20\x01(\x08R\x0bDEKHDIBCFAB\x12\x20\n\x0bIHKEJEBCEIB\x18\n\x20\x01\
    (\rR\x0bIHKEJEBCEIB\x12.\n\x0bNDJFNHFPCGD\x18\x01\x20\x03(\x0b2\x0c.GOAM\
    MAGCIJJR\x0bNDJFNHFPCGD\x12\x20\n\x0bCMHGBBHKNCI\x18\r\x20\x01(\rR\x0bCM\
    HGBBHKNCI\x12\x20\n\x0bFCLNOOGEHMC\x18\x0e\x20\x01(\rR\x0bFCLNOOGEHMCb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::GOAMMAGCIJJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GBJKKFHPFFN::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
