// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AAPKBPEGGBH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AAPKBPEGGBH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AAPKBPEGGBH {
    // message fields
    // @@protoc_insertion_point(field:AAPKBPEGGBH.JIBDGCFCDIO)
    pub JIBDGCFCDIO: ::protobuf::MessageField<super::NKIDDDPFLJE::NKIDDDPFLJE>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.CPBNMACLBEH)
    pub CPBNMACLBEH: ::protobuf::MessageField<super::OMDEFBABNNB::OMDEFBABNNB>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.JLFDDMEKLJK)
    pub JLFDDMEKLJK: ::protobuf::MessageField<super::JCHCGFMGBAK::JCHCGFMGBAK>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.CACGEKAANKL)
    pub CACGEKAANKL: ::protobuf::MessageField<super::KLOHNFGBNPH::KLOHNFGBNPH>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.KKOBBENPFPH)
    pub KKOBBENPFPH: ::protobuf::MessageField<super::LLNHFMGMCMN::LLNHFMGMCMN>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.CPIOGJKFECH)
    pub CPIOGJKFECH: ::protobuf::MessageField<super::FINDAFKPOOF::FINDAFKPOOF>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.level)
    pub level: ::protobuf::MessageField<super::MJKKONEIOBO::MJKKONEIOBO>,
    // @@protoc_insertion_point(field:AAPKBPEGGBH.GPKGJLNHPJK)
    pub GPKGJLNHPJK: ::protobuf::MessageField<super::MIKFNBBOPIP::MIKFNBBOPIP>,
    // special fields
    // @@protoc_insertion_point(special_field:AAPKBPEGGBH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AAPKBPEGGBH {
    fn default() -> &'a AAPKBPEGGBH {
        <AAPKBPEGGBH as ::protobuf::Message>::default_instance()
    }
}

impl AAPKBPEGGBH {
    pub fn new() -> AAPKBPEGGBH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NKIDDDPFLJE::NKIDDDPFLJE>(
            "JIBDGCFCDIO",
            |m: &AAPKBPEGGBH| { &m.JIBDGCFCDIO },
            |m: &mut AAPKBPEGGBH| { &mut m.JIBDGCFCDIO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OMDEFBABNNB::OMDEFBABNNB>(
            "CPBNMACLBEH",
            |m: &AAPKBPEGGBH| { &m.CPBNMACLBEH },
            |m: &mut AAPKBPEGGBH| { &mut m.CPBNMACLBEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::JCHCGFMGBAK::JCHCGFMGBAK>(
            "JLFDDMEKLJK",
            |m: &AAPKBPEGGBH| { &m.JLFDDMEKLJK },
            |m: &mut AAPKBPEGGBH| { &mut m.JLFDDMEKLJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KLOHNFGBNPH::KLOHNFGBNPH>(
            "CACGEKAANKL",
            |m: &AAPKBPEGGBH| { &m.CACGEKAANKL },
            |m: &mut AAPKBPEGGBH| { &mut m.CACGEKAANKL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LLNHFMGMCMN::LLNHFMGMCMN>(
            "KKOBBENPFPH",
            |m: &AAPKBPEGGBH| { &m.KKOBBENPFPH },
            |m: &mut AAPKBPEGGBH| { &mut m.KKOBBENPFPH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::FINDAFKPOOF::FINDAFKPOOF>(
            "CPIOGJKFECH",
            |m: &AAPKBPEGGBH| { &m.CPIOGJKFECH },
            |m: &mut AAPKBPEGGBH| { &mut m.CPIOGJKFECH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MJKKONEIOBO::MJKKONEIOBO>(
            "level",
            |m: &AAPKBPEGGBH| { &m.level },
            |m: &mut AAPKBPEGGBH| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MIKFNBBOPIP::MIKFNBBOPIP>(
            "GPKGJLNHPJK",
            |m: &AAPKBPEGGBH| { &m.GPKGJLNHPJK },
            |m: &mut AAPKBPEGGBH| { &mut m.GPKGJLNHPJK },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AAPKBPEGGBH>(
            "AAPKBPEGGBH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AAPKBPEGGBH {
    const NAME: &'static str = "AAPKBPEGGBH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JIBDGCFCDIO)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CPBNMACLBEH)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JLFDDMEKLJK)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CACGEKAANKL)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KKOBBENPFPH)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CPIOGJKFECH)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.level)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GPKGJLNHPJK)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.JIBDGCFCDIO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CPBNMACLBEH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.JLFDDMEKLJK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CACGEKAANKL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KKOBBENPFPH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CPIOGJKFECH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.GPKGJLNHPJK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.JIBDGCFCDIO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.CPBNMACLBEH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.JLFDDMEKLJK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.CACGEKAANKL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.KKOBBENPFPH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.CPIOGJKFECH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.GPKGJLNHPJK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AAPKBPEGGBH {
        AAPKBPEGGBH::new()
    }

    fn clear(&mut self) {
        self.JIBDGCFCDIO.clear();
        self.CPBNMACLBEH.clear();
        self.JLFDDMEKLJK.clear();
        self.CACGEKAANKL.clear();
        self.KKOBBENPFPH.clear();
        self.CPIOGJKFECH.clear();
        self.level.clear();
        self.GPKGJLNHPJK.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AAPKBPEGGBH {
        static instance: AAPKBPEGGBH = AAPKBPEGGBH {
            JIBDGCFCDIO: ::protobuf::MessageField::none(),
            CPBNMACLBEH: ::protobuf::MessageField::none(),
            JLFDDMEKLJK: ::protobuf::MessageField::none(),
            CACGEKAANKL: ::protobuf::MessageField::none(),
            KKOBBENPFPH: ::protobuf::MessageField::none(),
            CPIOGJKFECH: ::protobuf::MessageField::none(),
            level: ::protobuf::MessageField::none(),
            GPKGJLNHPJK: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AAPKBPEGGBH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AAPKBPEGGBH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AAPKBPEGGBH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AAPKBPEGGBH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AAPKBPEGGBH.proto\x1a\x11FINDAFKPOOF.proto\x1a\x11JCHCGFMGBAK.prot\
    o\x1a\x11KLOHNFGBNPH.proto\x1a\x11LLNHFMGMCMN.proto\x1a\x11MIKFNBBOPIP.p\
    roto\x1a\x11MJKKONEIOBO.proto\x1a\x11NKIDDDPFLJE.proto\x1a\x11OMDEFBABNN\
    B.proto\"\x81\x03\n\x0bAAPKBPEGGBH\x12.\n\x0bJIBDGCFCDIO\x18\x06\x20\x01\
    (\x0b2\x0c.NKIDDDPFLJER\x0bJIBDGCFCDIO\x12.\n\x0bCPBNMACLBEH\x18\n\x20\
    \x01(\x0b2\x0c.OMDEFBABNNBR\x0bCPBNMACLBEH\x12.\n\x0bJLFDDMEKLJK\x18\x02\
    \x20\x01(\x0b2\x0c.JCHCGFMGBAKR\x0bJLFDDMEKLJK\x12.\n\x0bCACGEKAANKL\x18\
    \x07\x20\x01(\x0b2\x0c.KLOHNFGBNPHR\x0bCACGEKAANKL\x12.\n\x0bKKOBBENPFPH\
    \x18\r\x20\x01(\x0b2\x0c.LLNHFMGMCMNR\x0bKKOBBENPFPH\x12.\n\x0bCPIOGJKFE\
    CH\x18\x0c\x20\x01(\x0b2\x0c.FINDAFKPOOFR\x0bCPIOGJKFECH\x12\"\n\x05leve\
    l\x18\x0e\x20\x01(\x0b2\x0c.MJKKONEIOBOR\x05level\x12.\n\x0bGPKGJLNHPJK\
    \x18\x05\x20\x01(\x0b2\x0c.MIKFNBBOPIPR\x0bGPKGJLNHPJKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::FINDAFKPOOF::file_descriptor().clone());
            deps.push(super::JCHCGFMGBAK::file_descriptor().clone());
            deps.push(super::KLOHNFGBNPH::file_descriptor().clone());
            deps.push(super::LLNHFMGMCMN::file_descriptor().clone());
            deps.push(super::MIKFNBBOPIP::file_descriptor().clone());
            deps.push(super::MJKKONEIOBO::file_descriptor().clone());
            deps.push(super::NKIDDDPFLJE::file_descriptor().clone());
            deps.push(super::OMDEFBABNNB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AAPKBPEGGBH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
