// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AKMBEHGCBHE.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AKMBEHGCBHE)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AKMBEHGCBHE {
    // message oneof groups
    pub ECOEKHPGMEA: ::std::option::Option<akmbehgcbhe::ECOEKHPGMEA>,
    // special fields
    // @@protoc_insertion_point(special_field:AKMBEHGCBHE.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AKMBEHGCBHE {
    fn default() -> &'a AKMBEHGCBHE {
        <AKMBEHGCBHE as ::protobuf::Message>::default_instance()
    }
}

impl AKMBEHGCBHE {
    pub fn new() -> AKMBEHGCBHE {
        ::std::default::Default::default()
    }

    // .AKKCDLMLKDF CGGNFJCBBKM = 4;

    pub fn CGGNFJCBBKM(&self) -> &super::AKKCDLMLKDF::AKKCDLMLKDF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(ref v)) => v,
            _ => <super::AKKCDLMLKDF::AKKCDLMLKDF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGGNFJCBBKM(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_CGGNFJCBBKM(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGGNFJCBBKM(&mut self, v: super::AKKCDLMLKDF::AKKCDLMLKDF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGGNFJCBBKM(&mut self) -> &mut super::AKKCDLMLKDF::AKKCDLMLKDF {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(super::AKKCDLMLKDF::AKKCDLMLKDF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGGNFJCBBKM(&mut self) -> super::AKKCDLMLKDF::AKKCDLMLKDF {
        if self.has_CGGNFJCBBKM() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AKKCDLMLKDF::AKKCDLMLKDF::new()
        }
    }

    // .ALNIGMCJFDM PICLEGGGNCF = 11;

    pub fn PICLEGGGNCF(&self) -> &super::ALNIGMCJFDM::ALNIGMCJFDM {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(ref v)) => v,
            _ => <super::ALNIGMCJFDM::ALNIGMCJFDM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PICLEGGGNCF(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PICLEGGGNCF(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PICLEGGGNCF(&mut self, v: super::ALNIGMCJFDM::ALNIGMCJFDM) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PICLEGGGNCF(&mut self) -> &mut super::ALNIGMCJFDM::ALNIGMCJFDM {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(super::ALNIGMCJFDM::ALNIGMCJFDM::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PICLEGGGNCF(&mut self) -> super::ALNIGMCJFDM::ALNIGMCJFDM {
        if self.has_PICLEGGGNCF() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ALNIGMCJFDM::ALNIGMCJFDM::new()
        }
    }

    // .NEOCCICFNED EAPMICBGOIO = 9;

    pub fn EAPMICBGOIO(&self) -> &super::NEOCCICFNED::NEOCCICFNED {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(ref v)) => v,
            _ => <super::NEOCCICFNED::NEOCCICFNED as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EAPMICBGOIO(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_EAPMICBGOIO(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAPMICBGOIO(&mut self, v: super::NEOCCICFNED::NEOCCICFNED) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EAPMICBGOIO(&mut self) -> &mut super::NEOCCICFNED::NEOCCICFNED {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(super::NEOCCICFNED::NEOCCICFNED::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EAPMICBGOIO(&mut self) -> super::NEOCCICFNED::NEOCCICFNED {
        if self.has_EAPMICBGOIO() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NEOCCICFNED::NEOCCICFNED::new()
        }
    }

    // .KOJKPLCEGEN NNCHMGDGDFI = 13;

    pub fn NNCHMGDGDFI(&self) -> &super::KOJKPLCEGEN::KOJKPLCEGEN {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(ref v)) => v,
            _ => <super::KOJKPLCEGEN::KOJKPLCEGEN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NNCHMGDGDFI(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_NNCHMGDGDFI(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NNCHMGDGDFI(&mut self, v: super::KOJKPLCEGEN::KOJKPLCEGEN) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NNCHMGDGDFI(&mut self) -> &mut super::KOJKPLCEGEN::KOJKPLCEGEN {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(super::KOJKPLCEGEN::KOJKPLCEGEN::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NNCHMGDGDFI(&mut self) -> super::KOJKPLCEGEN::KOJKPLCEGEN {
        if self.has_NNCHMGDGDFI() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KOJKPLCEGEN::KOJKPLCEGEN::new()
        }
    }

    // .BHJHAPDLPNO NDKHOGEMKJA = 5;

    pub fn NDKHOGEMKJA(&self) -> &super::BHJHAPDLPNO::BHJHAPDLPNO {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(ref v)) => v,
            _ => <super::BHJHAPDLPNO::BHJHAPDLPNO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDKHOGEMKJA(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_NDKHOGEMKJA(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDKHOGEMKJA(&mut self, v: super::BHJHAPDLPNO::BHJHAPDLPNO) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDKHOGEMKJA(&mut self) -> &mut super::BHJHAPDLPNO::BHJHAPDLPNO {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(super::BHJHAPDLPNO::BHJHAPDLPNO::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDKHOGEMKJA(&mut self) -> super::BHJHAPDLPNO::BHJHAPDLPNO {
        if self.has_NDKHOGEMKJA() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BHJHAPDLPNO::BHJHAPDLPNO::new()
        }
    }

    // .JDOOIDBKCIM JLFDDMEKLJK = 2;

    pub fn JLFDDMEKLJK(&self) -> &super::JDOOIDBKCIM::JDOOIDBKCIM {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(ref v)) => v,
            _ => <super::JDOOIDBKCIM::JDOOIDBKCIM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JLFDDMEKLJK(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_JLFDDMEKLJK(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JLFDDMEKLJK(&mut self, v: super::JDOOIDBKCIM::JDOOIDBKCIM) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JLFDDMEKLJK(&mut self) -> &mut super::JDOOIDBKCIM::JDOOIDBKCIM {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(super::JDOOIDBKCIM::JDOOIDBKCIM::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JLFDDMEKLJK(&mut self) -> super::JDOOIDBKCIM::JDOOIDBKCIM {
        if self.has_JLFDDMEKLJK() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JDOOIDBKCIM::JDOOIDBKCIM::new()
        }
    }

    // .GJBBLCIPBHD LCBECPOOGCL = 10;

    pub fn LCBECPOOGCL(&self) -> &super::GJBBLCIPBHD::GJBBLCIPBHD {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(ref v)) => v,
            _ => <super::GJBBLCIPBHD::GJBBLCIPBHD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LCBECPOOGCL(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_LCBECPOOGCL(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LCBECPOOGCL(&mut self, v: super::GJBBLCIPBHD::GJBBLCIPBHD) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LCBECPOOGCL(&mut self) -> &mut super::GJBBLCIPBHD::GJBBLCIPBHD {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(super::GJBBLCIPBHD::GJBBLCIPBHD::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LCBECPOOGCL(&mut self) -> super::GJBBLCIPBHD::GJBBLCIPBHD {
        if self.has_LCBECPOOGCL() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GJBBLCIPBHD::GJBBLCIPBHD::new()
        }
    }

    // .LEHGLCELJMF CEAJNLIOFHF = 1;

    pub fn CEAJNLIOFHF(&self) -> &super::LEHGLCELJMF::LEHGLCELJMF {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(ref v)) => v,
            _ => <super::LEHGLCELJMF::LEHGLCELJMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEAJNLIOFHF(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_CEAJNLIOFHF(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEAJNLIOFHF(&mut self, v: super::LEHGLCELJMF::LEHGLCELJMF) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEAJNLIOFHF(&mut self) -> &mut super::LEHGLCELJMF::LEHGLCELJMF {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(super::LEHGLCELJMF::LEHGLCELJMF::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEAJNLIOFHF(&mut self) -> super::LEHGLCELJMF::LEHGLCELJMF {
        if self.has_CEAJNLIOFHF() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LEHGLCELJMF::LEHGLCELJMF::new()
        }
    }

    // .FHJGLOPMFNC PGPAAPOPDOC = 3;

    pub fn PGPAAPOPDOC(&self) -> &super::FHJGLOPMFNC::FHJGLOPMFNC {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(ref v)) => v,
            _ => <super::FHJGLOPMFNC::FHJGLOPMFNC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PGPAAPOPDOC(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PGPAAPOPDOC(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PGPAAPOPDOC(&mut self, v: super::FHJGLOPMFNC::FHJGLOPMFNC) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PGPAAPOPDOC(&mut self) -> &mut super::FHJGLOPMFNC::FHJGLOPMFNC {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(super::FHJGLOPMFNC::FHJGLOPMFNC::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PGPAAPOPDOC(&mut self) -> super::FHJGLOPMFNC::FHJGLOPMFNC {
        if self.has_PGPAAPOPDOC() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHJGLOPMFNC::FHJGLOPMFNC::new()
        }
    }

    // .JBNCDFFPDOP PMKEHGBPCNG = 7;

    pub fn PMKEHGBPCNG(&self) -> &super::JBNCDFFPDOP::JBNCDFFPDOP {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(ref v)) => v,
            _ => <super::JBNCDFFPDOP::JBNCDFFPDOP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMKEHGBPCNG(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
    }

    pub fn has_PMKEHGBPCNG(&self) -> bool {
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMKEHGBPCNG(&mut self, v: super::JBNCDFFPDOP::JBNCDFFPDOP) {
        self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMKEHGBPCNG(&mut self) -> &mut super::JBNCDFFPDOP::JBNCDFFPDOP {
        if let ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(_)) = self.ECOEKHPGMEA {
        } else {
            self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(super::JBNCDFFPDOP::JBNCDFFPDOP::new()));
        }
        match self.ECOEKHPGMEA {
            ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMKEHGBPCNG(&mut self) -> super::JBNCDFFPDOP::JBNCDFFPDOP {
        if self.has_PMKEHGBPCNG() {
            match self.ECOEKHPGMEA.take() {
                ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBNCDFFPDOP::JBNCDFFPDOP::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AKKCDLMLKDF::AKKCDLMLKDF>(
            "CGGNFJCBBKM",
            AKMBEHGCBHE::has_CGGNFJCBBKM,
            AKMBEHGCBHE::CGGNFJCBBKM,
            AKMBEHGCBHE::mut_CGGNFJCBBKM,
            AKMBEHGCBHE::set_CGGNFJCBBKM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ALNIGMCJFDM::ALNIGMCJFDM>(
            "PICLEGGGNCF",
            AKMBEHGCBHE::has_PICLEGGGNCF,
            AKMBEHGCBHE::PICLEGGGNCF,
            AKMBEHGCBHE::mut_PICLEGGGNCF,
            AKMBEHGCBHE::set_PICLEGGGNCF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NEOCCICFNED::NEOCCICFNED>(
            "EAPMICBGOIO",
            AKMBEHGCBHE::has_EAPMICBGOIO,
            AKMBEHGCBHE::EAPMICBGOIO,
            AKMBEHGCBHE::mut_EAPMICBGOIO,
            AKMBEHGCBHE::set_EAPMICBGOIO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KOJKPLCEGEN::KOJKPLCEGEN>(
            "NNCHMGDGDFI",
            AKMBEHGCBHE::has_NNCHMGDGDFI,
            AKMBEHGCBHE::NNCHMGDGDFI,
            AKMBEHGCBHE::mut_NNCHMGDGDFI,
            AKMBEHGCBHE::set_NNCHMGDGDFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BHJHAPDLPNO::BHJHAPDLPNO>(
            "NDKHOGEMKJA",
            AKMBEHGCBHE::has_NDKHOGEMKJA,
            AKMBEHGCBHE::NDKHOGEMKJA,
            AKMBEHGCBHE::mut_NDKHOGEMKJA,
            AKMBEHGCBHE::set_NDKHOGEMKJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JDOOIDBKCIM::JDOOIDBKCIM>(
            "JLFDDMEKLJK",
            AKMBEHGCBHE::has_JLFDDMEKLJK,
            AKMBEHGCBHE::JLFDDMEKLJK,
            AKMBEHGCBHE::mut_JLFDDMEKLJK,
            AKMBEHGCBHE::set_JLFDDMEKLJK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GJBBLCIPBHD::GJBBLCIPBHD>(
            "LCBECPOOGCL",
            AKMBEHGCBHE::has_LCBECPOOGCL,
            AKMBEHGCBHE::LCBECPOOGCL,
            AKMBEHGCBHE::mut_LCBECPOOGCL,
            AKMBEHGCBHE::set_LCBECPOOGCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LEHGLCELJMF::LEHGLCELJMF>(
            "CEAJNLIOFHF",
            AKMBEHGCBHE::has_CEAJNLIOFHF,
            AKMBEHGCBHE::CEAJNLIOFHF,
            AKMBEHGCBHE::mut_CEAJNLIOFHF,
            AKMBEHGCBHE::set_CEAJNLIOFHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHJGLOPMFNC::FHJGLOPMFNC>(
            "PGPAAPOPDOC",
            AKMBEHGCBHE::has_PGPAAPOPDOC,
            AKMBEHGCBHE::PGPAAPOPDOC,
            AKMBEHGCBHE::mut_PGPAAPOPDOC,
            AKMBEHGCBHE::set_PGPAAPOPDOC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBNCDFFPDOP::JBNCDFFPDOP>(
            "PMKEHGBPCNG",
            AKMBEHGCBHE::has_PMKEHGBPCNG,
            AKMBEHGCBHE::PMKEHGBPCNG,
            AKMBEHGCBHE::mut_PMKEHGBPCNG,
            AKMBEHGCBHE::set_PMKEHGBPCNG,
        ));
        oneofs.push(akmbehgcbhe::ECOEKHPGMEA::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AKMBEHGCBHE>(
            "AKMBEHGCBHE",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AKMBEHGCBHE {
    const NAME: &'static str = "AKMBEHGCBHE";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(is.read_message()?));
                },
                90 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(is.read_message()?));
                },
                74 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(is.read_message()?));
                },
                106 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(is.read_message()?));
                },
                42 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(is.read_message()?));
                },
                18 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(is.read_message()?));
                },
                82 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(is.read_message()?));
                },
                10 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(is.read_message()?));
                },
                26 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(is.read_message()?));
                },
                58 => {
                    self.ECOEKHPGMEA = ::std::option::Option::Some(akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.ECOEKHPGMEA {
            match v {
                &akmbehgcbhe::ECOEKHPGMEA::CGGNFJCBBKM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PICLEGGGNCF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::EAPMICBGOIO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::NNCHMGDGDFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::NDKHOGEMKJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::JLFDDMEKLJK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::LCBECPOOGCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::CEAJNLIOFHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PGPAAPOPDOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &akmbehgcbhe::ECOEKHPGMEA::PMKEHGBPCNG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AKMBEHGCBHE {
        AKMBEHGCBHE::new()
    }

    fn clear(&mut self) {
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.ECOEKHPGMEA = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AKMBEHGCBHE {
        static instance: AKMBEHGCBHE = AKMBEHGCBHE {
            ECOEKHPGMEA: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AKMBEHGCBHE {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AKMBEHGCBHE").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AKMBEHGCBHE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AKMBEHGCBHE {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AKMBEHGCBHE`
pub mod akmbehgcbhe {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:AKMBEHGCBHE.ECOEKHPGMEA)
    pub enum ECOEKHPGMEA {
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.CGGNFJCBBKM)
        CGGNFJCBBKM(super::super::AKKCDLMLKDF::AKKCDLMLKDF),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.PICLEGGGNCF)
        PICLEGGGNCF(super::super::ALNIGMCJFDM::ALNIGMCJFDM),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.EAPMICBGOIO)
        EAPMICBGOIO(super::super::NEOCCICFNED::NEOCCICFNED),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.NNCHMGDGDFI)
        NNCHMGDGDFI(super::super::KOJKPLCEGEN::KOJKPLCEGEN),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.NDKHOGEMKJA)
        NDKHOGEMKJA(super::super::BHJHAPDLPNO::BHJHAPDLPNO),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.JLFDDMEKLJK)
        JLFDDMEKLJK(super::super::JDOOIDBKCIM::JDOOIDBKCIM),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.LCBECPOOGCL)
        LCBECPOOGCL(super::super::GJBBLCIPBHD::GJBBLCIPBHD),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.CEAJNLIOFHF)
        CEAJNLIOFHF(super::super::LEHGLCELJMF::LEHGLCELJMF),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.PGPAAPOPDOC)
        PGPAAPOPDOC(super::super::FHJGLOPMFNC::FHJGLOPMFNC),
        // @@protoc_insertion_point(oneof_field:AKMBEHGCBHE.PMKEHGBPCNG)
        PMKEHGBPCNG(super::super::JBNCDFFPDOP::JBNCDFFPDOP),
    }

    impl ::protobuf::Oneof for ECOEKHPGMEA {
    }

    impl ::protobuf::OneofFull for ECOEKHPGMEA {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AKMBEHGCBHE as ::protobuf::MessageFull>::descriptor().oneof_by_name("ECOEKHPGMEA").unwrap()).clone()
        }
    }

    impl ECOEKHPGMEA {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ECOEKHPGMEA>("ECOEKHPGMEA")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11AKMBEHGCBHE.proto\x1a\x11AKKCDLMLKDF.proto\x1a\x11ALNIGMCJFDM.prot\
    o\x1a\x11BHJHAPDLPNO.proto\x1a\x11FHJGLOPMFNC.proto\x1a\x11GJBBLCIPBHD.p\
    roto\x1a\x11JBNCDFFPDOP.proto\x1a\x11JDOOIDBKCIM.proto\x1a\x11KOJKPLCEGE\
    N.proto\x1a\x11LEHGLCELJMF.proto\x1a\x11NEOCCICFNED.proto\"\x90\x04\n\
    \x0bAKMBEHGCBHE\x120\n\x0bCGGNFJCBBKM\x18\x04\x20\x01(\x0b2\x0c.AKKCDLML\
    KDFH\0R\x0bCGGNFJCBBKM\x120\n\x0bPICLEGGGNCF\x18\x0b\x20\x01(\x0b2\x0c.A\
    LNIGMCJFDMH\0R\x0bPICLEGGGNCF\x120\n\x0bEAPMICBGOIO\x18\t\x20\x01(\x0b2\
    \x0c.NEOCCICFNEDH\0R\x0bEAPMICBGOIO\x120\n\x0bNNCHMGDGDFI\x18\r\x20\x01(\
    \x0b2\x0c.KOJKPLCEGENH\0R\x0bNNCHMGDGDFI\x120\n\x0bNDKHOGEMKJA\x18\x05\
    \x20\x01(\x0b2\x0c.BHJHAPDLPNOH\0R\x0bNDKHOGEMKJA\x120\n\x0bJLFDDMEKLJK\
    \x18\x02\x20\x01(\x0b2\x0c.JDOOIDBKCIMH\0R\x0bJLFDDMEKLJK\x120\n\x0bLCBE\
    CPOOGCL\x18\n\x20\x01(\x0b2\x0c.GJBBLCIPBHDH\0R\x0bLCBECPOOGCL\x120\n\
    \x0bCEAJNLIOFHF\x18\x01\x20\x01(\x0b2\x0c.LEHGLCELJMFH\0R\x0bCEAJNLIOFHF\
    \x120\n\x0bPGPAAPOPDOC\x18\x03\x20\x01(\x0b2\x0c.FHJGLOPMFNCH\0R\x0bPGPA\
    APOPDOC\x120\n\x0bPMKEHGBPCNG\x18\x07\x20\x01(\x0b2\x0c.JBNCDFFPDOPH\0R\
    \x0bPMKEHGBPCNGB\r\n\x0bECOEKHPGMEAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::AKKCDLMLKDF::file_descriptor().clone());
            deps.push(super::ALNIGMCJFDM::file_descriptor().clone());
            deps.push(super::BHJHAPDLPNO::file_descriptor().clone());
            deps.push(super::FHJGLOPMFNC::file_descriptor().clone());
            deps.push(super::GJBBLCIPBHD::file_descriptor().clone());
            deps.push(super::JBNCDFFPDOP::file_descriptor().clone());
            deps.push(super::JDOOIDBKCIM::file_descriptor().clone());
            deps.push(super::KOJKPLCEGEN::file_descriptor().clone());
            deps.push(super::LEHGLCELJMF::file_descriptor().clone());
            deps.push(super::NEOCCICFNED::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(AKMBEHGCBHE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
