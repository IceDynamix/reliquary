// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `RogueTournHandBookNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:RogueTournHandBookNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RogueTournHandBookNotify {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<rogue_tourn_hand_book_notify::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:RogueTournHandBookNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RogueTournHandBookNotify {
    fn default() -> &'a RogueTournHandBookNotify {
        <RogueTournHandBookNotify as ::protobuf::Message>::default_instance()
    }
}

impl RogueTournHandBookNotify {
    pub fn new() -> RogueTournHandBookNotify {
        ::std::default::Default::default()
    }

    // .JNIAOGIIOGB IIHOPMEEAJA = 10;

    pub fn IIHOPMEEAJA(&self) -> &super::JNIAOGIIOGB::JNIAOGIIOGB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(ref v)) => v,
            _ => <super::JNIAOGIIOGB::JNIAOGIIOGB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IIHOPMEEAJA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IIHOPMEEAJA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IIHOPMEEAJA(&mut self, v: super::JNIAOGIIOGB::JNIAOGIIOGB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IIHOPMEEAJA(&mut self) -> &mut super::JNIAOGIIOGB::JNIAOGIIOGB {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(super::JNIAOGIIOGB::JNIAOGIIOGB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IIHOPMEEAJA(&mut self) -> super::JNIAOGIIOGB::JNIAOGIIOGB {
        if self.has_IIHOPMEEAJA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JNIAOGIIOGB::JNIAOGIIOGB::new()
        }
    }

    // .JCCCACNFDJG GPOLBDGOOOD = 4;

    pub fn GPOLBDGOOOD(&self) -> &super::JCCCACNFDJG::JCCCACNFDJG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(ref v)) => v,
            _ => <super::JCCCACNFDJG::JCCCACNFDJG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GPOLBDGOOOD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GPOLBDGOOOD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GPOLBDGOOOD(&mut self, v: super::JCCCACNFDJG::JCCCACNFDJG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GPOLBDGOOOD(&mut self) -> &mut super::JCCCACNFDJG::JCCCACNFDJG {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(super::JCCCACNFDJG::JCCCACNFDJG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GPOLBDGOOOD(&mut self) -> super::JCCCACNFDJG::JCCCACNFDJG {
        if self.has_GPOLBDGOOOD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JCCCACNFDJG::JCCCACNFDJG::new()
        }
    }

    // .JFIHGDPOIID ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF = 15;

    pub fn ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&self) -> &super::JFIHGDPOIID::JFIHGDPOIID {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(ref v)) => v,
            _ => <super::JFIHGDPOIID::JFIHGDPOIID as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&mut self, v: super::JFIHGDPOIID::JFIHGDPOIID) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&mut self) -> &mut super::JFIHGDPOIID::JFIHGDPOIID {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(super::JFIHGDPOIID::JFIHGDPOIID::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF(&mut self) -> super::JFIHGDPOIID::JFIHGDPOIID {
        if self.has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFIHGDPOIID::JFIHGDPOIID::new()
        }
    }

    // .ECGOCHPMCPD NFLDODIABCL = 11;

    pub fn NFLDODIABCL(&self) -> &super::ECGOCHPMCPD::ECGOCHPMCPD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(ref v)) => v,
            _ => <super::ECGOCHPMCPD::ECGOCHPMCPD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NFLDODIABCL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NFLDODIABCL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NFLDODIABCL(&mut self, v: super::ECGOCHPMCPD::ECGOCHPMCPD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NFLDODIABCL(&mut self) -> &mut super::ECGOCHPMCPD::ECGOCHPMCPD {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(super::ECGOCHPMCPD::ECGOCHPMCPD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NFLDODIABCL(&mut self) -> super::ECGOCHPMCPD::ECGOCHPMCPD {
        if self.has_NFLDODIABCL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ECGOCHPMCPD::ECGOCHPMCPD::new()
        }
    }

    // .APFJLOFINFJ HPDBJALEMMO = 13;

    pub fn HPDBJALEMMO(&self) -> &super::APFJLOFINFJ::APFJLOFINFJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(ref v)) => v,
            _ => <super::APFJLOFINFJ::APFJLOFINFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HPDBJALEMMO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HPDBJALEMMO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HPDBJALEMMO(&mut self, v: super::APFJLOFINFJ::APFJLOFINFJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HPDBJALEMMO(&mut self) -> &mut super::APFJLOFINFJ::APFJLOFINFJ {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(super::APFJLOFINFJ::APFJLOFINFJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HPDBJALEMMO(&mut self) -> super::APFJLOFINFJ::APFJLOFINFJ {
        if self.has_HPDBJALEMMO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::APFJLOFINFJ::APFJLOFINFJ::new()
        }
    }

    // .FIDFNNCJAJE JMIDLLDKJBI = 12;

    pub fn JMIDLLDKJBI(&self) -> &super::FIDFNNCJAJE::FIDFNNCJAJE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(ref v)) => v,
            _ => <super::FIDFNNCJAJE::FIDFNNCJAJE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JMIDLLDKJBI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JMIDLLDKJBI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JMIDLLDKJBI(&mut self, v: super::FIDFNNCJAJE::FIDFNNCJAJE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JMIDLLDKJBI(&mut self) -> &mut super::FIDFNNCJAJE::FIDFNNCJAJE {
        if let ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(super::FIDFNNCJAJE::FIDFNNCJAJE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JMIDLLDKJBI(&mut self) -> super::FIDFNNCJAJE::FIDFNNCJAJE {
        if self.has_JMIDLLDKJBI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FIDFNNCJAJE::FIDFNNCJAJE::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JNIAOGIIOGB::JNIAOGIIOGB>(
            "IIHOPMEEAJA",
            RogueTournHandBookNotify::has_IIHOPMEEAJA,
            RogueTournHandBookNotify::IIHOPMEEAJA,
            RogueTournHandBookNotify::mut_IIHOPMEEAJA,
            RogueTournHandBookNotify::set_IIHOPMEEAJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JCCCACNFDJG::JCCCACNFDJG>(
            "GPOLBDGOOOD",
            RogueTournHandBookNotify::has_GPOLBDGOOOD,
            RogueTournHandBookNotify::GPOLBDGOOOD,
            RogueTournHandBookNotify::mut_GPOLBDGOOOD,
            RogueTournHandBookNotify::set_GPOLBDGOOOD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFIHGDPOIID::JFIHGDPOIID>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF",
            RogueTournHandBookNotify::has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF,
            RogueTournHandBookNotify::ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF,
            RogueTournHandBookNotify::mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF,
            RogueTournHandBookNotify::set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ECGOCHPMCPD::ECGOCHPMCPD>(
            "NFLDODIABCL",
            RogueTournHandBookNotify::has_NFLDODIABCL,
            RogueTournHandBookNotify::NFLDODIABCL,
            RogueTournHandBookNotify::mut_NFLDODIABCL,
            RogueTournHandBookNotify::set_NFLDODIABCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::APFJLOFINFJ::APFJLOFINFJ>(
            "HPDBJALEMMO",
            RogueTournHandBookNotify::has_HPDBJALEMMO,
            RogueTournHandBookNotify::HPDBJALEMMO,
            RogueTournHandBookNotify::mut_HPDBJALEMMO,
            RogueTournHandBookNotify::set_HPDBJALEMMO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FIDFNNCJAJE::FIDFNNCJAJE>(
            "JMIDLLDKJBI",
            RogueTournHandBookNotify::has_JMIDLLDKJBI,
            RogueTournHandBookNotify::JMIDLLDKJBI,
            RogueTournHandBookNotify::mut_JMIDLLDKJBI,
            RogueTournHandBookNotify::set_JMIDLLDKJBI,
        ));
        oneofs.push(rogue_tourn_hand_book_notify::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RogueTournHandBookNotify>(
            "RogueTournHandBookNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RogueTournHandBookNotify {
    const NAME: &'static str = "RogueTournHandBookNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                82 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(is.read_message()?));
                },
                34 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(is.read_message()?));
                },
                122 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(is.read_message()?));
                },
                90 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(is.read_message()?));
                },
                106 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(is.read_message()?));
                },
                98 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::IIHOPMEEAJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::GPOLBDGOOOD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::NFLDODIABCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::HPDBJALEMMO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &rogue_tourn_hand_book_notify::KFELKJLDKEH::JMIDLLDKJBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RogueTournHandBookNotify {
        RogueTournHandBookNotify::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RogueTournHandBookNotify {
        static instance: RogueTournHandBookNotify = RogueTournHandBookNotify {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RogueTournHandBookNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RogueTournHandBookNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RogueTournHandBookNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RogueTournHandBookNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RogueTournHandBookNotify`
pub mod rogue_tourn_hand_book_notify {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:RogueTournHandBookNotify.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.IIHOPMEEAJA)
        IIHOPMEEAJA(super::super::JNIAOGIIOGB::JNIAOGIIOGB),
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.GPOLBDGOOOD)
        GPOLBDGOOOD(super::super::JCCCACNFDJG::JCCCACNFDJG),
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF)
        ROGUECOMMONACTIONRESULTSOURCETYPEBUFF(super::super::JFIHGDPOIID::JFIHGDPOIID),
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.NFLDODIABCL)
        NFLDODIABCL(super::super::ECGOCHPMCPD::ECGOCHPMCPD),
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.HPDBJALEMMO)
        HPDBJALEMMO(super::super::APFJLOFINFJ::APFJLOFINFJ),
        // @@protoc_insertion_point(oneof_field:RogueTournHandBookNotify.JMIDLLDKJBI)
        JMIDLLDKJBI(super::super::FIDFNNCJAJE::FIDFNNCJAJE),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RogueTournHandBookNotify as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eRogueTournHandBookNotify.proto\x1a\x11APFJLOFINFJ.proto\x1a\x11ECG\
    OCHPMCPD.proto\x1a\x11FIDFNNCJAJE.proto\x1a\x11JCCCACNFDJG.proto\x1a\x11\
    JFIHGDPOIID.proto\x1a\x11JNIAOGIIOGB.proto\"\x8f\x03\n\x18RogueTournHand\
    BookNotify\x120\n\x0bIIHOPMEEAJA\x18\n\x20\x01(\x0b2\x0c.JNIAOGIIOGBH\0R\
    \x0bIIHOPMEEAJA\x120\n\x0bGPOLBDGOOOD\x18\x04\x20\x01(\x0b2\x0c.JCCCACNF\
    DJGH\0R\x0bGPOLBDGOOOD\x12j\n+ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUF\
    F\x18\x0f\x20\x01(\x0b2\x0c.JFIHGDPOIIDH\0R%ROGUECOMMONACTIONRESULTSOURC\
    ETYPEBUFF\x120\n\x0bNFLDODIABCL\x18\x0b\x20\x01(\x0b2\x0c.ECGOCHPMCPDH\0\
    R\x0bNFLDODIABCL\x120\n\x0bHPDBJALEMMO\x18\r\x20\x01(\x0b2\x0c.APFJLOFIN\
    FJH\0R\x0bHPDBJALEMMO\x120\n\x0bJMIDLLDKJBI\x18\x0c\x20\x01(\x0b2\x0c.FI\
    DFNNCJAJEH\0R\x0bJMIDLLDKJBIB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::APFJLOFINFJ::file_descriptor().clone());
            deps.push(super::ECGOCHPMCPD::file_descriptor().clone());
            deps.push(super::FIDFNNCJAJE::file_descriptor().clone());
            deps.push(super::JCCCACNFDJG::file_descriptor().clone());
            deps.push(super::JFIHGDPOIID::file_descriptor().clone());
            deps.push(super::JNIAOGIIOGB::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RogueTournHandBookNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
