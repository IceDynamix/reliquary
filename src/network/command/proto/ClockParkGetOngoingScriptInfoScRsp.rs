// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ClockParkGetOngoingScriptInfoScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ClockParkGetOngoingScriptInfoScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClockParkGetOngoingScriptInfoScRsp {
    // message fields
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.CHOBAOGMLFN)
    pub CHOBAOGMLFN: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.CMGKEOLCBIP)
    pub CMGKEOLCBIP: ::std::string::String,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.OBPFBLNBFKI)
    pub OBPFBLNBFKI: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.AIGEHHNHKPM)
    pub AIGEHHNHKPM: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.CLKEOEHPLNG)
    pub CLKEOEHPLNG: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.IENPHEFANGL)
    pub IENPHEFANGL: ::protobuf::MessageField<super::LKBBKOJDDPD::LKBBKOJDDPD>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.LGOPNBHHHBG)
    pub LGOPNBHHHBG: ::protobuf::MessageField<super::ECMILHCKOMO::ECMILHCKOMO>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.KIEKJEFFPHK)
    pub KIEKJEFFPHK: u32,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.MJDOGPBOJIP)
    pub MJDOGPBOJIP: ::protobuf::MessageField<super::BMLOFPCNGKN::BMLOFPCNGKN>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.EIDLLEOLFGM)
    pub EIDLLEOLFGM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ClockParkGetOngoingScriptInfoScRsp.BLHGBEDNFIB)
    pub BLHGBEDNFIB: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ClockParkGetOngoingScriptInfoScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClockParkGetOngoingScriptInfoScRsp {
    fn default() -> &'a ClockParkGetOngoingScriptInfoScRsp {
        <ClockParkGetOngoingScriptInfoScRsp as ::protobuf::Message>::default_instance()
    }
}

impl ClockParkGetOngoingScriptInfoScRsp {
    pub fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CHOBAOGMLFN",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.CHOBAOGMLFN },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.CHOBAOGMLFN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMGKEOLCBIP",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.CMGKEOLCBIP },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.CMGKEOLCBIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OBPFBLNBFKI",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.OBPFBLNBFKI },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.OBPFBLNBFKI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AIGEHHNHKPM",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.AIGEHHNHKPM },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.AIGEHHNHKPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CLKEOEHPLNG",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.CLKEOEHPLNG },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.CLKEOEHPLNG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LKBBKOJDDPD::LKBBKOJDDPD>(
            "IENPHEFANGL",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.IENPHEFANGL },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.IENPHEFANGL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ECMILHCKOMO::ECMILHCKOMO>(
            "LGOPNBHHHBG",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.LGOPNBHHHBG },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.LGOPNBHHHBG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.retcode },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KIEKJEFFPHK",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.KIEKJEFFPHK },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.KIEKJEFFPHK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BMLOFPCNGKN::BMLOFPCNGKN>(
            "MJDOGPBOJIP",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.MJDOGPBOJIP },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.MJDOGPBOJIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "EIDLLEOLFGM",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.EIDLLEOLFGM },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.EIDLLEOLFGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BLHGBEDNFIB",
            |m: &ClockParkGetOngoingScriptInfoScRsp| { &m.BLHGBEDNFIB },
            |m: &mut ClockParkGetOngoingScriptInfoScRsp| { &mut m.BLHGBEDNFIB },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClockParkGetOngoingScriptInfoScRsp>(
            "ClockParkGetOngoingScriptInfoScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClockParkGetOngoingScriptInfoScRsp {
    const NAME: &'static str = "ClockParkGetOngoingScriptInfoScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.CHOBAOGMLFN = is.read_uint32()?;
                },
                82 => {
                    self.CMGKEOLCBIP = is.read_string()?;
                },
                72 => {
                    self.OBPFBLNBFKI = is.read_uint32()?;
                },
                96 => {
                    self.AIGEHHNHKPM = is.read_uint32()?;
                },
                112 => {
                    self.CLKEOEHPLNG = is.read_uint32()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IENPHEFANGL)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LGOPNBHHHBG)?;
                },
                16 => {
                    self.retcode = is.read_uint32()?;
                },
                24 => {
                    self.KIEKJEFFPHK = is.read_uint32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MJDOGPBOJIP)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.EIDLLEOLFGM)?;
                },
                64 => {
                    self.EIDLLEOLFGM.push(is.read_uint32()?);
                },
                32 => {
                    self.BLHGBEDNFIB = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CHOBAOGMLFN != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.CHOBAOGMLFN);
        }
        if !self.CMGKEOLCBIP.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.CMGKEOLCBIP);
        }
        if self.OBPFBLNBFKI != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.OBPFBLNBFKI);
        }
        if self.AIGEHHNHKPM != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.AIGEHHNHKPM);
        }
        if self.CLKEOEHPLNG != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.CLKEOEHPLNG);
        }
        if let Some(v) = self.IENPHEFANGL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LGOPNBHHHBG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.retcode);
        }
        if self.KIEKJEFFPHK != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.KIEKJEFFPHK);
        }
        if let Some(v) = self.MJDOGPBOJIP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.EIDLLEOLFGM);
        if self.BLHGBEDNFIB != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.BLHGBEDNFIB);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CHOBAOGMLFN != 0 {
            os.write_uint32(6, self.CHOBAOGMLFN)?;
        }
        if !self.CMGKEOLCBIP.is_empty() {
            os.write_string(10, &self.CMGKEOLCBIP)?;
        }
        if self.OBPFBLNBFKI != 0 {
            os.write_uint32(9, self.OBPFBLNBFKI)?;
        }
        if self.AIGEHHNHKPM != 0 {
            os.write_uint32(12, self.AIGEHHNHKPM)?;
        }
        if self.CLKEOEHPLNG != 0 {
            os.write_uint32(14, self.CLKEOEHPLNG)?;
        }
        if let Some(v) = self.IENPHEFANGL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.LGOPNBHHHBG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.retcode != 0 {
            os.write_uint32(2, self.retcode)?;
        }
        if self.KIEKJEFFPHK != 0 {
            os.write_uint32(3, self.KIEKJEFFPHK)?;
        }
        if let Some(v) = self.MJDOGPBOJIP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_repeated_packed_uint32(8, &self.EIDLLEOLFGM)?;
        if self.BLHGBEDNFIB != 0 {
            os.write_uint32(4, self.BLHGBEDNFIB)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClockParkGetOngoingScriptInfoScRsp {
        ClockParkGetOngoingScriptInfoScRsp::new()
    }

    fn clear(&mut self) {
        self.CHOBAOGMLFN = 0;
        self.CMGKEOLCBIP.clear();
        self.OBPFBLNBFKI = 0;
        self.AIGEHHNHKPM = 0;
        self.CLKEOEHPLNG = 0;
        self.IENPHEFANGL.clear();
        self.LGOPNBHHHBG.clear();
        self.retcode = 0;
        self.KIEKJEFFPHK = 0;
        self.MJDOGPBOJIP.clear();
        self.EIDLLEOLFGM.clear();
        self.BLHGBEDNFIB = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClockParkGetOngoingScriptInfoScRsp {
        static instance: ClockParkGetOngoingScriptInfoScRsp = ClockParkGetOngoingScriptInfoScRsp {
            CHOBAOGMLFN: 0,
            CMGKEOLCBIP: ::std::string::String::new(),
            OBPFBLNBFKI: 0,
            AIGEHHNHKPM: 0,
            CLKEOEHPLNG: 0,
            IENPHEFANGL: ::protobuf::MessageField::none(),
            LGOPNBHHHBG: ::protobuf::MessageField::none(),
            retcode: 0,
            KIEKJEFFPHK: 0,
            MJDOGPBOJIP: ::protobuf::MessageField::none(),
            EIDLLEOLFGM: ::std::vec::Vec::new(),
            BLHGBEDNFIB: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClockParkGetOngoingScriptInfoScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClockParkGetOngoingScriptInfoScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClockParkGetOngoingScriptInfoScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClockParkGetOngoingScriptInfoScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ClockParkGetOngoingScriptInfoScRsp.proto\x1a\x11BMLOFPCNGKN.proto\x1a\
    \x11ECMILHCKOMO.proto\x1a\x11LKBBKOJDDPD.proto\"\xde\x03\n\"ClockParkGet\
    OngoingScriptInfoScRsp\x12\x20\n\x0bCHOBAOGMLFN\x18\x06\x20\x01(\rR\x0bC\
    HOBAOGMLFN\x12\x20\n\x0bCMGKEOLCBIP\x18\n\x20\x01(\tR\x0bCMGKEOLCBIP\x12\
    \x20\n\x0bOBPFBLNBFKI\x18\t\x20\x01(\rR\x0bOBPFBLNBFKI\x12\x20\n\x0bAIGE\
    HHNHKPM\x18\x0c\x20\x01(\rR\x0bAIGEHHNHKPM\x12\x20\n\x0bCLKEOEHPLNG\x18\
    \x0e\x20\x01(\rR\x0bCLKEOEHPLNG\x12.\n\x0bIENPHEFANGL\x18\x0b\x20\x01(\
    \x0b2\x0c.LKBBKOJDDPDR\x0bIENPHEFANGL\x12.\n\x0bLGOPNBHHHBG\x18\x01\x20\
    \x01(\x0b2\x0c.ECMILHCKOMOR\x0bLGOPNBHHHBG\x12\x18\n\x07retcode\x18\x02\
    \x20\x01(\rR\x07retcode\x12\x20\n\x0bKIEKJEFFPHK\x18\x03\x20\x01(\rR\x0b\
    KIEKJEFFPHK\x12.\n\x0bMJDOGPBOJIP\x18\x07\x20\x01(\x0b2\x0c.BMLOFPCNGKNR\
    \x0bMJDOGPBOJIP\x12\x20\n\x0bEIDLLEOLFGM\x18\x08\x20\x03(\rR\x0bEIDLLEOL\
    FGM\x12\x20\n\x0bBLHGBEDNFIB\x18\x04\x20\x01(\rR\x0bBLHGBEDNFIBb\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::BMLOFPCNGKN::file_descriptor().clone());
            deps.push(super::ECMILHCKOMO::file_descriptor().clone());
            deps.push(super::LKBBKOJDDPD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClockParkGetOngoingScriptInfoScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
