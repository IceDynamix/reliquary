// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CHGGGEGAMDI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:CHGGGEGAMDI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CHGGGEGAMDI {
    // message fields
    // @@protoc_insertion_point(field:CHGGGEGAMDI.JDBMBIKPBJB)
    pub JDBMBIKPBJB: ::protobuf::MessageField<super::LHAEABOJGOP::LHAEABOJGOP>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.GMOPEKCOLBE)
    pub GMOPEKCOLBE: ::std::vec::Vec<super::CJPKPJFJKDG::CJPKPJFJKDG>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.HNDBKKLOMLC)
    pub HNDBKKLOMLC: ::protobuf::MessageField<super::NDNKBAGGDHD::NDNKBAGGDHD>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.EHOBBJMEDEE)
    pub EHOBBJMEDEE: ::protobuf::MessageField<super::BOICEKFMCIC::BOICEKFMCIC>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.LKCEFCLJCBM)
    pub LKCEFCLJCBM: ::protobuf::MessageField<super::KCLCHJMNPGL::KCLCHJMNPGL>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.DIMGDINCCJI)
    pub DIMGDINCCJI: ::std::vec::Vec<super::JIGDNFDNOJD::JIGDNFDNOJD>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.JIDJEAMDKDE)
    pub JIDJEAMDKDE: ::std::vec::Vec<super::OLKFPHPBPDL::OLKFPHPBPDL>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.LLAOOGCHHDK)
    pub LLAOOGCHHDK: ::protobuf::MessageField<super::GIGPOFFBIEO::GIGPOFFBIEO>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.IAKCMPLPOEE)
    pub IAKCMPLPOEE: ::protobuf::MessageField<super::KGDOFADNDAJ::KGDOFADNDAJ>,
    // @@protoc_insertion_point(field:CHGGGEGAMDI.FEJGMNNFFLG)
    pub FEJGMNNFFLG: ::protobuf::MessageField<super::PMBNJOONHPA::PMBNJOONHPA>,
    // special fields
    // @@protoc_insertion_point(special_field:CHGGGEGAMDI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CHGGGEGAMDI {
    fn default() -> &'a CHGGGEGAMDI {
        <CHGGGEGAMDI as ::protobuf::Message>::default_instance()
    }
}

impl CHGGGEGAMDI {
    pub fn new() -> CHGGGEGAMDI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LHAEABOJGOP::LHAEABOJGOP>(
            "JDBMBIKPBJB",
            |m: &CHGGGEGAMDI| { &m.JDBMBIKPBJB },
            |m: &mut CHGGGEGAMDI| { &mut m.JDBMBIKPBJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GMOPEKCOLBE",
            |m: &CHGGGEGAMDI| { &m.GMOPEKCOLBE },
            |m: &mut CHGGGEGAMDI| { &mut m.GMOPEKCOLBE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::NDNKBAGGDHD::NDNKBAGGDHD>(
            "HNDBKKLOMLC",
            |m: &CHGGGEGAMDI| { &m.HNDBKKLOMLC },
            |m: &mut CHGGGEGAMDI| { &mut m.HNDBKKLOMLC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BOICEKFMCIC::BOICEKFMCIC>(
            "EHOBBJMEDEE",
            |m: &CHGGGEGAMDI| { &m.EHOBBJMEDEE },
            |m: &mut CHGGGEGAMDI| { &mut m.EHOBBJMEDEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KCLCHJMNPGL::KCLCHJMNPGL>(
            "LKCEFCLJCBM",
            |m: &CHGGGEGAMDI| { &m.LKCEFCLJCBM },
            |m: &mut CHGGGEGAMDI| { &mut m.LKCEFCLJCBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DIMGDINCCJI",
            |m: &CHGGGEGAMDI| { &m.DIMGDINCCJI },
            |m: &mut CHGGGEGAMDI| { &mut m.DIMGDINCCJI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JIDJEAMDKDE",
            |m: &CHGGGEGAMDI| { &m.JIDJEAMDKDE },
            |m: &mut CHGGGEGAMDI| { &mut m.JIDJEAMDKDE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GIGPOFFBIEO::GIGPOFFBIEO>(
            "LLAOOGCHHDK",
            |m: &CHGGGEGAMDI| { &m.LLAOOGCHHDK },
            |m: &mut CHGGGEGAMDI| { &mut m.LLAOOGCHHDK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KGDOFADNDAJ::KGDOFADNDAJ>(
            "IAKCMPLPOEE",
            |m: &CHGGGEGAMDI| { &m.IAKCMPLPOEE },
            |m: &mut CHGGGEGAMDI| { &mut m.IAKCMPLPOEE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PMBNJOONHPA::PMBNJOONHPA>(
            "FEJGMNNFFLG",
            |m: &CHGGGEGAMDI| { &m.FEJGMNNFFLG },
            |m: &mut CHGGGEGAMDI| { &mut m.FEJGMNNFFLG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CHGGGEGAMDI>(
            "CHGGGEGAMDI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CHGGGEGAMDI {
    const NAME: &'static str = "CHGGGEGAMDI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.JDBMBIKPBJB)?;
                },
                50 => {
                    self.GMOPEKCOLBE.push(is.read_message()?);
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.HNDBKKLOMLC)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EHOBBJMEDEE)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LKCEFCLJCBM)?;
                },
                42 => {
                    self.DIMGDINCCJI.push(is.read_message()?);
                },
                34 => {
                    self.JIDJEAMDKDE.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LLAOOGCHHDK)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IAKCMPLPOEE)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FEJGMNNFFLG)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.JDBMBIKPBJB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.GMOPEKCOLBE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.HNDBKKLOMLC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EHOBBJMEDEE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LKCEFCLJCBM.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.DIMGDINCCJI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.JIDJEAMDKDE {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.LLAOOGCHHDK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IAKCMPLPOEE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FEJGMNNFFLG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.JDBMBIKPBJB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.GMOPEKCOLBE {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.HNDBKKLOMLC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.EHOBBJMEDEE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.LKCEFCLJCBM.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        for v in &self.DIMGDINCCJI {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.JIDJEAMDKDE {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.LLAOOGCHHDK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.IAKCMPLPOEE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.FEJGMNNFFLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CHGGGEGAMDI {
        CHGGGEGAMDI::new()
    }

    fn clear(&mut self) {
        self.JDBMBIKPBJB.clear();
        self.GMOPEKCOLBE.clear();
        self.HNDBKKLOMLC.clear();
        self.EHOBBJMEDEE.clear();
        self.LKCEFCLJCBM.clear();
        self.DIMGDINCCJI.clear();
        self.JIDJEAMDKDE.clear();
        self.LLAOOGCHHDK.clear();
        self.IAKCMPLPOEE.clear();
        self.FEJGMNNFFLG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CHGGGEGAMDI {
        static instance: CHGGGEGAMDI = CHGGGEGAMDI {
            JDBMBIKPBJB: ::protobuf::MessageField::none(),
            GMOPEKCOLBE: ::std::vec::Vec::new(),
            HNDBKKLOMLC: ::protobuf::MessageField::none(),
            EHOBBJMEDEE: ::protobuf::MessageField::none(),
            LKCEFCLJCBM: ::protobuf::MessageField::none(),
            DIMGDINCCJI: ::std::vec::Vec::new(),
            JIDJEAMDKDE: ::std::vec::Vec::new(),
            LLAOOGCHHDK: ::protobuf::MessageField::none(),
            IAKCMPLPOEE: ::protobuf::MessageField::none(),
            FEJGMNNFFLG: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CHGGGEGAMDI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CHGGGEGAMDI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CHGGGEGAMDI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHGGGEGAMDI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CHGGGEGAMDI.proto\x1a\x11BOICEKFMCIC.proto\x1a\x11CJPKPJFJKDG.prot\
    o\x1a\x11GIGPOFFBIEO.proto\x1a\x11JIGDNFDNOJD.proto\x1a\x11KCLCHJMNPGL.p\
    roto\x1a\x11KGDOFADNDAJ.proto\x1a\x11LHAEABOJGOP.proto\x1a\x11NDNKBAGGDH\
    D.proto\x1a\x11OLKFPHPBPDL.proto\x1a\x11PMBNJOONHPA.proto\"\xed\x03\n\
    \x0bCHGGGEGAMDI\x12.\n\x0bJDBMBIKPBJB\x18\t\x20\x01(\x0b2\x0c.LHAEABOJGO\
    PR\x0bJDBMBIKPBJB\x12.\n\x0bGMOPEKCOLBE\x18\x06\x20\x03(\x0b2\x0c.CJPKPJ\
    FJKDGR\x0bGMOPEKCOLBE\x12.\n\x0bHNDBKKLOMLC\x18\r\x20\x01(\x0b2\x0c.NDNK\
    BAGGDHDR\x0bHNDBKKLOMLC\x12.\n\x0bEHOBBJMEDEE\x18\x01\x20\x01(\x0b2\x0c.\
    BOICEKFMCICR\x0bEHOBBJMEDEE\x12.\n\x0bLKCEFCLJCBM\x18\x0b\x20\x01(\x0b2\
    \x0c.KCLCHJMNPGLR\x0bLKCEFCLJCBM\x12.\n\x0bDIMGDINCCJI\x18\x05\x20\x03(\
    \x0b2\x0c.JIGDNFDNOJDR\x0bDIMGDINCCJI\x12.\n\x0bJIDJEAMDKDE\x18\x04\x20\
    \x03(\x0b2\x0c.OLKFPHPBPDLR\x0bJIDJEAMDKDE\x12.\n\x0bLLAOOGCHHDK\x18\x0c\
    \x20\x01(\x0b2\x0c.GIGPOFFBIEOR\x0bLLAOOGCHHDK\x12.\n\x0bIAKCMPLPOEE\x18\
    \x02\x20\x01(\x0b2\x0c.KGDOFADNDAJR\x0bIAKCMPLPOEE\x12.\n\x0bFEJGMNNFFLG\
    \x18\x0f\x20\x01(\x0b2\x0c.PMBNJOONHPAR\x0bFEJGMNNFFLGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::BOICEKFMCIC::file_descriptor().clone());
            deps.push(super::CJPKPJFJKDG::file_descriptor().clone());
            deps.push(super::GIGPOFFBIEO::file_descriptor().clone());
            deps.push(super::JIGDNFDNOJD::file_descriptor().clone());
            deps.push(super::KCLCHJMNPGL::file_descriptor().clone());
            deps.push(super::KGDOFADNDAJ::file_descriptor().clone());
            deps.push(super::LHAEABOJGOP::file_descriptor().clone());
            deps.push(super::NDNKBAGGDHD::file_descriptor().clone());
            deps.push(super::OLKFPHPBPDL::file_descriptor().clone());
            deps.push(super::PMBNJOONHPA::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CHGGGEGAMDI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
