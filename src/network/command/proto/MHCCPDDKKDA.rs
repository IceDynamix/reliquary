// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MHCCPDDKKDA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:MHCCPDDKKDA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MHCCPDDKKDA {
    // message oneof groups
    pub PNECCABBLHB: ::std::option::Option<mhccpddkkda::PNECCABBLHB>,
    // special fields
    // @@protoc_insertion_point(special_field:MHCCPDDKKDA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MHCCPDDKKDA {
    fn default() -> &'a MHCCPDDKKDA {
        <MHCCPDDKKDA as ::protobuf::Message>::default_instance()
    }
}

impl MHCCPDDKKDA {
    pub fn new() -> MHCCPDDKKDA {
        ::std::default::Default::default()
    }

    // .GLPEEIJALGF CGGNFJCBBKM = 8;

    pub fn CGGNFJCBBKM(&self) -> &super::GLPEEIJALGF::GLPEEIJALGF {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(ref v)) => v,
            _ => <super::GLPEEIJALGF::GLPEEIJALGF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGGNFJCBBKM(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_CGGNFJCBBKM(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGGNFJCBBKM(&mut self, v: super::GLPEEIJALGF::GLPEEIJALGF) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGGNFJCBBKM(&mut self) -> &mut super::GLPEEIJALGF::GLPEEIJALGF {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(super::GLPEEIJALGF::GLPEEIJALGF::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGGNFJCBBKM(&mut self) -> super::GLPEEIJALGF::GLPEEIJALGF {
        if self.has_CGGNFJCBBKM() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GLPEEIJALGF::GLPEEIJALGF::new()
        }
    }

    // .JCIJCAFJJKN PICLEGGGNCF = 13;

    pub fn PICLEGGGNCF(&self) -> &super::JCIJCAFJJKN::JCIJCAFJJKN {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(ref v)) => v,
            _ => <super::JCIJCAFJJKN::JCIJCAFJJKN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PICLEGGGNCF(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_PICLEGGGNCF(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PICLEGGGNCF(&mut self, v: super::JCIJCAFJJKN::JCIJCAFJJKN) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PICLEGGGNCF(&mut self) -> &mut super::JCIJCAFJJKN::JCIJCAFJJKN {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(super::JCIJCAFJJKN::JCIJCAFJJKN::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PICLEGGGNCF(&mut self) -> super::JCIJCAFJJKN::JCIJCAFJJKN {
        if self.has_PICLEGGGNCF() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JCIJCAFJJKN::JCIJCAFJJKN::new()
        }
    }

    // .AJMIBFECFLJ EAPMICBGOIO = 4;

    pub fn EAPMICBGOIO(&self) -> &super::AJMIBFECFLJ::AJMIBFECFLJ {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(ref v)) => v,
            _ => <super::AJMIBFECFLJ::AJMIBFECFLJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EAPMICBGOIO(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_EAPMICBGOIO(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EAPMICBGOIO(&mut self, v: super::AJMIBFECFLJ::AJMIBFECFLJ) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EAPMICBGOIO(&mut self) -> &mut super::AJMIBFECFLJ::AJMIBFECFLJ {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(super::AJMIBFECFLJ::AJMIBFECFLJ::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EAPMICBGOIO(&mut self) -> super::AJMIBFECFLJ::AJMIBFECFLJ {
        if self.has_EAPMICBGOIO() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AJMIBFECFLJ::AJMIBFECFLJ::new()
        }
    }

    // .LPILGJEPAGJ NNCHMGDGDFI = 15;

    pub fn NNCHMGDGDFI(&self) -> &super::LPILGJEPAGJ::LPILGJEPAGJ {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(ref v)) => v,
            _ => <super::LPILGJEPAGJ::LPILGJEPAGJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NNCHMGDGDFI(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_NNCHMGDGDFI(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NNCHMGDGDFI(&mut self, v: super::LPILGJEPAGJ::LPILGJEPAGJ) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NNCHMGDGDFI(&mut self) -> &mut super::LPILGJEPAGJ::LPILGJEPAGJ {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(super::LPILGJEPAGJ::LPILGJEPAGJ::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NNCHMGDGDFI(&mut self) -> super::LPILGJEPAGJ::LPILGJEPAGJ {
        if self.has_NNCHMGDGDFI() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LPILGJEPAGJ::LPILGJEPAGJ::new()
        }
    }

    // .IGILOGOHEJP NDKHOGEMKJA = 2;

    pub fn NDKHOGEMKJA(&self) -> &super::IGILOGOHEJP::IGILOGOHEJP {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(ref v)) => v,
            _ => <super::IGILOGOHEJP::IGILOGOHEJP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDKHOGEMKJA(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_NDKHOGEMKJA(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDKHOGEMKJA(&mut self, v: super::IGILOGOHEJP::IGILOGOHEJP) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDKHOGEMKJA(&mut self) -> &mut super::IGILOGOHEJP::IGILOGOHEJP {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(super::IGILOGOHEJP::IGILOGOHEJP::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDKHOGEMKJA(&mut self) -> super::IGILOGOHEJP::IGILOGOHEJP {
        if self.has_NDKHOGEMKJA() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IGILOGOHEJP::IGILOGOHEJP::new()
        }
    }

    // .KHCBGNLNPEL JLFDDMEKLJK = 14;

    pub fn JLFDDMEKLJK(&self) -> &super::KHCBGNLNPEL::KHCBGNLNPEL {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(ref v)) => v,
            _ => <super::KHCBGNLNPEL::KHCBGNLNPEL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JLFDDMEKLJK(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_JLFDDMEKLJK(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JLFDDMEKLJK(&mut self, v: super::KHCBGNLNPEL::KHCBGNLNPEL) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JLFDDMEKLJK(&mut self) -> &mut super::KHCBGNLNPEL::KHCBGNLNPEL {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(super::KHCBGNLNPEL::KHCBGNLNPEL::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JLFDDMEKLJK(&mut self) -> super::KHCBGNLNPEL::KHCBGNLNPEL {
        if self.has_JLFDDMEKLJK() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHCBGNLNPEL::KHCBGNLNPEL::new()
        }
    }

    // .KMHIBNGAFEO LCBECPOOGCL = 5;

    pub fn LCBECPOOGCL(&self) -> &super::KMHIBNGAFEO::KMHIBNGAFEO {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(ref v)) => v,
            _ => <super::KMHIBNGAFEO::KMHIBNGAFEO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LCBECPOOGCL(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_LCBECPOOGCL(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LCBECPOOGCL(&mut self, v: super::KMHIBNGAFEO::KMHIBNGAFEO) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LCBECPOOGCL(&mut self) -> &mut super::KMHIBNGAFEO::KMHIBNGAFEO {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(super::KMHIBNGAFEO::KMHIBNGAFEO::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LCBECPOOGCL(&mut self) -> super::KMHIBNGAFEO::KMHIBNGAFEO {
        if self.has_LCBECPOOGCL() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KMHIBNGAFEO::KMHIBNGAFEO::new()
        }
    }

    // .DMKPFGEBILH CEAJNLIOFHF = 9;

    pub fn CEAJNLIOFHF(&self) -> &super::DMKPFGEBILH::DMKPFGEBILH {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(ref v)) => v,
            _ => <super::DMKPFGEBILH::DMKPFGEBILH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CEAJNLIOFHF(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_CEAJNLIOFHF(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CEAJNLIOFHF(&mut self, v: super::DMKPFGEBILH::DMKPFGEBILH) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CEAJNLIOFHF(&mut self) -> &mut super::DMKPFGEBILH::DMKPFGEBILH {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(super::DMKPFGEBILH::DMKPFGEBILH::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CEAJNLIOFHF(&mut self) -> super::DMKPFGEBILH::DMKPFGEBILH {
        if self.has_CEAJNLIOFHF() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DMKPFGEBILH::DMKPFGEBILH::new()
        }
    }

    // .LFGGPNGKBCH PGPAAPOPDOC = 10;

    pub fn PGPAAPOPDOC(&self) -> &super::LFGGPNGKBCH::LFGGPNGKBCH {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(ref v)) => v,
            _ => <super::LFGGPNGKBCH::LFGGPNGKBCH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PGPAAPOPDOC(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_PGPAAPOPDOC(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PGPAAPOPDOC(&mut self, v: super::LFGGPNGKBCH::LFGGPNGKBCH) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PGPAAPOPDOC(&mut self) -> &mut super::LFGGPNGKBCH::LFGGPNGKBCH {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(super::LFGGPNGKBCH::LFGGPNGKBCH::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PGPAAPOPDOC(&mut self) -> super::LFGGPNGKBCH::LFGGPNGKBCH {
        if self.has_PGPAAPOPDOC() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LFGGPNGKBCH::LFGGPNGKBCH::new()
        }
    }

    // .DHMFCIDJBFD PMKEHGBPCNG = 11;

    pub fn PMKEHGBPCNG(&self) -> &super::DHMFCIDJBFD::DHMFCIDJBFD {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(ref v)) => v,
            _ => <super::DHMFCIDJBFD::DHMFCIDJBFD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMKEHGBPCNG(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
    }

    pub fn has_PMKEHGBPCNG(&self) -> bool {
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMKEHGBPCNG(&mut self, v: super::DHMFCIDJBFD::DHMFCIDJBFD) {
        self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMKEHGBPCNG(&mut self) -> &mut super::DHMFCIDJBFD::DHMFCIDJBFD {
        if let ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(_)) = self.PNECCABBLHB {
        } else {
            self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(super::DHMFCIDJBFD::DHMFCIDJBFD::new()));
        }
        match self.PNECCABBLHB {
            ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMKEHGBPCNG(&mut self) -> super::DHMFCIDJBFD::DHMFCIDJBFD {
        if self.has_PMKEHGBPCNG() {
            match self.PNECCABBLHB.take() {
                ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DHMFCIDJBFD::DHMFCIDJBFD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GLPEEIJALGF::GLPEEIJALGF>(
            "CGGNFJCBBKM",
            MHCCPDDKKDA::has_CGGNFJCBBKM,
            MHCCPDDKKDA::CGGNFJCBBKM,
            MHCCPDDKKDA::mut_CGGNFJCBBKM,
            MHCCPDDKKDA::set_CGGNFJCBBKM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JCIJCAFJJKN::JCIJCAFJJKN>(
            "PICLEGGGNCF",
            MHCCPDDKKDA::has_PICLEGGGNCF,
            MHCCPDDKKDA::PICLEGGGNCF,
            MHCCPDDKKDA::mut_PICLEGGGNCF,
            MHCCPDDKKDA::set_PICLEGGGNCF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AJMIBFECFLJ::AJMIBFECFLJ>(
            "EAPMICBGOIO",
            MHCCPDDKKDA::has_EAPMICBGOIO,
            MHCCPDDKKDA::EAPMICBGOIO,
            MHCCPDDKKDA::mut_EAPMICBGOIO,
            MHCCPDDKKDA::set_EAPMICBGOIO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LPILGJEPAGJ::LPILGJEPAGJ>(
            "NNCHMGDGDFI",
            MHCCPDDKKDA::has_NNCHMGDGDFI,
            MHCCPDDKKDA::NNCHMGDGDFI,
            MHCCPDDKKDA::mut_NNCHMGDGDFI,
            MHCCPDDKKDA::set_NNCHMGDGDFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IGILOGOHEJP::IGILOGOHEJP>(
            "NDKHOGEMKJA",
            MHCCPDDKKDA::has_NDKHOGEMKJA,
            MHCCPDDKKDA::NDKHOGEMKJA,
            MHCCPDDKKDA::mut_NDKHOGEMKJA,
            MHCCPDDKKDA::set_NDKHOGEMKJA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHCBGNLNPEL::KHCBGNLNPEL>(
            "JLFDDMEKLJK",
            MHCCPDDKKDA::has_JLFDDMEKLJK,
            MHCCPDDKKDA::JLFDDMEKLJK,
            MHCCPDDKKDA::mut_JLFDDMEKLJK,
            MHCCPDDKKDA::set_JLFDDMEKLJK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KMHIBNGAFEO::KMHIBNGAFEO>(
            "LCBECPOOGCL",
            MHCCPDDKKDA::has_LCBECPOOGCL,
            MHCCPDDKKDA::LCBECPOOGCL,
            MHCCPDDKKDA::mut_LCBECPOOGCL,
            MHCCPDDKKDA::set_LCBECPOOGCL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DMKPFGEBILH::DMKPFGEBILH>(
            "CEAJNLIOFHF",
            MHCCPDDKKDA::has_CEAJNLIOFHF,
            MHCCPDDKKDA::CEAJNLIOFHF,
            MHCCPDDKKDA::mut_CEAJNLIOFHF,
            MHCCPDDKKDA::set_CEAJNLIOFHF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LFGGPNGKBCH::LFGGPNGKBCH>(
            "PGPAAPOPDOC",
            MHCCPDDKKDA::has_PGPAAPOPDOC,
            MHCCPDDKKDA::PGPAAPOPDOC,
            MHCCPDDKKDA::mut_PGPAAPOPDOC,
            MHCCPDDKKDA::set_PGPAAPOPDOC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DHMFCIDJBFD::DHMFCIDJBFD>(
            "PMKEHGBPCNG",
            MHCCPDDKKDA::has_PMKEHGBPCNG,
            MHCCPDDKKDA::PMKEHGBPCNG,
            MHCCPDDKKDA::mut_PMKEHGBPCNG,
            MHCCPDDKKDA::set_PMKEHGBPCNG,
        ));
        oneofs.push(mhccpddkkda::PNECCABBLHB::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MHCCPDDKKDA>(
            "MHCCPDDKKDA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MHCCPDDKKDA {
    const NAME: &'static str = "MHCCPDDKKDA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(is.read_message()?));
                },
                106 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(is.read_message()?));
                },
                34 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(is.read_message()?));
                },
                122 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(is.read_message()?));
                },
                18 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(is.read_message()?));
                },
                114 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(is.read_message()?));
                },
                42 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(is.read_message()?));
                },
                74 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(is.read_message()?));
                },
                82 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(is.read_message()?));
                },
                90 => {
                    self.PNECCABBLHB = ::std::option::Option::Some(mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.PNECCABBLHB {
            match v {
                &mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.PNECCABBLHB {
            match v {
                &mhccpddkkda::PNECCABBLHB::CGGNFJCBBKM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::PICLEGGGNCF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::EAPMICBGOIO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::NNCHMGDGDFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::NDKHOGEMKJA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::JLFDDMEKLJK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::LCBECPOOGCL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::CEAJNLIOFHF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::PGPAAPOPDOC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &mhccpddkkda::PNECCABBLHB::PMKEHGBPCNG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MHCCPDDKKDA {
        MHCCPDDKKDA::new()
    }

    fn clear(&mut self) {
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.PNECCABBLHB = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MHCCPDDKKDA {
        static instance: MHCCPDDKKDA = MHCCPDDKKDA {
            PNECCABBLHB: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MHCCPDDKKDA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MHCCPDDKKDA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MHCCPDDKKDA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MHCCPDDKKDA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MHCCPDDKKDA`
pub mod mhccpddkkda {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:MHCCPDDKKDA.PNECCABBLHB)
    pub enum PNECCABBLHB {
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.CGGNFJCBBKM)
        CGGNFJCBBKM(super::super::GLPEEIJALGF::GLPEEIJALGF),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.PICLEGGGNCF)
        PICLEGGGNCF(super::super::JCIJCAFJJKN::JCIJCAFJJKN),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.EAPMICBGOIO)
        EAPMICBGOIO(super::super::AJMIBFECFLJ::AJMIBFECFLJ),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.NNCHMGDGDFI)
        NNCHMGDGDFI(super::super::LPILGJEPAGJ::LPILGJEPAGJ),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.NDKHOGEMKJA)
        NDKHOGEMKJA(super::super::IGILOGOHEJP::IGILOGOHEJP),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.JLFDDMEKLJK)
        JLFDDMEKLJK(super::super::KHCBGNLNPEL::KHCBGNLNPEL),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.LCBECPOOGCL)
        LCBECPOOGCL(super::super::KMHIBNGAFEO::KMHIBNGAFEO),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.CEAJNLIOFHF)
        CEAJNLIOFHF(super::super::DMKPFGEBILH::DMKPFGEBILH),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.PGPAAPOPDOC)
        PGPAAPOPDOC(super::super::LFGGPNGKBCH::LFGGPNGKBCH),
        // @@protoc_insertion_point(oneof_field:MHCCPDDKKDA.PMKEHGBPCNG)
        PMKEHGBPCNG(super::super::DHMFCIDJBFD::DHMFCIDJBFD),
    }

    impl ::protobuf::Oneof for PNECCABBLHB {
    }

    impl ::protobuf::OneofFull for PNECCABBLHB {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MHCCPDDKKDA as ::protobuf::MessageFull>::descriptor().oneof_by_name("PNECCABBLHB").unwrap()).clone()
        }
    }

    impl PNECCABBLHB {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PNECCABBLHB>("PNECCABBLHB")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11MHCCPDDKKDA.proto\x1a\x11AJMIBFECFLJ.proto\x1a\x11DHMFCIDJBFD.prot\
    o\x1a\x11DMKPFGEBILH.proto\x1a\x11GLPEEIJALGF.proto\x1a\x11IGILOGOHEJP.p\
    roto\x1a\x11JCIJCAFJJKN.proto\x1a\x11KHCBGNLNPEL.proto\x1a\x11KMHIBNGAFE\
    O.proto\x1a\x11LFGGPNGKBCH.proto\x1a\x11LPILGJEPAGJ.proto\"\x90\x04\n\
    \x0bMHCCPDDKKDA\x120\n\x0bCGGNFJCBBKM\x18\x08\x20\x01(\x0b2\x0c.GLPEEIJA\
    LGFH\0R\x0bCGGNFJCBBKM\x120\n\x0bPICLEGGGNCF\x18\r\x20\x01(\x0b2\x0c.JCI\
    JCAFJJKNH\0R\x0bPICLEGGGNCF\x120\n\x0bEAPMICBGOIO\x18\x04\x20\x01(\x0b2\
    \x0c.AJMIBFECFLJH\0R\x0bEAPMICBGOIO\x120\n\x0bNNCHMGDGDFI\x18\x0f\x20\
    \x01(\x0b2\x0c.LPILGJEPAGJH\0R\x0bNNCHMGDGDFI\x120\n\x0bNDKHOGEMKJA\x18\
    \x02\x20\x01(\x0b2\x0c.IGILOGOHEJPH\0R\x0bNDKHOGEMKJA\x120\n\x0bJLFDDMEK\
    LJK\x18\x0e\x20\x01(\x0b2\x0c.KHCBGNLNPELH\0R\x0bJLFDDMEKLJK\x120\n\x0bL\
    CBECPOOGCL\x18\x05\x20\x01(\x0b2\x0c.KMHIBNGAFEOH\0R\x0bLCBECPOOGCL\x120\
    \n\x0bCEAJNLIOFHF\x18\t\x20\x01(\x0b2\x0c.DMKPFGEBILHH\0R\x0bCEAJNLIOFHF\
    \x120\n\x0bPGPAAPOPDOC\x18\n\x20\x01(\x0b2\x0c.LFGGPNGKBCHH\0R\x0bPGPAAP\
    OPDOC\x120\n\x0bPMKEHGBPCNG\x18\x0b\x20\x01(\x0b2\x0c.DHMFCIDJBFDH\0R\
    \x0bPMKEHGBPCNGB\r\n\x0bPNECCABBLHBb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::AJMIBFECFLJ::file_descriptor().clone());
            deps.push(super::DHMFCIDJBFD::file_descriptor().clone());
            deps.push(super::DMKPFGEBILH::file_descriptor().clone());
            deps.push(super::GLPEEIJALGF::file_descriptor().clone());
            deps.push(super::IGILOGOHEJP::file_descriptor().clone());
            deps.push(super::JCIJCAFJJKN::file_descriptor().clone());
            deps.push(super::KHCBGNLNPEL::file_descriptor().clone());
            deps.push(super::KMHIBNGAFEO::file_descriptor().clone());
            deps.push(super::LFGGPNGKBCH::file_descriptor().clone());
            deps.push(super::LPILGJEPAGJ::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MHCCPDDKKDA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
