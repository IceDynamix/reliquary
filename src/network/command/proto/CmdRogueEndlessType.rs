// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdRogueEndlessType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdRogueEndlessType)
pub enum CmdRogueEndlessType {
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdRogueEndlessNone)
    CmdRogueEndlessNone = 0,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdTakeRogueEndlessActivityPointRewardScRsp)
    CmdTakeRogueEndlessActivityPointRewardScRsp = 6003,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdTakeRogueEndlessActivityAllBonusRewardCsReq)
    CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6002,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdEnterRogueEndlessActivityStageCsReq)
    CmdEnterRogueEndlessActivityStageCsReq = 6001,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdRogueEndlessActivityBattleEndScNotify)
    CmdRogueEndlessActivityBattleEndScNotify = 6005,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdGetRogueEndlessActivityDataCsReq)
    CmdGetRogueEndlessActivityDataCsReq = 6009,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdTakeRogueEndlessActivityAllBonusRewardScRsp)
    CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6010,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdEnterRogueEndlessActivityStageScRsp)
    CmdEnterRogueEndlessActivityStageScRsp = 6006,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdGetRogueEndlessActivityDataScRsp)
    CmdGetRogueEndlessActivityDataScRsp = 6008,
    // @@protoc_insertion_point(enum_value:CmdRogueEndlessType.CmdTakeRogueEndlessActivityPointRewardCsReq)
    CmdTakeRogueEndlessActivityPointRewardCsReq = 6007,
}

impl ::protobuf::Enum for CmdRogueEndlessType {
    const NAME: &'static str = "CmdRogueEndlessType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdRogueEndlessType> {
        match value {
            0 => ::std::option::Option::Some(CmdRogueEndlessType::CmdRogueEndlessNone),
            6003 => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardScRsp),
            6002 => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardCsReq),
            6001 => ::std::option::Option::Some(CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageCsReq),
            6005 => ::std::option::Option::Some(CmdRogueEndlessType::CmdRogueEndlessActivityBattleEndScNotify),
            6009 => ::std::option::Option::Some(CmdRogueEndlessType::CmdGetRogueEndlessActivityDataCsReq),
            6010 => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardScRsp),
            6006 => ::std::option::Option::Some(CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageScRsp),
            6008 => ::std::option::Option::Some(CmdRogueEndlessType::CmdGetRogueEndlessActivityDataScRsp),
            6007 => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardCsReq),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdRogueEndlessType> {
        match str {
            "CmdRogueEndlessNone" => ::std::option::Option::Some(CmdRogueEndlessType::CmdRogueEndlessNone),
            "CmdTakeRogueEndlessActivityPointRewardScRsp" => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardScRsp),
            "CmdTakeRogueEndlessActivityAllBonusRewardCsReq" => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardCsReq),
            "CmdEnterRogueEndlessActivityStageCsReq" => ::std::option::Option::Some(CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageCsReq),
            "CmdRogueEndlessActivityBattleEndScNotify" => ::std::option::Option::Some(CmdRogueEndlessType::CmdRogueEndlessActivityBattleEndScNotify),
            "CmdGetRogueEndlessActivityDataCsReq" => ::std::option::Option::Some(CmdRogueEndlessType::CmdGetRogueEndlessActivityDataCsReq),
            "CmdTakeRogueEndlessActivityAllBonusRewardScRsp" => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardScRsp),
            "CmdEnterRogueEndlessActivityStageScRsp" => ::std::option::Option::Some(CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageScRsp),
            "CmdGetRogueEndlessActivityDataScRsp" => ::std::option::Option::Some(CmdRogueEndlessType::CmdGetRogueEndlessActivityDataScRsp),
            "CmdTakeRogueEndlessActivityPointRewardCsReq" => ::std::option::Option::Some(CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardCsReq),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdRogueEndlessType] = &[
        CmdRogueEndlessType::CmdRogueEndlessNone,
        CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardScRsp,
        CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardCsReq,
        CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageCsReq,
        CmdRogueEndlessType::CmdRogueEndlessActivityBattleEndScNotify,
        CmdRogueEndlessType::CmdGetRogueEndlessActivityDataCsReq,
        CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardScRsp,
        CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageScRsp,
        CmdRogueEndlessType::CmdGetRogueEndlessActivityDataScRsp,
        CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardCsReq,
    ];
}

impl ::protobuf::EnumFull for CmdRogueEndlessType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdRogueEndlessType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdRogueEndlessType::CmdRogueEndlessNone => 0,
            CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardScRsp => 1,
            CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardCsReq => 2,
            CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageCsReq => 3,
            CmdRogueEndlessType::CmdRogueEndlessActivityBattleEndScNotify => 4,
            CmdRogueEndlessType::CmdGetRogueEndlessActivityDataCsReq => 5,
            CmdRogueEndlessType::CmdTakeRogueEndlessActivityAllBonusRewardScRsp => 6,
            CmdRogueEndlessType::CmdEnterRogueEndlessActivityStageScRsp => 7,
            CmdRogueEndlessType::CmdGetRogueEndlessActivityDataScRsp => 8,
            CmdRogueEndlessType::CmdTakeRogueEndlessActivityPointRewardCsReq => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdRogueEndlessType {
    fn default() -> Self {
        CmdRogueEndlessType::CmdRogueEndlessNone
    }
}

impl CmdRogueEndlessType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdRogueEndlessType>("CmdRogueEndlessType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19CmdRogueEndlessType.proto*\xd9\x03\n\x13CmdRogueEndlessType\x12\
    \x17\n\x13CmdRogueEndlessNone\x10\0\x120\n+CmdTakeRogueEndlessActivityPo\
    intRewardScRsp\x10\xf3.\x123\n.CmdTakeRogueEndlessActivityAllBonusReward\
    CsReq\x10\xf2.\x12+\n&CmdEnterRogueEndlessActivityStageCsReq\x10\xf1.\
    \x12-\n(CmdRogueEndlessActivityBattleEndScNotify\x10\xf5.\x12(\n#CmdGetR\
    ogueEndlessActivityDataCsReq\x10\xf9.\x123\n.CmdTakeRogueEndlessActivity\
    AllBonusRewardScRsp\x10\xfa.\x12+\n&CmdEnterRogueEndlessActivityStageScR\
    sp\x10\xf6.\x12(\n#CmdGetRogueEndlessActivityDataScRsp\x10\xf8.\x120\n+C\
    mdTakeRogueEndlessActivityPointRewardCsReq\x10\xf7.b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdRogueEndlessType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
