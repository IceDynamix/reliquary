// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdMuseumType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdMuseumType)
pub enum CmdMuseumType {
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTypeNone)
    CmdMuseumTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTargetRewardNotify)
    CmdMuseumTargetRewardNotify = 4369,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdFinishCurTurnCsReq)
    CmdFinishCurTurnCsReq = 4305,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumRandomEventSelectScRsp)
    CmdMuseumRandomEventSelectScRsp = 4318,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdGetStuffScNotify)
    CmdGetStuffScNotify = 4328,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdRemoveStuffFromAreaScRsp)
    CmdRemoveStuffFromAreaScRsp = 4376,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdSetStuffToAreaCsReq)
    CmdSetStuffToAreaCsReq = 4330,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumRandomEventSelectCsReq)
    CmdMuseumRandomEventSelectCsReq = 4391,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumRandomEventQueryCsReq)
    CmdMuseumRandomEventQueryCsReq = 4312,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumInfoChangedScNotify)
    CmdMuseumInfoChangedScNotify = 4339,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTargetStartNotify)
    CmdMuseumTargetStartNotify = 4350,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdRemoveStuffFromAreaCsReq)
    CmdRemoveStuffFromAreaCsReq = 4397,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTakeCollectRewardScRsp)
    CmdMuseumTakeCollectRewardScRsp = 4392,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdUpgradeAreaCsReq)
    CmdUpgradeAreaCsReq = 4349,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdUpgradeAreaStatScRsp)
    CmdUpgradeAreaStatScRsp = 4380,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdUpgradeAreaStatCsReq)
    CmdUpgradeAreaStatCsReq = 4347,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdFinishCurTurnScRsp)
    CmdFinishCurTurnScRsp = 4314,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumDispatchFinishedScNotify)
    CmdMuseumDispatchFinishedScNotify = 4395,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdBuyNpcStuffCsReq)
    CmdBuyNpcStuffCsReq = 4358,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumFundsChangedScNotify)
    CmdMuseumFundsChangedScNotify = 4396,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdUpgradeAreaScRsp)
    CmdUpgradeAreaScRsp = 4322,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdGetMuseumInfoScRsp)
    CmdGetMuseumInfoScRsp = 4368,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTakeCollectRewardCsReq)
    CmdMuseumTakeCollectRewardCsReq = 4320,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdSetStuffToAreaScRsp)
    CmdSetStuffToAreaScRsp = 4356,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumRandomEventQueryScRsp)
    CmdMuseumRandomEventQueryScRsp = 4317,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumTargetMissionFinishNotify)
    CmdMuseumTargetMissionFinishNotify = 4348,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdBuyNpcStuffScRsp)
    CmdBuyNpcStuffScRsp = 4324,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdGetExhibitScNotify)
    CmdGetExhibitScNotify = 4311,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdGetMuseumInfoCsReq)
    CmdGetMuseumInfoCsReq = 4301,
    // @@protoc_insertion_point(enum_value:CmdMuseumType.CmdMuseumRandomEventStartScNotify)
    CmdMuseumRandomEventStartScNotify = 4323,
}

impl ::protobuf::Enum for CmdMuseumType {
    const NAME: &'static str = "CmdMuseumType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdMuseumType> {
        match value {
            0 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTypeNone),
            4369 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetRewardNotify),
            4305 => ::std::option::Option::Some(CmdMuseumType::CmdFinishCurTurnCsReq),
            4318 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventSelectScRsp),
            4328 => ::std::option::Option::Some(CmdMuseumType::CmdGetStuffScNotify),
            4376 => ::std::option::Option::Some(CmdMuseumType::CmdRemoveStuffFromAreaScRsp),
            4330 => ::std::option::Option::Some(CmdMuseumType::CmdSetStuffToAreaCsReq),
            4391 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventSelectCsReq),
            4312 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventQueryCsReq),
            4339 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumInfoChangedScNotify),
            4350 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetStartNotify),
            4397 => ::std::option::Option::Some(CmdMuseumType::CmdRemoveStuffFromAreaCsReq),
            4392 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTakeCollectRewardScRsp),
            4349 => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaCsReq),
            4380 => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaStatScRsp),
            4347 => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaStatCsReq),
            4314 => ::std::option::Option::Some(CmdMuseumType::CmdFinishCurTurnScRsp),
            4395 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumDispatchFinishedScNotify),
            4358 => ::std::option::Option::Some(CmdMuseumType::CmdBuyNpcStuffCsReq),
            4396 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumFundsChangedScNotify),
            4322 => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaScRsp),
            4368 => ::std::option::Option::Some(CmdMuseumType::CmdGetMuseumInfoScRsp),
            4320 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTakeCollectRewardCsReq),
            4356 => ::std::option::Option::Some(CmdMuseumType::CmdSetStuffToAreaScRsp),
            4317 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventQueryScRsp),
            4348 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetMissionFinishNotify),
            4324 => ::std::option::Option::Some(CmdMuseumType::CmdBuyNpcStuffScRsp),
            4311 => ::std::option::Option::Some(CmdMuseumType::CmdGetExhibitScNotify),
            4301 => ::std::option::Option::Some(CmdMuseumType::CmdGetMuseumInfoCsReq),
            4323 => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventStartScNotify),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdMuseumType> {
        match str {
            "CmdMuseumTypeNone" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTypeNone),
            "CmdMuseumTargetRewardNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetRewardNotify),
            "CmdFinishCurTurnCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdFinishCurTurnCsReq),
            "CmdMuseumRandomEventSelectScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventSelectScRsp),
            "CmdGetStuffScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdGetStuffScNotify),
            "CmdRemoveStuffFromAreaScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdRemoveStuffFromAreaScRsp),
            "CmdSetStuffToAreaCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdSetStuffToAreaCsReq),
            "CmdMuseumRandomEventSelectCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventSelectCsReq),
            "CmdMuseumRandomEventQueryCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventQueryCsReq),
            "CmdMuseumInfoChangedScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumInfoChangedScNotify),
            "CmdMuseumTargetStartNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetStartNotify),
            "CmdRemoveStuffFromAreaCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdRemoveStuffFromAreaCsReq),
            "CmdMuseumTakeCollectRewardScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTakeCollectRewardScRsp),
            "CmdUpgradeAreaCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaCsReq),
            "CmdUpgradeAreaStatScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaStatScRsp),
            "CmdUpgradeAreaStatCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaStatCsReq),
            "CmdFinishCurTurnScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdFinishCurTurnScRsp),
            "CmdMuseumDispatchFinishedScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumDispatchFinishedScNotify),
            "CmdBuyNpcStuffCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdBuyNpcStuffCsReq),
            "CmdMuseumFundsChangedScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumFundsChangedScNotify),
            "CmdUpgradeAreaScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdUpgradeAreaScRsp),
            "CmdGetMuseumInfoScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdGetMuseumInfoScRsp),
            "CmdMuseumTakeCollectRewardCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTakeCollectRewardCsReq),
            "CmdSetStuffToAreaScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdSetStuffToAreaScRsp),
            "CmdMuseumRandomEventQueryScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventQueryScRsp),
            "CmdMuseumTargetMissionFinishNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumTargetMissionFinishNotify),
            "CmdBuyNpcStuffScRsp" => ::std::option::Option::Some(CmdMuseumType::CmdBuyNpcStuffScRsp),
            "CmdGetExhibitScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdGetExhibitScNotify),
            "CmdGetMuseumInfoCsReq" => ::std::option::Option::Some(CmdMuseumType::CmdGetMuseumInfoCsReq),
            "CmdMuseumRandomEventStartScNotify" => ::std::option::Option::Some(CmdMuseumType::CmdMuseumRandomEventStartScNotify),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdMuseumType] = &[
        CmdMuseumType::CmdMuseumTypeNone,
        CmdMuseumType::CmdMuseumTargetRewardNotify,
        CmdMuseumType::CmdFinishCurTurnCsReq,
        CmdMuseumType::CmdMuseumRandomEventSelectScRsp,
        CmdMuseumType::CmdGetStuffScNotify,
        CmdMuseumType::CmdRemoveStuffFromAreaScRsp,
        CmdMuseumType::CmdSetStuffToAreaCsReq,
        CmdMuseumType::CmdMuseumRandomEventSelectCsReq,
        CmdMuseumType::CmdMuseumRandomEventQueryCsReq,
        CmdMuseumType::CmdMuseumInfoChangedScNotify,
        CmdMuseumType::CmdMuseumTargetStartNotify,
        CmdMuseumType::CmdRemoveStuffFromAreaCsReq,
        CmdMuseumType::CmdMuseumTakeCollectRewardScRsp,
        CmdMuseumType::CmdUpgradeAreaCsReq,
        CmdMuseumType::CmdUpgradeAreaStatScRsp,
        CmdMuseumType::CmdUpgradeAreaStatCsReq,
        CmdMuseumType::CmdFinishCurTurnScRsp,
        CmdMuseumType::CmdMuseumDispatchFinishedScNotify,
        CmdMuseumType::CmdBuyNpcStuffCsReq,
        CmdMuseumType::CmdMuseumFundsChangedScNotify,
        CmdMuseumType::CmdUpgradeAreaScRsp,
        CmdMuseumType::CmdGetMuseumInfoScRsp,
        CmdMuseumType::CmdMuseumTakeCollectRewardCsReq,
        CmdMuseumType::CmdSetStuffToAreaScRsp,
        CmdMuseumType::CmdMuseumRandomEventQueryScRsp,
        CmdMuseumType::CmdMuseumTargetMissionFinishNotify,
        CmdMuseumType::CmdBuyNpcStuffScRsp,
        CmdMuseumType::CmdGetExhibitScNotify,
        CmdMuseumType::CmdGetMuseumInfoCsReq,
        CmdMuseumType::CmdMuseumRandomEventStartScNotify,
    ];
}

impl ::protobuf::EnumFull for CmdMuseumType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdMuseumType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdMuseumType::CmdMuseumTypeNone => 0,
            CmdMuseumType::CmdMuseumTargetRewardNotify => 1,
            CmdMuseumType::CmdFinishCurTurnCsReq => 2,
            CmdMuseumType::CmdMuseumRandomEventSelectScRsp => 3,
            CmdMuseumType::CmdGetStuffScNotify => 4,
            CmdMuseumType::CmdRemoveStuffFromAreaScRsp => 5,
            CmdMuseumType::CmdSetStuffToAreaCsReq => 6,
            CmdMuseumType::CmdMuseumRandomEventSelectCsReq => 7,
            CmdMuseumType::CmdMuseumRandomEventQueryCsReq => 8,
            CmdMuseumType::CmdMuseumInfoChangedScNotify => 9,
            CmdMuseumType::CmdMuseumTargetStartNotify => 10,
            CmdMuseumType::CmdRemoveStuffFromAreaCsReq => 11,
            CmdMuseumType::CmdMuseumTakeCollectRewardScRsp => 12,
            CmdMuseumType::CmdUpgradeAreaCsReq => 13,
            CmdMuseumType::CmdUpgradeAreaStatScRsp => 14,
            CmdMuseumType::CmdUpgradeAreaStatCsReq => 15,
            CmdMuseumType::CmdFinishCurTurnScRsp => 16,
            CmdMuseumType::CmdMuseumDispatchFinishedScNotify => 17,
            CmdMuseumType::CmdBuyNpcStuffCsReq => 18,
            CmdMuseumType::CmdMuseumFundsChangedScNotify => 19,
            CmdMuseumType::CmdUpgradeAreaScRsp => 20,
            CmdMuseumType::CmdGetMuseumInfoScRsp => 21,
            CmdMuseumType::CmdMuseumTakeCollectRewardCsReq => 22,
            CmdMuseumType::CmdSetStuffToAreaScRsp => 23,
            CmdMuseumType::CmdMuseumRandomEventQueryScRsp => 24,
            CmdMuseumType::CmdMuseumTargetMissionFinishNotify => 25,
            CmdMuseumType::CmdBuyNpcStuffScRsp => 26,
            CmdMuseumType::CmdGetExhibitScNotify => 27,
            CmdMuseumType::CmdGetMuseumInfoCsReq => 28,
            CmdMuseumType::CmdMuseumRandomEventStartScNotify => 29,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdMuseumType {
    fn default() -> Self {
        CmdMuseumType::CmdMuseumTypeNone
    }
}

impl CmdMuseumType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdMuseumType>("CmdMuseumType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13CmdMuseumType.proto*\xd3\x07\n\rCmdMuseumType\x12\x15\n\x11CmdMuse\
    umTypeNone\x10\0\x12\x20\n\x1bCmdMuseumTargetRewardNotify\x10\x91\"\x12\
    \x1a\n\x15CmdFinishCurTurnCsReq\x10\xd1!\x12$\n\x1fCmdMuseumRandomEventS\
    electScRsp\x10\xde!\x12\x18\n\x13CmdGetStuffScNotify\x10\xe8!\x12\x20\n\
    \x1bCmdRemoveStuffFromAreaScRsp\x10\x98\"\x12\x1b\n\x16CmdSetStuffToArea\
    CsReq\x10\xea!\x12$\n\x1fCmdMuseumRandomEventSelectCsReq\x10\xa7\"\x12#\
    \n\x1eCmdMuseumRandomEventQueryCsReq\x10\xd8!\x12!\n\x1cCmdMuseumInfoCha\
    ngedScNotify\x10\xf3!\x12\x1f\n\x1aCmdMuseumTargetStartNotify\x10\xfe!\
    \x12\x20\n\x1bCmdRemoveStuffFromAreaCsReq\x10\xad\"\x12$\n\x1fCmdMuseumT\
    akeCollectRewardScRsp\x10\xa8\"\x12\x18\n\x13CmdUpgradeAreaCsReq\x10\xfd\
    !\x12\x1c\n\x17CmdUpgradeAreaStatScRsp\x10\x9c\"\x12\x1c\n\x17CmdUpgrade\
    AreaStatCsReq\x10\xfb!\x12\x1a\n\x15CmdFinishCurTurnScRsp\x10\xda!\x12&\
    \n!CmdMuseumDispatchFinishedScNotify\x10\xab\"\x12\x18\n\x13CmdBuyNpcStu\
    ffCsReq\x10\x86\"\x12\"\n\x1dCmdMuseumFundsChangedScNotify\x10\xac\"\x12\
    \x18\n\x13CmdUpgradeAreaScRsp\x10\xe2!\x12\x1a\n\x15CmdGetMuseumInfoScRs\
    p\x10\x90\"\x12$\n\x1fCmdMuseumTakeCollectRewardCsReq\x10\xe0!\x12\x1b\n\
    \x16CmdSetStuffToAreaScRsp\x10\x84\"\x12#\n\x1eCmdMuseumRandomEventQuery\
    ScRsp\x10\xdd!\x12'\n\"CmdMuseumTargetMissionFinishNotify\x10\xfc!\x12\
    \x18\n\x13CmdBuyNpcStuffScRsp\x10\xe4!\x12\x1a\n\x15CmdGetExhibitScNotif\
    y\x10\xd7!\x12\x1a\n\x15CmdGetMuseumInfoCsReq\x10\xcd!\x12&\n!CmdMuseumR\
    andomEventStartScNotify\x10\xe3!b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdMuseumType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
