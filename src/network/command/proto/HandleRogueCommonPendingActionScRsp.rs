// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HandleRogueCommonPendingActionScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:HandleRogueCommonPendingActionScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HandleRogueCommonPendingActionScRsp {
    // message fields
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.IFDKLLHFPJB)
    pub IFDKLLHFPJB: u32,
    // @@protoc_insertion_point(field:HandleRogueCommonPendingActionScRsp.HBAPCCEGNME)
    pub HBAPCCEGNME: u32,
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:HandleRogueCommonPendingActionScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HandleRogueCommonPendingActionScRsp {
    fn default() -> &'a HandleRogueCommonPendingActionScRsp {
        <HandleRogueCommonPendingActionScRsp as ::protobuf::Message>::default_instance()
    }
}

impl HandleRogueCommonPendingActionScRsp {
    pub fn new() -> HandleRogueCommonPendingActionScRsp {
        ::std::default::Default::default()
    }

    // .HCAJJEFEIJD PNADBJEJBOF = 1553;

    pub fn PNADBJEJBOF(&self) -> &super::HCAJJEFEIJD::HCAJJEFEIJD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(ref v)) => v,
            _ => <super::HCAJJEFEIJD::HCAJJEFEIJD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PNADBJEJBOF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PNADBJEJBOF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PNADBJEJBOF(&mut self, v: super::HCAJJEFEIJD::HCAJJEFEIJD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PNADBJEJBOF(&mut self) -> &mut super::HCAJJEFEIJD::HCAJJEFEIJD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(super::HCAJJEFEIJD::HCAJJEFEIJD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PNADBJEJBOF(&mut self) -> super::HCAJJEFEIJD::HCAJJEFEIJD {
        if self.has_PNADBJEJBOF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HCAJJEFEIJD::HCAJJEFEIJD::new()
        }
    }

    // .FKDBIHNPCHE KKIANGABFNJ = 637;

    pub fn KKIANGABFNJ(&self) -> &super::FKDBIHNPCHE::FKDBIHNPCHE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(ref v)) => v,
            _ => <super::FKDBIHNPCHE::FKDBIHNPCHE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KKIANGABFNJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KKIANGABFNJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KKIANGABFNJ(&mut self, v: super::FKDBIHNPCHE::FKDBIHNPCHE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KKIANGABFNJ(&mut self) -> &mut super::FKDBIHNPCHE::FKDBIHNPCHE {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(super::FKDBIHNPCHE::FKDBIHNPCHE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KKIANGABFNJ(&mut self) -> super::FKDBIHNPCHE::FKDBIHNPCHE {
        if self.has_KKIANGABFNJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FKDBIHNPCHE::FKDBIHNPCHE::new()
        }
    }

    // .DLHPDALGDEH CLDBPLNIAEN = 194;

    pub fn CLDBPLNIAEN(&self) -> &super::DLHPDALGDEH::DLHPDALGDEH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(ref v)) => v,
            _ => <super::DLHPDALGDEH::DLHPDALGDEH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CLDBPLNIAEN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CLDBPLNIAEN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CLDBPLNIAEN(&mut self, v: super::DLHPDALGDEH::DLHPDALGDEH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CLDBPLNIAEN(&mut self) -> &mut super::DLHPDALGDEH::DLHPDALGDEH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(super::DLHPDALGDEH::DLHPDALGDEH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CLDBPLNIAEN(&mut self) -> super::DLHPDALGDEH::DLHPDALGDEH {
        if self.has_CLDBPLNIAEN() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DLHPDALGDEH::DLHPDALGDEH::new()
        }
    }

    // .DJONNOPDJHH GOOMOPMALOL = 1223;

    pub fn GOOMOPMALOL(&self) -> &super::DJONNOPDJHH::DJONNOPDJHH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(ref v)) => v,
            _ => <super::DJONNOPDJHH::DJONNOPDJHH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GOOMOPMALOL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GOOMOPMALOL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GOOMOPMALOL(&mut self, v: super::DJONNOPDJHH::DJONNOPDJHH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GOOMOPMALOL(&mut self) -> &mut super::DJONNOPDJHH::DJONNOPDJHH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(super::DJONNOPDJHH::DJONNOPDJHH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GOOMOPMALOL(&mut self) -> super::DJONNOPDJHH::DJONNOPDJHH {
        if self.has_GOOMOPMALOL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DJONNOPDJHH::DJONNOPDJHH::new()
        }
    }

    // .OOPDMMNNKGI KBFLNJPMOAH = 242;

    pub fn KBFLNJPMOAH(&self) -> &super::OOPDMMNNKGI::OOPDMMNNKGI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(ref v)) => v,
            _ => <super::OOPDMMNNKGI::OOPDMMNNKGI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KBFLNJPMOAH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KBFLNJPMOAH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KBFLNJPMOAH(&mut self, v: super::OOPDMMNNKGI::OOPDMMNNKGI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KBFLNJPMOAH(&mut self) -> &mut super::OOPDMMNNKGI::OOPDMMNNKGI {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(super::OOPDMMNNKGI::OOPDMMNNKGI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KBFLNJPMOAH(&mut self) -> super::OOPDMMNNKGI::OOPDMMNNKGI {
        if self.has_KBFLNJPMOAH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OOPDMMNNKGI::OOPDMMNNKGI::new()
        }
    }

    // .CFFOCCHBAMH JKJOFMHJGIB = 1560;

    pub fn JKJOFMHJGIB(&self) -> &super::CFFOCCHBAMH::CFFOCCHBAMH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(ref v)) => v,
            _ => <super::CFFOCCHBAMH::CFFOCCHBAMH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JKJOFMHJGIB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JKJOFMHJGIB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JKJOFMHJGIB(&mut self, v: super::CFFOCCHBAMH::CFFOCCHBAMH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JKJOFMHJGIB(&mut self) -> &mut super::CFFOCCHBAMH::CFFOCCHBAMH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(super::CFFOCCHBAMH::CFFOCCHBAMH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JKJOFMHJGIB(&mut self) -> super::CFFOCCHBAMH::CFFOCCHBAMH {
        if self.has_JKJOFMHJGIB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CFFOCCHBAMH::CFFOCCHBAMH::new()
        }
    }

    // .PAOCONGELJK DMCEPJKOOGC = 27;

    pub fn DMCEPJKOOGC(&self) -> &super::PAOCONGELJK::PAOCONGELJK {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(ref v)) => v,
            _ => <super::PAOCONGELJK::PAOCONGELJK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DMCEPJKOOGC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DMCEPJKOOGC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMCEPJKOOGC(&mut self, v: super::PAOCONGELJK::PAOCONGELJK) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DMCEPJKOOGC(&mut self) -> &mut super::PAOCONGELJK::PAOCONGELJK {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(super::PAOCONGELJK::PAOCONGELJK::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DMCEPJKOOGC(&mut self) -> super::PAOCONGELJK::PAOCONGELJK {
        if self.has_DMCEPJKOOGC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PAOCONGELJK::PAOCONGELJK::new()
        }
    }

    // .BLFJBKBHJIL FDPPGKDDPGC = 1645;

    pub fn FDPPGKDDPGC(&self) -> &super::BLFJBKBHJIL::BLFJBKBHJIL {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(ref v)) => v,
            _ => <super::BLFJBKBHJIL::BLFJBKBHJIL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FDPPGKDDPGC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FDPPGKDDPGC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FDPPGKDDPGC(&mut self, v: super::BLFJBKBHJIL::BLFJBKBHJIL) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FDPPGKDDPGC(&mut self) -> &mut super::BLFJBKBHJIL::BLFJBKBHJIL {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(super::BLFJBKBHJIL::BLFJBKBHJIL::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FDPPGKDDPGC(&mut self) -> super::BLFJBKBHJIL::BLFJBKBHJIL {
        if self.has_FDPPGKDDPGC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLFJBKBHJIL::BLFJBKBHJIL::new()
        }
    }

    // .OMJFMBJMFMC MAPBDBMFIMD = 1353;

    pub fn MAPBDBMFIMD(&self) -> &super::OMJFMBJMFMC::OMJFMBJMFMC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(ref v)) => v,
            _ => <super::OMJFMBJMFMC::OMJFMBJMFMC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MAPBDBMFIMD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MAPBDBMFIMD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MAPBDBMFIMD(&mut self, v: super::OMJFMBJMFMC::OMJFMBJMFMC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MAPBDBMFIMD(&mut self) -> &mut super::OMJFMBJMFMC::OMJFMBJMFMC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(super::OMJFMBJMFMC::OMJFMBJMFMC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MAPBDBMFIMD(&mut self) -> super::OMJFMBJMFMC::OMJFMBJMFMC {
        if self.has_MAPBDBMFIMD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OMJFMBJMFMC::OMJFMBJMFMC::new()
        }
    }

    // .MOIKNHHCABH OIHJEKIMPPD = 759;

    pub fn OIHJEKIMPPD(&self) -> &super::MOIKNHHCABH::MOIKNHHCABH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(ref v)) => v,
            _ => <super::MOIKNHHCABH::MOIKNHHCABH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OIHJEKIMPPD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OIHJEKIMPPD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIHJEKIMPPD(&mut self, v: super::MOIKNHHCABH::MOIKNHHCABH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OIHJEKIMPPD(&mut self) -> &mut super::MOIKNHHCABH::MOIKNHHCABH {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(super::MOIKNHHCABH::MOIKNHHCABH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OIHJEKIMPPD(&mut self) -> super::MOIKNHHCABH::MOIKNHHCABH {
        if self.has_OIHJEKIMPPD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MOIKNHHCABH::MOIKNHHCABH::new()
        }
    }

    // .FHIKPLAIOEI OKPCJLPMBAD = 63;

    pub fn OKPCJLPMBAD(&self) -> &super::FHIKPLAIOEI::FHIKPLAIOEI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(ref v)) => v,
            _ => <super::FHIKPLAIOEI::FHIKPLAIOEI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OKPCJLPMBAD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OKPCJLPMBAD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OKPCJLPMBAD(&mut self, v: super::FHIKPLAIOEI::FHIKPLAIOEI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OKPCJLPMBAD(&mut self) -> &mut super::FHIKPLAIOEI::FHIKPLAIOEI {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(super::FHIKPLAIOEI::FHIKPLAIOEI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OKPCJLPMBAD(&mut self) -> super::FHIKPLAIOEI::FHIKPLAIOEI {
        if self.has_OKPCJLPMBAD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHIKPLAIOEI::FHIKPLAIOEI::new()
        }
    }

    // .NOCOCFHOAJC DPGBCAFKDPM = 927;

    pub fn DPGBCAFKDPM(&self) -> &super::NOCOCFHOAJC::NOCOCFHOAJC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(ref v)) => v,
            _ => <super::NOCOCFHOAJC::NOCOCFHOAJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DPGBCAFKDPM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DPGBCAFKDPM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DPGBCAFKDPM(&mut self, v: super::NOCOCFHOAJC::NOCOCFHOAJC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DPGBCAFKDPM(&mut self) -> &mut super::NOCOCFHOAJC::NOCOCFHOAJC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(super::NOCOCFHOAJC::NOCOCFHOAJC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DPGBCAFKDPM(&mut self) -> super::NOCOCFHOAJC::NOCOCFHOAJC {
        if self.has_DPGBCAFKDPM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NOCOCFHOAJC::NOCOCFHOAJC::new()
        }
    }

    // .JCAHMIOOLDB HMOBEFJKDPD = 1456;

    pub fn HMOBEFJKDPD(&self) -> &super::JCAHMIOOLDB::JCAHMIOOLDB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(ref v)) => v,
            _ => <super::JCAHMIOOLDB::JCAHMIOOLDB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HMOBEFJKDPD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HMOBEFJKDPD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HMOBEFJKDPD(&mut self, v: super::JCAHMIOOLDB::JCAHMIOOLDB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HMOBEFJKDPD(&mut self) -> &mut super::JCAHMIOOLDB::JCAHMIOOLDB {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(super::JCAHMIOOLDB::JCAHMIOOLDB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HMOBEFJKDPD(&mut self) -> super::JCAHMIOOLDB::JCAHMIOOLDB {
        if self.has_HMOBEFJKDPD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JCAHMIOOLDB::JCAHMIOOLDB::new()
        }
    }

    // .PLCGKIEIEGD JAPIIIJMPGE = 1879;

    pub fn JAPIIIJMPGE(&self) -> &super::PLCGKIEIEGD::PLCGKIEIEGD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(ref v)) => v,
            _ => <super::PLCGKIEIEGD::PLCGKIEIEGD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JAPIIIJMPGE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JAPIIIJMPGE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JAPIIIJMPGE(&mut self, v: super::PLCGKIEIEGD::PLCGKIEIEGD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JAPIIIJMPGE(&mut self) -> &mut super::PLCGKIEIEGD::PLCGKIEIEGD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(super::PLCGKIEIEGD::PLCGKIEIEGD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JAPIIIJMPGE(&mut self) -> super::PLCGKIEIEGD::PLCGKIEIEGD {
        if self.has_JAPIIIJMPGE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PLCGKIEIEGD::PLCGKIEIEGD::new()
        }
    }

    // .EHEFOMMBNAF CPOPCHNDDFM = 802;

    pub fn CPOPCHNDDFM(&self) -> &super::EHEFOMMBNAF::EHEFOMMBNAF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(ref v)) => v,
            _ => <super::EHEFOMMBNAF::EHEFOMMBNAF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CPOPCHNDDFM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CPOPCHNDDFM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CPOPCHNDDFM(&mut self, v: super::EHEFOMMBNAF::EHEFOMMBNAF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CPOPCHNDDFM(&mut self) -> &mut super::EHEFOMMBNAF::EHEFOMMBNAF {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(super::EHEFOMMBNAF::EHEFOMMBNAF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CPOPCHNDDFM(&mut self) -> super::EHEFOMMBNAF::EHEFOMMBNAF {
        if self.has_CPOPCHNDDFM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EHEFOMMBNAF::EHEFOMMBNAF::new()
        }
    }

    // .HKJEGONGJNP NDJBGFHEICI = 1278;

    pub fn NDJBGFHEICI(&self) -> &super::HKJEGONGJNP::HKJEGONGJNP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(ref v)) => v,
            _ => <super::HKJEGONGJNP::HKJEGONGJNP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NDJBGFHEICI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NDJBGFHEICI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NDJBGFHEICI(&mut self, v: super::HKJEGONGJNP::HKJEGONGJNP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NDJBGFHEICI(&mut self) -> &mut super::HKJEGONGJNP::HKJEGONGJNP {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(super::HKJEGONGJNP::HKJEGONGJNP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NDJBGFHEICI(&mut self) -> super::HKJEGONGJNP::HKJEGONGJNP {
        if self.has_NDJBGFHEICI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HKJEGONGJNP::HKJEGONGJNP::new()
        }
    }

    // .HBIBLKKEOAC COBEIBNLGJF = 390;

    pub fn COBEIBNLGJF(&self) -> &super::HBIBLKKEOAC::HBIBLKKEOAC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(ref v)) => v,
            _ => <super::HBIBLKKEOAC::HBIBLKKEOAC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_COBEIBNLGJF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_COBEIBNLGJF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_COBEIBNLGJF(&mut self, v: super::HBIBLKKEOAC::HBIBLKKEOAC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_COBEIBNLGJF(&mut self) -> &mut super::HBIBLKKEOAC::HBIBLKKEOAC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(super::HBIBLKKEOAC::HBIBLKKEOAC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_COBEIBNLGJF(&mut self) -> super::HBIBLKKEOAC::HBIBLKKEOAC {
        if self.has_COBEIBNLGJF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HBIBLKKEOAC::HBIBLKKEOAC::new()
        }
    }

    // .MHIJOCJHONG BLEFMEHONOO = 683;

    pub fn BLEFMEHONOO(&self) -> &super::MHIJOCJHONG::MHIJOCJHONG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(ref v)) => v,
            _ => <super::MHIJOCJHONG::MHIJOCJHONG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BLEFMEHONOO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BLEFMEHONOO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BLEFMEHONOO(&mut self, v: super::MHIJOCJHONG::MHIJOCJHONG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BLEFMEHONOO(&mut self) -> &mut super::MHIJOCJHONG::MHIJOCJHONG {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(super::MHIJOCJHONG::MHIJOCJHONG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BLEFMEHONOO(&mut self) -> super::MHIJOCJHONG::MHIJOCJHONG {
        if self.has_BLEFMEHONOO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MHIJOCJHONG::MHIJOCJHONG::new()
        }
    }

    // .BLEDOJDGLAA IHBODKMFPNF = 1939;

    pub fn IHBODKMFPNF(&self) -> &super::BLEDOJDGLAA::BLEDOJDGLAA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(ref v)) => v,
            _ => <super::BLEDOJDGLAA::BLEDOJDGLAA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IHBODKMFPNF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IHBODKMFPNF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IHBODKMFPNF(&mut self, v: super::BLEDOJDGLAA::BLEDOJDGLAA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IHBODKMFPNF(&mut self) -> &mut super::BLEDOJDGLAA::BLEDOJDGLAA {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(super::BLEDOJDGLAA::BLEDOJDGLAA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IHBODKMFPNF(&mut self) -> super::BLEDOJDGLAA::BLEDOJDGLAA {
        if self.has_IHBODKMFPNF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLEDOJDGLAA::BLEDOJDGLAA::new()
        }
    }

    // .LGPGCJDOIBK LBOJLIIABAP = 1710;

    pub fn LBOJLIIABAP(&self) -> &super::LGPGCJDOIBK::LGPGCJDOIBK {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(ref v)) => v,
            _ => <super::LGPGCJDOIBK::LGPGCJDOIBK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LBOJLIIABAP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LBOJLIIABAP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LBOJLIIABAP(&mut self, v: super::LGPGCJDOIBK::LGPGCJDOIBK) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LBOJLIIABAP(&mut self) -> &mut super::LGPGCJDOIBK::LGPGCJDOIBK {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(super::LGPGCJDOIBK::LGPGCJDOIBK::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LBOJLIIABAP(&mut self) -> super::LGPGCJDOIBK::LGPGCJDOIBK {
        if self.has_LBOJLIIABAP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LGPGCJDOIBK::LGPGCJDOIBK::new()
        }
    }

    // .ABPNCPOIJCI ILHBHPHDEDL = 630;

    pub fn ILHBHPHDEDL(&self) -> &super::ABPNCPOIJCI::ABPNCPOIJCI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(ref v)) => v,
            _ => <super::ABPNCPOIJCI::ABPNCPOIJCI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ILHBHPHDEDL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_ILHBHPHDEDL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ILHBHPHDEDL(&mut self, v: super::ABPNCPOIJCI::ABPNCPOIJCI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ILHBHPHDEDL(&mut self) -> &mut super::ABPNCPOIJCI::ABPNCPOIJCI {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(super::ABPNCPOIJCI::ABPNCPOIJCI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ILHBHPHDEDL(&mut self) -> super::ABPNCPOIJCI::ABPNCPOIJCI {
        if self.has_ILHBHPHDEDL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ABPNCPOIJCI::ABPNCPOIJCI::new()
        }
    }

    // .IMNNNJGGPAG DICGEADECPK = 901;

    pub fn DICGEADECPK(&self) -> &super::IMNNNJGGPAG::IMNNNJGGPAG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(ref v)) => v,
            _ => <super::IMNNNJGGPAG::IMNNNJGGPAG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DICGEADECPK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DICGEADECPK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DICGEADECPK(&mut self, v: super::IMNNNJGGPAG::IMNNNJGGPAG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DICGEADECPK(&mut self) -> &mut super::IMNNNJGGPAG::IMNNNJGGPAG {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(super::IMNNNJGGPAG::IMNNNJGGPAG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DICGEADECPK(&mut self) -> super::IMNNNJGGPAG::IMNNNJGGPAG {
        if self.has_DICGEADECPK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMNNNJGGPAG::IMNNNJGGPAG::new()
        }
    }

    // .IMDHPDBHEBC GABICMFAKPD = 1575;

    pub fn GABICMFAKPD(&self) -> &super::IMDHPDBHEBC::IMDHPDBHEBC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(ref v)) => v,
            _ => <super::IMDHPDBHEBC::IMDHPDBHEBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GABICMFAKPD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GABICMFAKPD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GABICMFAKPD(&mut self, v: super::IMDHPDBHEBC::IMDHPDBHEBC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GABICMFAKPD(&mut self) -> &mut super::IMDHPDBHEBC::IMDHPDBHEBC {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(super::IMDHPDBHEBC::IMDHPDBHEBC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GABICMFAKPD(&mut self) -> super::IMDHPDBHEBC::IMDHPDBHEBC {
        if self.has_GABICMFAKPD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IMDHPDBHEBC::IMDHPDBHEBC::new()
        }
    }

    // .IKCNDLJLAPP DKMMOIMOJDM = 605;

    pub fn DKMMOIMOJDM(&self) -> &super::IKCNDLJLAPP::IKCNDLJLAPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(ref v)) => v,
            _ => <super::IKCNDLJLAPP::IKCNDLJLAPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DKMMOIMOJDM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DKMMOIMOJDM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DKMMOIMOJDM(&mut self, v: super::IKCNDLJLAPP::IKCNDLJLAPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DKMMOIMOJDM(&mut self) -> &mut super::IKCNDLJLAPP::IKCNDLJLAPP {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(super::IKCNDLJLAPP::IKCNDLJLAPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DKMMOIMOJDM(&mut self) -> super::IKCNDLJLAPP::IKCNDLJLAPP {
        if self.has_DKMMOIMOJDM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IKCNDLJLAPP::IKCNDLJLAPP::new()
        }
    }

    // .BLJOGGMJBMD HCFOPGMLENO = 1491;

    pub fn HCFOPGMLENO(&self) -> &super::BLJOGGMJBMD::BLJOGGMJBMD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(ref v)) => v,
            _ => <super::BLJOGGMJBMD::BLJOGGMJBMD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HCFOPGMLENO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HCFOPGMLENO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HCFOPGMLENO(&mut self, v: super::BLJOGGMJBMD::BLJOGGMJBMD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HCFOPGMLENO(&mut self) -> &mut super::BLJOGGMJBMD::BLJOGGMJBMD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(super::BLJOGGMJBMD::BLJOGGMJBMD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HCFOPGMLENO(&mut self) -> super::BLJOGGMJBMD::BLJOGGMJBMD {
        if self.has_HCFOPGMLENO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLJOGGMJBMD::BLJOGGMJBMD::new()
        }
    }

    // .BLJOGGMJBMD GDMGOELOMFK = 499;

    pub fn GDMGOELOMFK(&self) -> &super::BLJOGGMJBMD::BLJOGGMJBMD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(ref v)) => v,
            _ => <super::BLJOGGMJBMD::BLJOGGMJBMD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GDMGOELOMFK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GDMGOELOMFK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GDMGOELOMFK(&mut self, v: super::BLJOGGMJBMD::BLJOGGMJBMD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GDMGOELOMFK(&mut self) -> &mut super::BLJOGGMJBMD::BLJOGGMJBMD {
        if let ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(super::BLJOGGMJBMD::BLJOGGMJBMD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GDMGOELOMFK(&mut self) -> super::BLJOGGMJBMD::BLJOGGMJBMD {
        if self.has_GDMGOELOMFK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BLJOGGMJBMD::BLJOGGMJBMD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(29);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.retcode },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IFDKLLHFPJB",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.IFDKLLHFPJB },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.IFDKLLHFPJB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBAPCCEGNME",
            |m: &HandleRogueCommonPendingActionScRsp| { &m.HBAPCCEGNME },
            |m: &mut HandleRogueCommonPendingActionScRsp| { &mut m.HBAPCCEGNME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HCAJJEFEIJD::HCAJJEFEIJD>(
            "PNADBJEJBOF",
            HandleRogueCommonPendingActionScRsp::has_PNADBJEJBOF,
            HandleRogueCommonPendingActionScRsp::PNADBJEJBOF,
            HandleRogueCommonPendingActionScRsp::mut_PNADBJEJBOF,
            HandleRogueCommonPendingActionScRsp::set_PNADBJEJBOF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FKDBIHNPCHE::FKDBIHNPCHE>(
            "KKIANGABFNJ",
            HandleRogueCommonPendingActionScRsp::has_KKIANGABFNJ,
            HandleRogueCommonPendingActionScRsp::KKIANGABFNJ,
            HandleRogueCommonPendingActionScRsp::mut_KKIANGABFNJ,
            HandleRogueCommonPendingActionScRsp::set_KKIANGABFNJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DLHPDALGDEH::DLHPDALGDEH>(
            "CLDBPLNIAEN",
            HandleRogueCommonPendingActionScRsp::has_CLDBPLNIAEN,
            HandleRogueCommonPendingActionScRsp::CLDBPLNIAEN,
            HandleRogueCommonPendingActionScRsp::mut_CLDBPLNIAEN,
            HandleRogueCommonPendingActionScRsp::set_CLDBPLNIAEN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DJONNOPDJHH::DJONNOPDJHH>(
            "GOOMOPMALOL",
            HandleRogueCommonPendingActionScRsp::has_GOOMOPMALOL,
            HandleRogueCommonPendingActionScRsp::GOOMOPMALOL,
            HandleRogueCommonPendingActionScRsp::mut_GOOMOPMALOL,
            HandleRogueCommonPendingActionScRsp::set_GOOMOPMALOL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OOPDMMNNKGI::OOPDMMNNKGI>(
            "KBFLNJPMOAH",
            HandleRogueCommonPendingActionScRsp::has_KBFLNJPMOAH,
            HandleRogueCommonPendingActionScRsp::KBFLNJPMOAH,
            HandleRogueCommonPendingActionScRsp::mut_KBFLNJPMOAH,
            HandleRogueCommonPendingActionScRsp::set_KBFLNJPMOAH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CFFOCCHBAMH::CFFOCCHBAMH>(
            "JKJOFMHJGIB",
            HandleRogueCommonPendingActionScRsp::has_JKJOFMHJGIB,
            HandleRogueCommonPendingActionScRsp::JKJOFMHJGIB,
            HandleRogueCommonPendingActionScRsp::mut_JKJOFMHJGIB,
            HandleRogueCommonPendingActionScRsp::set_JKJOFMHJGIB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PAOCONGELJK::PAOCONGELJK>(
            "DMCEPJKOOGC",
            HandleRogueCommonPendingActionScRsp::has_DMCEPJKOOGC,
            HandleRogueCommonPendingActionScRsp::DMCEPJKOOGC,
            HandleRogueCommonPendingActionScRsp::mut_DMCEPJKOOGC,
            HandleRogueCommonPendingActionScRsp::set_DMCEPJKOOGC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLFJBKBHJIL::BLFJBKBHJIL>(
            "FDPPGKDDPGC",
            HandleRogueCommonPendingActionScRsp::has_FDPPGKDDPGC,
            HandleRogueCommonPendingActionScRsp::FDPPGKDDPGC,
            HandleRogueCommonPendingActionScRsp::mut_FDPPGKDDPGC,
            HandleRogueCommonPendingActionScRsp::set_FDPPGKDDPGC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OMJFMBJMFMC::OMJFMBJMFMC>(
            "MAPBDBMFIMD",
            HandleRogueCommonPendingActionScRsp::has_MAPBDBMFIMD,
            HandleRogueCommonPendingActionScRsp::MAPBDBMFIMD,
            HandleRogueCommonPendingActionScRsp::mut_MAPBDBMFIMD,
            HandleRogueCommonPendingActionScRsp::set_MAPBDBMFIMD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MOIKNHHCABH::MOIKNHHCABH>(
            "OIHJEKIMPPD",
            HandleRogueCommonPendingActionScRsp::has_OIHJEKIMPPD,
            HandleRogueCommonPendingActionScRsp::OIHJEKIMPPD,
            HandleRogueCommonPendingActionScRsp::mut_OIHJEKIMPPD,
            HandleRogueCommonPendingActionScRsp::set_OIHJEKIMPPD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHIKPLAIOEI::FHIKPLAIOEI>(
            "OKPCJLPMBAD",
            HandleRogueCommonPendingActionScRsp::has_OKPCJLPMBAD,
            HandleRogueCommonPendingActionScRsp::OKPCJLPMBAD,
            HandleRogueCommonPendingActionScRsp::mut_OKPCJLPMBAD,
            HandleRogueCommonPendingActionScRsp::set_OKPCJLPMBAD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NOCOCFHOAJC::NOCOCFHOAJC>(
            "DPGBCAFKDPM",
            HandleRogueCommonPendingActionScRsp::has_DPGBCAFKDPM,
            HandleRogueCommonPendingActionScRsp::DPGBCAFKDPM,
            HandleRogueCommonPendingActionScRsp::mut_DPGBCAFKDPM,
            HandleRogueCommonPendingActionScRsp::set_DPGBCAFKDPM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JCAHMIOOLDB::JCAHMIOOLDB>(
            "HMOBEFJKDPD",
            HandleRogueCommonPendingActionScRsp::has_HMOBEFJKDPD,
            HandleRogueCommonPendingActionScRsp::HMOBEFJKDPD,
            HandleRogueCommonPendingActionScRsp::mut_HMOBEFJKDPD,
            HandleRogueCommonPendingActionScRsp::set_HMOBEFJKDPD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PLCGKIEIEGD::PLCGKIEIEGD>(
            "JAPIIIJMPGE",
            HandleRogueCommonPendingActionScRsp::has_JAPIIIJMPGE,
            HandleRogueCommonPendingActionScRsp::JAPIIIJMPGE,
            HandleRogueCommonPendingActionScRsp::mut_JAPIIIJMPGE,
            HandleRogueCommonPendingActionScRsp::set_JAPIIIJMPGE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EHEFOMMBNAF::EHEFOMMBNAF>(
            "CPOPCHNDDFM",
            HandleRogueCommonPendingActionScRsp::has_CPOPCHNDDFM,
            HandleRogueCommonPendingActionScRsp::CPOPCHNDDFM,
            HandleRogueCommonPendingActionScRsp::mut_CPOPCHNDDFM,
            HandleRogueCommonPendingActionScRsp::set_CPOPCHNDDFM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HKJEGONGJNP::HKJEGONGJNP>(
            "NDJBGFHEICI",
            HandleRogueCommonPendingActionScRsp::has_NDJBGFHEICI,
            HandleRogueCommonPendingActionScRsp::NDJBGFHEICI,
            HandleRogueCommonPendingActionScRsp::mut_NDJBGFHEICI,
            HandleRogueCommonPendingActionScRsp::set_NDJBGFHEICI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HBIBLKKEOAC::HBIBLKKEOAC>(
            "COBEIBNLGJF",
            HandleRogueCommonPendingActionScRsp::has_COBEIBNLGJF,
            HandleRogueCommonPendingActionScRsp::COBEIBNLGJF,
            HandleRogueCommonPendingActionScRsp::mut_COBEIBNLGJF,
            HandleRogueCommonPendingActionScRsp::set_COBEIBNLGJF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MHIJOCJHONG::MHIJOCJHONG>(
            "BLEFMEHONOO",
            HandleRogueCommonPendingActionScRsp::has_BLEFMEHONOO,
            HandleRogueCommonPendingActionScRsp::BLEFMEHONOO,
            HandleRogueCommonPendingActionScRsp::mut_BLEFMEHONOO,
            HandleRogueCommonPendingActionScRsp::set_BLEFMEHONOO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLEDOJDGLAA::BLEDOJDGLAA>(
            "IHBODKMFPNF",
            HandleRogueCommonPendingActionScRsp::has_IHBODKMFPNF,
            HandleRogueCommonPendingActionScRsp::IHBODKMFPNF,
            HandleRogueCommonPendingActionScRsp::mut_IHBODKMFPNF,
            HandleRogueCommonPendingActionScRsp::set_IHBODKMFPNF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LGPGCJDOIBK::LGPGCJDOIBK>(
            "LBOJLIIABAP",
            HandleRogueCommonPendingActionScRsp::has_LBOJLIIABAP,
            HandleRogueCommonPendingActionScRsp::LBOJLIIABAP,
            HandleRogueCommonPendingActionScRsp::mut_LBOJLIIABAP,
            HandleRogueCommonPendingActionScRsp::set_LBOJLIIABAP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ABPNCPOIJCI::ABPNCPOIJCI>(
            "ILHBHPHDEDL",
            HandleRogueCommonPendingActionScRsp::has_ILHBHPHDEDL,
            HandleRogueCommonPendingActionScRsp::ILHBHPHDEDL,
            HandleRogueCommonPendingActionScRsp::mut_ILHBHPHDEDL,
            HandleRogueCommonPendingActionScRsp::set_ILHBHPHDEDL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMNNNJGGPAG::IMNNNJGGPAG>(
            "DICGEADECPK",
            HandleRogueCommonPendingActionScRsp::has_DICGEADECPK,
            HandleRogueCommonPendingActionScRsp::DICGEADECPK,
            HandleRogueCommonPendingActionScRsp::mut_DICGEADECPK,
            HandleRogueCommonPendingActionScRsp::set_DICGEADECPK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IMDHPDBHEBC::IMDHPDBHEBC>(
            "GABICMFAKPD",
            HandleRogueCommonPendingActionScRsp::has_GABICMFAKPD,
            HandleRogueCommonPendingActionScRsp::GABICMFAKPD,
            HandleRogueCommonPendingActionScRsp::mut_GABICMFAKPD,
            HandleRogueCommonPendingActionScRsp::set_GABICMFAKPD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IKCNDLJLAPP::IKCNDLJLAPP>(
            "DKMMOIMOJDM",
            HandleRogueCommonPendingActionScRsp::has_DKMMOIMOJDM,
            HandleRogueCommonPendingActionScRsp::DKMMOIMOJDM,
            HandleRogueCommonPendingActionScRsp::mut_DKMMOIMOJDM,
            HandleRogueCommonPendingActionScRsp::set_DKMMOIMOJDM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLJOGGMJBMD::BLJOGGMJBMD>(
            "HCFOPGMLENO",
            HandleRogueCommonPendingActionScRsp::has_HCFOPGMLENO,
            HandleRogueCommonPendingActionScRsp::HCFOPGMLENO,
            HandleRogueCommonPendingActionScRsp::mut_HCFOPGMLENO,
            HandleRogueCommonPendingActionScRsp::set_HCFOPGMLENO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BLJOGGMJBMD::BLJOGGMJBMD>(
            "GDMGOELOMFK",
            HandleRogueCommonPendingActionScRsp::has_GDMGOELOMFK,
            HandleRogueCommonPendingActionScRsp::GDMGOELOMFK,
            HandleRogueCommonPendingActionScRsp::mut_GDMGOELOMFK,
            HandleRogueCommonPendingActionScRsp::set_GDMGOELOMFK,
        ));
        oneofs.push(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HandleRogueCommonPendingActionScRsp>(
            "HandleRogueCommonPendingActionScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HandleRogueCommonPendingActionScRsp {
    const NAME: &'static str = "HandleRogueCommonPendingActionScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.retcode = is.read_uint32()?;
                },
                64 => {
                    self.IFDKLLHFPJB = is.read_uint32()?;
                },
                16 => {
                    self.HBAPCCEGNME = is.read_uint32()?;
                },
                12426 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(is.read_message()?));
                },
                5098 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(is.read_message()?));
                },
                1554 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(is.read_message()?));
                },
                9786 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(is.read_message()?));
                },
                1938 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(is.read_message()?));
                },
                12482 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(is.read_message()?));
                },
                218 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(is.read_message()?));
                },
                13162 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(is.read_message()?));
                },
                10826 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(is.read_message()?));
                },
                6074 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(is.read_message()?));
                },
                506 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(is.read_message()?));
                },
                7418 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(is.read_message()?));
                },
                11650 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(is.read_message()?));
                },
                15034 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(is.read_message()?));
                },
                6418 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(is.read_message()?));
                },
                10226 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(is.read_message()?));
                },
                3122 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(is.read_message()?));
                },
                5466 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(is.read_message()?));
                },
                15514 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(is.read_message()?));
                },
                13682 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(is.read_message()?));
                },
                5042 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(is.read_message()?));
                },
                7210 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(is.read_message()?));
                },
                12602 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(is.read_message()?));
                },
                4842 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(is.read_message()?));
                },
                11930 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(is.read_message()?));
                },
                3994 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.retcode);
        }
        if self.IFDKLLHFPJB != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.IFDKLLHFPJB);
        }
        if self.HBAPCCEGNME != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.HBAPCCEGNME);
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.retcode != 0 {
            os.write_uint32(4, self.retcode)?;
        }
        if self.IFDKLLHFPJB != 0 {
            os.write_uint32(8, self.IFDKLLHFPJB)?;
        }
        if self.HBAPCCEGNME != 0 {
            os.write_uint32(2, self.HBAPCCEGNME)?;
        }
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::PNADBJEJBOF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1553, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KKIANGABFNJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(637, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CLDBPLNIAEN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(194, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GOOMOPMALOL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1223, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::KBFLNJPMOAH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(242, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JKJOFMHJGIB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1560, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DMCEPJKOOGC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::FDPPGKDDPGC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1645, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::MAPBDBMFIMD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1353, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OIHJEKIMPPD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(759, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::OKPCJLPMBAD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(63, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DPGBCAFKDPM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(927, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HMOBEFJKDPD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1456, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::JAPIIIJMPGE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1879, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::CPOPCHNDDFM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(802, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::NDJBGFHEICI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1278, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::COBEIBNLGJF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(390, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::BLEFMEHONOO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(683, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::IHBODKMFPNF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1939, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::LBOJLIIABAP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1710, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::ILHBHPHDEDL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(630, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DICGEADECPK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(901, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GABICMFAKPD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1575, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::DKMMOIMOJDM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(605, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::HCFOPGMLENO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1491, v, os)?;
                },
                &handle_rogue_common_pending_action_sc_rsp::KFELKJLDKEH::GDMGOELOMFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(499, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HandleRogueCommonPendingActionScRsp {
        HandleRogueCommonPendingActionScRsp::new()
    }

    fn clear(&mut self) {
        self.retcode = 0;
        self.IFDKLLHFPJB = 0;
        self.HBAPCCEGNME = 0;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HandleRogueCommonPendingActionScRsp {
        static instance: HandleRogueCommonPendingActionScRsp = HandleRogueCommonPendingActionScRsp {
            retcode: 0,
            IFDKLLHFPJB: 0,
            HBAPCCEGNME: 0,
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HandleRogueCommonPendingActionScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HandleRogueCommonPendingActionScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HandleRogueCommonPendingActionScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleRogueCommonPendingActionScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HandleRogueCommonPendingActionScRsp`
pub mod handle_rogue_common_pending_action_sc_rsp {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:HandleRogueCommonPendingActionScRsp.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.PNADBJEJBOF)
        PNADBJEJBOF(super::super::HCAJJEFEIJD::HCAJJEFEIJD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.KKIANGABFNJ)
        KKIANGABFNJ(super::super::FKDBIHNPCHE::FKDBIHNPCHE),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.CLDBPLNIAEN)
        CLDBPLNIAEN(super::super::DLHPDALGDEH::DLHPDALGDEH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.GOOMOPMALOL)
        GOOMOPMALOL(super::super::DJONNOPDJHH::DJONNOPDJHH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.KBFLNJPMOAH)
        KBFLNJPMOAH(super::super::OOPDMMNNKGI::OOPDMMNNKGI),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.JKJOFMHJGIB)
        JKJOFMHJGIB(super::super::CFFOCCHBAMH::CFFOCCHBAMH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.DMCEPJKOOGC)
        DMCEPJKOOGC(super::super::PAOCONGELJK::PAOCONGELJK),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.FDPPGKDDPGC)
        FDPPGKDDPGC(super::super::BLFJBKBHJIL::BLFJBKBHJIL),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.MAPBDBMFIMD)
        MAPBDBMFIMD(super::super::OMJFMBJMFMC::OMJFMBJMFMC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.OIHJEKIMPPD)
        OIHJEKIMPPD(super::super::MOIKNHHCABH::MOIKNHHCABH),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.OKPCJLPMBAD)
        OKPCJLPMBAD(super::super::FHIKPLAIOEI::FHIKPLAIOEI),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.DPGBCAFKDPM)
        DPGBCAFKDPM(super::super::NOCOCFHOAJC::NOCOCFHOAJC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.HMOBEFJKDPD)
        HMOBEFJKDPD(super::super::JCAHMIOOLDB::JCAHMIOOLDB),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.JAPIIIJMPGE)
        JAPIIIJMPGE(super::super::PLCGKIEIEGD::PLCGKIEIEGD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.CPOPCHNDDFM)
        CPOPCHNDDFM(super::super::EHEFOMMBNAF::EHEFOMMBNAF),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.NDJBGFHEICI)
        NDJBGFHEICI(super::super::HKJEGONGJNP::HKJEGONGJNP),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.COBEIBNLGJF)
        COBEIBNLGJF(super::super::HBIBLKKEOAC::HBIBLKKEOAC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.BLEFMEHONOO)
        BLEFMEHONOO(super::super::MHIJOCJHONG::MHIJOCJHONG),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.IHBODKMFPNF)
        IHBODKMFPNF(super::super::BLEDOJDGLAA::BLEDOJDGLAA),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.LBOJLIIABAP)
        LBOJLIIABAP(super::super::LGPGCJDOIBK::LGPGCJDOIBK),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.ILHBHPHDEDL)
        ILHBHPHDEDL(super::super::ABPNCPOIJCI::ABPNCPOIJCI),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.DICGEADECPK)
        DICGEADECPK(super::super::IMNNNJGGPAG::IMNNNJGGPAG),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.GABICMFAKPD)
        GABICMFAKPD(super::super::IMDHPDBHEBC::IMDHPDBHEBC),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.DKMMOIMOJDM)
        DKMMOIMOJDM(super::super::IKCNDLJLAPP::IKCNDLJLAPP),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.HCFOPGMLENO)
        HCFOPGMLENO(super::super::BLJOGGMJBMD::BLJOGGMJBMD),
        // @@protoc_insertion_point(oneof_field:HandleRogueCommonPendingActionScRsp.GDMGOELOMFK)
        GDMGOELOMFK(super::super::BLJOGGMJBMD::BLJOGGMJBMD),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HandleRogueCommonPendingActionScRsp as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)HandleRogueCommonPendingActionScRsp.proto\x1a\x11ABPNCPOIJCI.proto\
    \x1a\x11BLEDOJDGLAA.proto\x1a\x11BLFJBKBHJIL.proto\x1a\x11BLJOGGMJBMD.pr\
    oto\x1a\x11CFFOCCHBAMH.proto\x1a\x11DJONNOPDJHH.proto\x1a\x11DLHPDALGDEH\
    .proto\x1a\x11EHEFOMMBNAF.proto\x1a\x11FHIKPLAIOEI.proto\x1a\x11FKDBIHNP\
    CHE.proto\x1a\x11HBIBLKKEOAC.proto\x1a\x11HCAJJEFEIJD.proto\x1a\x11HKJEG\
    ONGJNP.proto\x1a\x11IKCNDLJLAPP.proto\x1a\x11IMDHPDBHEBC.proto\x1a\x11IM\
    NNNJGGPAG.proto\x1a\x11JCAHMIOOLDB.proto\x1a\x11LGPGCJDOIBK.proto\x1a\
    \x11MHIJOCJHONG.proto\x1a\x11MOIKNHHCABH.proto\x1a\x11NOCOCFHOAJC.proto\
    \x1a\x11OMJFMBJMFMC.proto\x1a\x11OOPDMMNNKGI.proto\x1a\x11PAOCONGELJK.pr\
    oto\x1a\x11PLCGKIEIEGD.proto\"\xbe\x0b\n#HandleRogueCommonPendingActionS\
    cRsp\x12\x18\n\x07retcode\x18\x04\x20\x01(\rR\x07retcode\x12\x20\n\x0bIF\
    DKLLHFPJB\x18\x08\x20\x01(\rR\x0bIFDKLLHFPJB\x12\x20\n\x0bHBAPCCEGNME\
    \x18\x02\x20\x01(\rR\x0bHBAPCCEGNME\x121\n\x0bPNADBJEJBOF\x18\x91\x0c\
    \x20\x01(\x0b2\x0c.HCAJJEFEIJDH\0R\x0bPNADBJEJBOF\x121\n\x0bKKIANGABFNJ\
    \x18\xfd\x04\x20\x01(\x0b2\x0c.FKDBIHNPCHEH\0R\x0bKKIANGABFNJ\x121\n\x0b\
    CLDBPLNIAEN\x18\xc2\x01\x20\x01(\x0b2\x0c.DLHPDALGDEHH\0R\x0bCLDBPLNIAEN\
    \x121\n\x0bGOOMOPMALOL\x18\xc7\t\x20\x01(\x0b2\x0c.DJONNOPDJHHH\0R\x0bGO\
    OMOPMALOL\x121\n\x0bKBFLNJPMOAH\x18\xf2\x01\x20\x01(\x0b2\x0c.OOPDMMNNKG\
    IH\0R\x0bKBFLNJPMOAH\x121\n\x0bJKJOFMHJGIB\x18\x98\x0c\x20\x01(\x0b2\x0c\
    .CFFOCCHBAMHH\0R\x0bJKJOFMHJGIB\x120\n\x0bDMCEPJKOOGC\x18\x1b\x20\x01(\
    \x0b2\x0c.PAOCONGELJKH\0R\x0bDMCEPJKOOGC\x121\n\x0bFDPPGKDDPGC\x18\xed\
    \x0c\x20\x01(\x0b2\x0c.BLFJBKBHJILH\0R\x0bFDPPGKDDPGC\x121\n\x0bMAPBDBMF\
    IMD\x18\xc9\n\x20\x01(\x0b2\x0c.OMJFMBJMFMCH\0R\x0bMAPBDBMFIMD\x121\n\
    \x0bOIHJEKIMPPD\x18\xf7\x05\x20\x01(\x0b2\x0c.MOIKNHHCABHH\0R\x0bOIHJEKI\
    MPPD\x120\n\x0bOKPCJLPMBAD\x18?\x20\x01(\x0b2\x0c.FHIKPLAIOEIH\0R\x0bOKP\
    CJLPMBAD\x121\n\x0bDPGBCAFKDPM\x18\x9f\x07\x20\x01(\x0b2\x0c.NOCOCFHOAJC\
    H\0R\x0bDPGBCAFKDPM\x121\n\x0bHMOBEFJKDPD\x18\xb0\x0b\x20\x01(\x0b2\x0c.\
    JCAHMIOOLDBH\0R\x0bHMOBEFJKDPD\x121\n\x0bJAPIIIJMPGE\x18\xd7\x0e\x20\x01\
    (\x0b2\x0c.PLCGKIEIEGDH\0R\x0bJAPIIIJMPGE\x121\n\x0bCPOPCHNDDFM\x18\xa2\
    \x06\x20\x01(\x0b2\x0c.EHEFOMMBNAFH\0R\x0bCPOPCHNDDFM\x121\n\x0bNDJBGFHE\
    ICI\x18\xfe\t\x20\x01(\x0b2\x0c.HKJEGONGJNPH\0R\x0bNDJBGFHEICI\x121\n\
    \x0bCOBEIBNLGJF\x18\x86\x03\x20\x01(\x0b2\x0c.HBIBLKKEOACH\0R\x0bCOBEIBN\
    LGJF\x121\n\x0bBLEFMEHONOO\x18\xab\x05\x20\x01(\x0b2\x0c.MHIJOCJHONGH\0R\
    \x0bBLEFMEHONOO\x121\n\x0bIHBODKMFPNF\x18\x93\x0f\x20\x01(\x0b2\x0c.BLED\
    OJDGLAAH\0R\x0bIHBODKMFPNF\x121\n\x0bLBOJLIIABAP\x18\xae\r\x20\x01(\x0b2\
    \x0c.LGPGCJDOIBKH\0R\x0bLBOJLIIABAP\x121\n\x0bILHBHPHDEDL\x18\xf6\x04\
    \x20\x01(\x0b2\x0c.ABPNCPOIJCIH\0R\x0bILHBHPHDEDL\x121\n\x0bDICGEADECPK\
    \x18\x85\x07\x20\x01(\x0b2\x0c.IMNNNJGGPAGH\0R\x0bDICGEADECPK\x121\n\x0b\
    GABICMFAKPD\x18\xa7\x0c\x20\x01(\x0b2\x0c.IMDHPDBHEBCH\0R\x0bGABICMFAKPD\
    \x121\n\x0bDKMMOIMOJDM\x18\xdd\x04\x20\x01(\x0b2\x0c.IKCNDLJLAPPH\0R\x0b\
    DKMMOIMOJDM\x121\n\x0bHCFOPGMLENO\x18\xd3\x0b\x20\x01(\x0b2\x0c.BLJOGGMJ\
    BMDH\0R\x0bHCFOPGMLENO\x121\n\x0bGDMGOELOMFK\x18\xf3\x03\x20\x01(\x0b2\
    \x0c.BLJOGGMJBMDH\0R\x0bGDMGOELOMFKB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(25);
            deps.push(super::ABPNCPOIJCI::file_descriptor().clone());
            deps.push(super::BLEDOJDGLAA::file_descriptor().clone());
            deps.push(super::BLFJBKBHJIL::file_descriptor().clone());
            deps.push(super::BLJOGGMJBMD::file_descriptor().clone());
            deps.push(super::CFFOCCHBAMH::file_descriptor().clone());
            deps.push(super::DJONNOPDJHH::file_descriptor().clone());
            deps.push(super::DLHPDALGDEH::file_descriptor().clone());
            deps.push(super::EHEFOMMBNAF::file_descriptor().clone());
            deps.push(super::FHIKPLAIOEI::file_descriptor().clone());
            deps.push(super::FKDBIHNPCHE::file_descriptor().clone());
            deps.push(super::HBIBLKKEOAC::file_descriptor().clone());
            deps.push(super::HCAJJEFEIJD::file_descriptor().clone());
            deps.push(super::HKJEGONGJNP::file_descriptor().clone());
            deps.push(super::IKCNDLJLAPP::file_descriptor().clone());
            deps.push(super::IMDHPDBHEBC::file_descriptor().clone());
            deps.push(super::IMNNNJGGPAG::file_descriptor().clone());
            deps.push(super::JCAHMIOOLDB::file_descriptor().clone());
            deps.push(super::LGPGCJDOIBK::file_descriptor().clone());
            deps.push(super::MHIJOCJHONG::file_descriptor().clone());
            deps.push(super::MOIKNHHCABH::file_descriptor().clone());
            deps.push(super::NOCOCFHOAJC::file_descriptor().clone());
            deps.push(super::OMJFMBJMFMC::file_descriptor().clone());
            deps.push(super::OOPDMMNNKGI::file_descriptor().clone());
            deps.push(super::PAOCONGELJK::file_descriptor().clone());
            deps.push(super::PLCGKIEIEGD::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HandleRogueCommonPendingActionScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
