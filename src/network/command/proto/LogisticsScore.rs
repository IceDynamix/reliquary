// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LogisticsScore.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:LogisticsScore)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LogisticsScore {
    // message fields
    // @@protoc_insertion_point(field:LogisticsScore.map_id)
    pub map_id: u32,
    // @@protoc_insertion_point(field:LogisticsScore.unlock_level)
    pub unlock_level: u32,
    // @@protoc_insertion_point(field:LogisticsScore.reward)
    pub reward: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:LogisticsScore.last_level)
    pub last_level: u32,
    // @@protoc_insertion_point(field:LogisticsScore.max_score)
    pub max_score: u32,
    // @@protoc_insertion_point(field:LogisticsScore.last_max_score)
    pub last_max_score: u32,
    // @@protoc_insertion_point(field:LogisticsScore.cur_score)
    pub cur_score: u32,
    // special fields
    // @@protoc_insertion_point(special_field:LogisticsScore.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogisticsScore {
    fn default() -> &'a LogisticsScore {
        <LogisticsScore as ::protobuf::Message>::default_instance()
    }
}

impl LogisticsScore {
    pub fn new() -> LogisticsScore {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "map_id",
            |m: &LogisticsScore| { &m.map_id },
            |m: &mut LogisticsScore| { &mut m.map_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unlock_level",
            |m: &LogisticsScore| { &m.unlock_level },
            |m: &mut LogisticsScore| { &mut m.unlock_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "reward",
            |m: &LogisticsScore| { &m.reward },
            |m: &mut LogisticsScore| { &mut m.reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_level",
            |m: &LogisticsScore| { &m.last_level },
            |m: &mut LogisticsScore| { &mut m.last_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_score",
            |m: &LogisticsScore| { &m.max_score },
            |m: &mut LogisticsScore| { &mut m.max_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_max_score",
            |m: &LogisticsScore| { &m.last_max_score },
            |m: &mut LogisticsScore| { &mut m.last_max_score },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_score",
            |m: &LogisticsScore| { &m.cur_score },
            |m: &mut LogisticsScore| { &mut m.cur_score },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogisticsScore>(
            "LogisticsScore",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogisticsScore {
    const NAME: &'static str = "LogisticsScore";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.map_id = is.read_uint32()?;
                },
                96 => {
                    self.unlock_level = is.read_uint32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reward)?;
                },
                8 => {
                    self.last_level = is.read_uint32()?;
                },
                56 => {
                    self.max_score = is.read_uint32()?;
                },
                72 => {
                    self.last_max_score = is.read_uint32()?;
                },
                88 => {
                    self.cur_score = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.map_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.map_id);
        }
        if self.unlock_level != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.unlock_level);
        }
        if let Some(v) = self.reward.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_level != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.last_level);
        }
        if self.max_score != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.max_score);
        }
        if self.last_max_score != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.last_max_score);
        }
        if self.cur_score != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.cur_score);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.map_id != 0 {
            os.write_uint32(3, self.map_id)?;
        }
        if self.unlock_level != 0 {
            os.write_uint32(12, self.unlock_level)?;
        }
        if let Some(v) = self.reward.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.last_level != 0 {
            os.write_uint32(1, self.last_level)?;
        }
        if self.max_score != 0 {
            os.write_uint32(7, self.max_score)?;
        }
        if self.last_max_score != 0 {
            os.write_uint32(9, self.last_max_score)?;
        }
        if self.cur_score != 0 {
            os.write_uint32(11, self.cur_score)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogisticsScore {
        LogisticsScore::new()
    }

    fn clear(&mut self) {
        self.map_id = 0;
        self.unlock_level = 0;
        self.reward.clear();
        self.last_level = 0;
        self.max_score = 0;
        self.last_max_score = 0;
        self.cur_score = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogisticsScore {
        static instance: LogisticsScore = LogisticsScore {
            map_id: 0,
            unlock_level: 0,
            reward: ::protobuf::MessageField::none(),
            last_level: 0,
            max_score: 0,
            last_max_score: 0,
            cur_score: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogisticsScore {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogisticsScore").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogisticsScore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogisticsScore {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14LogisticsScore.proto\x1a\x0eItemList.proto\"\xec\x01\n\x0eLogistic\
    sScore\x12\x15\n\x06map_id\x18\x03\x20\x01(\rR\x05mapId\x12!\n\x0cunlock\
    _level\x18\x0c\x20\x01(\rR\x0bunlockLevel\x12!\n\x06reward\x18\x08\x20\
    \x01(\x0b2\t.ItemListR\x06reward\x12\x1d\n\nlast_level\x18\x01\x20\x01(\
    \rR\tlastLevel\x12\x1b\n\tmax_score\x18\x07\x20\x01(\rR\x08maxScore\x12$\
    \n\x0elast_max_score\x18\t\x20\x01(\rR\x0clastMaxScore\x12\x1b\n\tcur_sc\
    ore\x18\x0b\x20\x01(\rR\x08curScoreb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ItemList::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LogisticsScore::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
