// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PPKGJKIFELK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PPKGJKIFELK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PPKGJKIFELK {
    // message oneof groups
    pub PPHBGCABELF: ::std::option::Option<ppkgjkifelk::PPHBGCABELF>,
    // special fields
    // @@protoc_insertion_point(special_field:PPKGJKIFELK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PPKGJKIFELK {
    fn default() -> &'a PPKGJKIFELK {
        <PPKGJKIFELK as ::protobuf::Message>::default_instance()
    }
}

impl PPKGJKIFELK {
    pub fn new() -> PPKGJKIFELK {
        ::std::default::Default::default()
    }

    // .OKFGJEIHLJM MAPLOGDNBGB = 44;

    pub fn MAPLOGDNBGB(&self) -> &super::OKFGJEIHLJM::OKFGJEIHLJM {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(ref v)) => v,
            _ => <super::OKFGJEIHLJM::OKFGJEIHLJM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MAPLOGDNBGB(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_MAPLOGDNBGB(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MAPLOGDNBGB(&mut self, v: super::OKFGJEIHLJM::OKFGJEIHLJM) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MAPLOGDNBGB(&mut self) -> &mut super::OKFGJEIHLJM::OKFGJEIHLJM {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(super::OKFGJEIHLJM::OKFGJEIHLJM::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MAPLOGDNBGB(&mut self) -> super::OKFGJEIHLJM::OKFGJEIHLJM {
        if self.has_MAPLOGDNBGB() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OKFGJEIHLJM::OKFGJEIHLJM::new()
        }
    }

    // .KMBDKDLNHMC EKFLEJANKME = 647;

    pub fn EKFLEJANKME(&self) -> &super::KMBDKDLNHMC::KMBDKDLNHMC {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(ref v)) => v,
            _ => <super::KMBDKDLNHMC::KMBDKDLNHMC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EKFLEJANKME(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_EKFLEJANKME(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EKFLEJANKME(&mut self, v: super::KMBDKDLNHMC::KMBDKDLNHMC) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EKFLEJANKME(&mut self) -> &mut super::KMBDKDLNHMC::KMBDKDLNHMC {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(super::KMBDKDLNHMC::KMBDKDLNHMC::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EKFLEJANKME(&mut self) -> super::KMBDKDLNHMC::KMBDKDLNHMC {
        if self.has_EKFLEJANKME() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KMBDKDLNHMC::KMBDKDLNHMC::new()
        }
    }

    // .JNAHOJLCNJA JOBEJAFKECD = 1528;

    pub fn JOBEJAFKECD(&self) -> &super::JNAHOJLCNJA::JNAHOJLCNJA {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(ref v)) => v,
            _ => <super::JNAHOJLCNJA::JNAHOJLCNJA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JOBEJAFKECD(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_JOBEJAFKECD(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JOBEJAFKECD(&mut self, v: super::JNAHOJLCNJA::JNAHOJLCNJA) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JOBEJAFKECD(&mut self) -> &mut super::JNAHOJLCNJA::JNAHOJLCNJA {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(super::JNAHOJLCNJA::JNAHOJLCNJA::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JOBEJAFKECD(&mut self) -> super::JNAHOJLCNJA::JNAHOJLCNJA {
        if self.has_JOBEJAFKECD() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JNAHOJLCNJA::JNAHOJLCNJA::new()
        }
    }

    // .IEFKFKFMEPL DBLBHNPHHKB = 82;

    pub fn DBLBHNPHHKB(&self) -> &super::IEFKFKFMEPL::IEFKFKFMEPL {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(ref v)) => v,
            _ => <super::IEFKFKFMEPL::IEFKFKFMEPL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DBLBHNPHHKB(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_DBLBHNPHHKB(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DBLBHNPHHKB(&mut self, v: super::IEFKFKFMEPL::IEFKFKFMEPL) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DBLBHNPHHKB(&mut self) -> &mut super::IEFKFKFMEPL::IEFKFKFMEPL {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(super::IEFKFKFMEPL::IEFKFKFMEPL::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DBLBHNPHHKB(&mut self) -> super::IEFKFKFMEPL::IEFKFKFMEPL {
        if self.has_DBLBHNPHHKB() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IEFKFKFMEPL::IEFKFKFMEPL::new()
        }
    }

    // .FNPMCDNKDFJ CKBNOJAPNNB = 1921;

    pub fn CKBNOJAPNNB(&self) -> &super::FNPMCDNKDFJ::FNPMCDNKDFJ {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(ref v)) => v,
            _ => <super::FNPMCDNKDFJ::FNPMCDNKDFJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CKBNOJAPNNB(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_CKBNOJAPNNB(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CKBNOJAPNNB(&mut self, v: super::FNPMCDNKDFJ::FNPMCDNKDFJ) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CKBNOJAPNNB(&mut self) -> &mut super::FNPMCDNKDFJ::FNPMCDNKDFJ {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(super::FNPMCDNKDFJ::FNPMCDNKDFJ::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CKBNOJAPNNB(&mut self) -> super::FNPMCDNKDFJ::FNPMCDNKDFJ {
        if self.has_CKBNOJAPNNB() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FNPMCDNKDFJ::FNPMCDNKDFJ::new()
        }
    }

    // .BFDDPPLMKPG NEPCONHOFKJ = 1791;

    pub fn NEPCONHOFKJ(&self) -> &super::BFDDPPLMKPG::BFDDPPLMKPG {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(ref v)) => v,
            _ => <super::BFDDPPLMKPG::BFDDPPLMKPG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NEPCONHOFKJ(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_NEPCONHOFKJ(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NEPCONHOFKJ(&mut self, v: super::BFDDPPLMKPG::BFDDPPLMKPG) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NEPCONHOFKJ(&mut self) -> &mut super::BFDDPPLMKPG::BFDDPPLMKPG {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(super::BFDDPPLMKPG::BFDDPPLMKPG::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NEPCONHOFKJ(&mut self) -> super::BFDDPPLMKPG::BFDDPPLMKPG {
        if self.has_NEPCONHOFKJ() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BFDDPPLMKPG::BFDDPPLMKPG::new()
        }
    }

    // .KMLEHLLOGJG EGDGPIKBNLK = 189;

    pub fn EGDGPIKBNLK(&self) -> &super::KMLEHLLOGJG::KMLEHLLOGJG {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(ref v)) => v,
            _ => <super::KMLEHLLOGJG::KMLEHLLOGJG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EGDGPIKBNLK(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_EGDGPIKBNLK(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EGDGPIKBNLK(&mut self, v: super::KMLEHLLOGJG::KMLEHLLOGJG) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EGDGPIKBNLK(&mut self) -> &mut super::KMLEHLLOGJG::KMLEHLLOGJG {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(super::KMLEHLLOGJG::KMLEHLLOGJG::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EGDGPIKBNLK(&mut self) -> super::KMLEHLLOGJG::KMLEHLLOGJG {
        if self.has_EGDGPIKBNLK() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KMLEHLLOGJG::KMLEHLLOGJG::new()
        }
    }

    // .GEGJHBMLOEM BHOFHHEMLOG = 2016;

    pub fn BHOFHHEMLOG(&self) -> &super::GEGJHBMLOEM::GEGJHBMLOEM {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(ref v)) => v,
            _ => <super::GEGJHBMLOEM::GEGJHBMLOEM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BHOFHHEMLOG(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_BHOFHHEMLOG(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BHOFHHEMLOG(&mut self, v: super::GEGJHBMLOEM::GEGJHBMLOEM) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BHOFHHEMLOG(&mut self) -> &mut super::GEGJHBMLOEM::GEGJHBMLOEM {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(super::GEGJHBMLOEM::GEGJHBMLOEM::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BHOFHHEMLOG(&mut self) -> super::GEGJHBMLOEM::GEGJHBMLOEM {
        if self.has_BHOFHHEMLOG() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GEGJHBMLOEM::GEGJHBMLOEM::new()
        }
    }

    // .KAKJCJOMFGH HAEADFOOLND = 568;

    pub fn HAEADFOOLND(&self) -> &super::KAKJCJOMFGH::KAKJCJOMFGH {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(ref v)) => v,
            _ => <super::KAKJCJOMFGH::KAKJCJOMFGH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HAEADFOOLND(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_HAEADFOOLND(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HAEADFOOLND(&mut self, v: super::KAKJCJOMFGH::KAKJCJOMFGH) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HAEADFOOLND(&mut self) -> &mut super::KAKJCJOMFGH::KAKJCJOMFGH {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(super::KAKJCJOMFGH::KAKJCJOMFGH::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HAEADFOOLND(&mut self) -> super::KAKJCJOMFGH::KAKJCJOMFGH {
        if self.has_HAEADFOOLND() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KAKJCJOMFGH::KAKJCJOMFGH::new()
        }
    }

    // .LNDGCGOBDJL GAIBCBGHHGL = 1940;

    pub fn GAIBCBGHHGL(&self) -> &super::LNDGCGOBDJL::LNDGCGOBDJL {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(ref v)) => v,
            _ => <super::LNDGCGOBDJL::LNDGCGOBDJL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GAIBCBGHHGL(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
    }

    pub fn has_GAIBCBGHHGL(&self) -> bool {
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GAIBCBGHHGL(&mut self, v: super::LNDGCGOBDJL::LNDGCGOBDJL) {
        self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GAIBCBGHHGL(&mut self) -> &mut super::LNDGCGOBDJL::LNDGCGOBDJL {
        if let ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(_)) = self.PPHBGCABELF {
        } else {
            self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(super::LNDGCGOBDJL::LNDGCGOBDJL::new()));
        }
        match self.PPHBGCABELF {
            ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GAIBCBGHHGL(&mut self) -> super::LNDGCGOBDJL::LNDGCGOBDJL {
        if self.has_GAIBCBGHHGL() {
            match self.PPHBGCABELF.take() {
                ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LNDGCGOBDJL::LNDGCGOBDJL::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OKFGJEIHLJM::OKFGJEIHLJM>(
            "MAPLOGDNBGB",
            PPKGJKIFELK::has_MAPLOGDNBGB,
            PPKGJKIFELK::MAPLOGDNBGB,
            PPKGJKIFELK::mut_MAPLOGDNBGB,
            PPKGJKIFELK::set_MAPLOGDNBGB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KMBDKDLNHMC::KMBDKDLNHMC>(
            "EKFLEJANKME",
            PPKGJKIFELK::has_EKFLEJANKME,
            PPKGJKIFELK::EKFLEJANKME,
            PPKGJKIFELK::mut_EKFLEJANKME,
            PPKGJKIFELK::set_EKFLEJANKME,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JNAHOJLCNJA::JNAHOJLCNJA>(
            "JOBEJAFKECD",
            PPKGJKIFELK::has_JOBEJAFKECD,
            PPKGJKIFELK::JOBEJAFKECD,
            PPKGJKIFELK::mut_JOBEJAFKECD,
            PPKGJKIFELK::set_JOBEJAFKECD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IEFKFKFMEPL::IEFKFKFMEPL>(
            "DBLBHNPHHKB",
            PPKGJKIFELK::has_DBLBHNPHHKB,
            PPKGJKIFELK::DBLBHNPHHKB,
            PPKGJKIFELK::mut_DBLBHNPHHKB,
            PPKGJKIFELK::set_DBLBHNPHHKB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FNPMCDNKDFJ::FNPMCDNKDFJ>(
            "CKBNOJAPNNB",
            PPKGJKIFELK::has_CKBNOJAPNNB,
            PPKGJKIFELK::CKBNOJAPNNB,
            PPKGJKIFELK::mut_CKBNOJAPNNB,
            PPKGJKIFELK::set_CKBNOJAPNNB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BFDDPPLMKPG::BFDDPPLMKPG>(
            "NEPCONHOFKJ",
            PPKGJKIFELK::has_NEPCONHOFKJ,
            PPKGJKIFELK::NEPCONHOFKJ,
            PPKGJKIFELK::mut_NEPCONHOFKJ,
            PPKGJKIFELK::set_NEPCONHOFKJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KMLEHLLOGJG::KMLEHLLOGJG>(
            "EGDGPIKBNLK",
            PPKGJKIFELK::has_EGDGPIKBNLK,
            PPKGJKIFELK::EGDGPIKBNLK,
            PPKGJKIFELK::mut_EGDGPIKBNLK,
            PPKGJKIFELK::set_EGDGPIKBNLK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GEGJHBMLOEM::GEGJHBMLOEM>(
            "BHOFHHEMLOG",
            PPKGJKIFELK::has_BHOFHHEMLOG,
            PPKGJKIFELK::BHOFHHEMLOG,
            PPKGJKIFELK::mut_BHOFHHEMLOG,
            PPKGJKIFELK::set_BHOFHHEMLOG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KAKJCJOMFGH::KAKJCJOMFGH>(
            "HAEADFOOLND",
            PPKGJKIFELK::has_HAEADFOOLND,
            PPKGJKIFELK::HAEADFOOLND,
            PPKGJKIFELK::mut_HAEADFOOLND,
            PPKGJKIFELK::set_HAEADFOOLND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LNDGCGOBDJL::LNDGCGOBDJL>(
            "GAIBCBGHHGL",
            PPKGJKIFELK::has_GAIBCBGHHGL,
            PPKGJKIFELK::GAIBCBGHHGL,
            PPKGJKIFELK::mut_GAIBCBGHHGL,
            PPKGJKIFELK::set_GAIBCBGHHGL,
        ));
        oneofs.push(ppkgjkifelk::PPHBGCABELF::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PPKGJKIFELK>(
            "PPKGJKIFELK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PPKGJKIFELK {
    const NAME: &'static str = "PPKGJKIFELK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                354 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(is.read_message()?));
                },
                5178 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(is.read_message()?));
                },
                12226 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(is.read_message()?));
                },
                658 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(is.read_message()?));
                },
                15370 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(is.read_message()?));
                },
                14330 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(is.read_message()?));
                },
                1514 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(is.read_message()?));
                },
                16130 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(is.read_message()?));
                },
                4546 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(is.read_message()?));
                },
                15522 => {
                    self.PPHBGCABELF = ::std::option::Option::Some(ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.PPHBGCABELF {
            match v {
                &ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.PPHBGCABELF {
            match v {
                &ppkgjkifelk::PPHBGCABELF::MAPLOGDNBGB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(44, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::EKFLEJANKME(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(647, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::JOBEJAFKECD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1528, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::DBLBHNPHHKB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(82, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::CKBNOJAPNNB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1921, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::NEPCONHOFKJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1791, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::EGDGPIKBNLK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(189, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::BHOFHHEMLOG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2016, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::HAEADFOOLND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(568, v, os)?;
                },
                &ppkgjkifelk::PPHBGCABELF::GAIBCBGHHGL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1940, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PPKGJKIFELK {
        PPKGJKIFELK::new()
    }

    fn clear(&mut self) {
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.PPHBGCABELF = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PPKGJKIFELK {
        static instance: PPKGJKIFELK = PPKGJKIFELK {
            PPHBGCABELF: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PPKGJKIFELK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PPKGJKIFELK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PPKGJKIFELK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PPKGJKIFELK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PPKGJKIFELK`
pub mod ppkgjkifelk {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PPKGJKIFELK.PPHBGCABELF)
    pub enum PPHBGCABELF {
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.MAPLOGDNBGB)
        MAPLOGDNBGB(super::super::OKFGJEIHLJM::OKFGJEIHLJM),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.EKFLEJANKME)
        EKFLEJANKME(super::super::KMBDKDLNHMC::KMBDKDLNHMC),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.JOBEJAFKECD)
        JOBEJAFKECD(super::super::JNAHOJLCNJA::JNAHOJLCNJA),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.DBLBHNPHHKB)
        DBLBHNPHHKB(super::super::IEFKFKFMEPL::IEFKFKFMEPL),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.CKBNOJAPNNB)
        CKBNOJAPNNB(super::super::FNPMCDNKDFJ::FNPMCDNKDFJ),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.NEPCONHOFKJ)
        NEPCONHOFKJ(super::super::BFDDPPLMKPG::BFDDPPLMKPG),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.EGDGPIKBNLK)
        EGDGPIKBNLK(super::super::KMLEHLLOGJG::KMLEHLLOGJG),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.BHOFHHEMLOG)
        BHOFHHEMLOG(super::super::GEGJHBMLOEM::GEGJHBMLOEM),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.HAEADFOOLND)
        HAEADFOOLND(super::super::KAKJCJOMFGH::KAKJCJOMFGH),
        // @@protoc_insertion_point(oneof_field:PPKGJKIFELK.GAIBCBGHHGL)
        GAIBCBGHHGL(super::super::LNDGCGOBDJL::LNDGCGOBDJL),
    }

    impl ::protobuf::Oneof for PPHBGCABELF {
    }

    impl ::protobuf::OneofFull for PPHBGCABELF {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PPKGJKIFELK as ::protobuf::MessageFull>::descriptor().oneof_by_name("PPHBGCABELF").unwrap()).clone()
        }
    }

    impl PPHBGCABELF {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<PPHBGCABELF>("PPHBGCABELF")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PPKGJKIFELK.proto\x1a\x11BFDDPPLMKPG.proto\x1a\x11FNPMCDNKDFJ.prot\
    o\x1a\x11GEGJHBMLOEM.proto\x1a\x11IEFKFKFMEPL.proto\x1a\x11JNAHOJLCNJA.p\
    roto\x1a\x11KAKJCJOMFGH.proto\x1a\x11KMBDKDLNHMC.proto\x1a\x11KMLEHLLOGJ\
    G.proto\x1a\x11LNDGCGOBDJL.proto\x1a\x11OKFGJEIHLJM.proto\"\x98\x04\n\
    \x0bPPKGJKIFELK\x120\n\x0bMAPLOGDNBGB\x18,\x20\x01(\x0b2\x0c.OKFGJEIHLJM\
    H\0R\x0bMAPLOGDNBGB\x121\n\x0bEKFLEJANKME\x18\x87\x05\x20\x01(\x0b2\x0c.\
    KMBDKDLNHMCH\0R\x0bEKFLEJANKME\x121\n\x0bJOBEJAFKECD\x18\xf8\x0b\x20\x01\
    (\x0b2\x0c.JNAHOJLCNJAH\0R\x0bJOBEJAFKECD\x120\n\x0bDBLBHNPHHKB\x18R\x20\
    \x01(\x0b2\x0c.IEFKFKFMEPLH\0R\x0bDBLBHNPHHKB\x121\n\x0bCKBNOJAPNNB\x18\
    \x81\x0f\x20\x01(\x0b2\x0c.FNPMCDNKDFJH\0R\x0bCKBNOJAPNNB\x121\n\x0bNEPC\
    ONHOFKJ\x18\xff\r\x20\x01(\x0b2\x0c.BFDDPPLMKPGH\0R\x0bNEPCONHOFKJ\x121\
    \n\x0bEGDGPIKBNLK\x18\xbd\x01\x20\x01(\x0b2\x0c.KMLEHLLOGJGH\0R\x0bEGDGP\
    IKBNLK\x121\n\x0bBHOFHHEMLOG\x18\xe0\x0f\x20\x01(\x0b2\x0c.GEGJHBMLOEMH\
    \0R\x0bBHOFHHEMLOG\x121\n\x0bHAEADFOOLND\x18\xb8\x04\x20\x01(\x0b2\x0c.K\
    AKJCJOMFGHH\0R\x0bHAEADFOOLND\x121\n\x0bGAIBCBGHHGL\x18\x94\x0f\x20\x01(\
    \x0b2\x0c.LNDGCGOBDJLH\0R\x0bGAIBCBGHHGLB\r\n\x0bPPHBGCABELFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::BFDDPPLMKPG::file_descriptor().clone());
            deps.push(super::FNPMCDNKDFJ::file_descriptor().clone());
            deps.push(super::GEGJHBMLOEM::file_descriptor().clone());
            deps.push(super::IEFKFKFMEPL::file_descriptor().clone());
            deps.push(super::JNAHOJLCNJA::file_descriptor().clone());
            deps.push(super::KAKJCJOMFGH::file_descriptor().clone());
            deps.push(super::KMBDKDLNHMC::file_descriptor().clone());
            deps.push(super::KMLEHLLOGJG::file_descriptor().clone());
            deps.push(super::LNDGCGOBDJL::file_descriptor().clone());
            deps.push(super::OKFGJEIHLJM::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PPKGJKIFELK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
