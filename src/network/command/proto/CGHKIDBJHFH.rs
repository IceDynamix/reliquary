// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CGHKIDBJHFH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:CGHKIDBJHFH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGHKIDBJHFH {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<cghkidbjhfh::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:CGHKIDBJHFH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGHKIDBJHFH {
    fn default() -> &'a CGHKIDBJHFH {
        <CGHKIDBJHFH as ::protobuf::Message>::default_instance()
    }
}

impl CGHKIDBJHFH {
    pub fn new() -> CGHKIDBJHFH {
        ::std::default::Default::default()
    }

    // .NLCALKLPGOG PJABKIFDNND = 9;

    pub fn PJABKIFDNND(&self) -> &super::NLCALKLPGOG::NLCALKLPGOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(ref v)) => v,
            _ => <super::NLCALKLPGOG::NLCALKLPGOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PJABKIFDNND(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PJABKIFDNND(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PJABKIFDNND(&mut self, v: super::NLCALKLPGOG::NLCALKLPGOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PJABKIFDNND(&mut self) -> &mut super::NLCALKLPGOG::NLCALKLPGOG {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(super::NLCALKLPGOG::NLCALKLPGOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PJABKIFDNND(&mut self) -> super::NLCALKLPGOG::NLCALKLPGOG {
        if self.has_PJABKIFDNND() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NLCALKLPGOG::NLCALKLPGOG::new()
        }
    }

    // .OJLEHPPJBBC NIHIFEMOKAM = 13;

    pub fn NIHIFEMOKAM(&self) -> &super::OJLEHPPJBBC::OJLEHPPJBBC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(ref v)) => v,
            _ => <super::OJLEHPPJBBC::OJLEHPPJBBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NIHIFEMOKAM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NIHIFEMOKAM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NIHIFEMOKAM(&mut self, v: super::OJLEHPPJBBC::OJLEHPPJBBC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NIHIFEMOKAM(&mut self) -> &mut super::OJLEHPPJBBC::OJLEHPPJBBC {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(super::OJLEHPPJBBC::OJLEHPPJBBC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NIHIFEMOKAM(&mut self) -> super::OJLEHPPJBBC::OJLEHPPJBBC {
        if self.has_NIHIFEMOKAM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OJLEHPPJBBC::OJLEHPPJBBC::new()
        }
    }

    // .OJLEHPPJBBC MLCGALIHAIP = 12;

    pub fn MLCGALIHAIP(&self) -> &super::OJLEHPPJBBC::OJLEHPPJBBC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(ref v)) => v,
            _ => <super::OJLEHPPJBBC::OJLEHPPJBBC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MLCGALIHAIP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MLCGALIHAIP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MLCGALIHAIP(&mut self, v: super::OJLEHPPJBBC::OJLEHPPJBBC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MLCGALIHAIP(&mut self) -> &mut super::OJLEHPPJBBC::OJLEHPPJBBC {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(super::OJLEHPPJBBC::OJLEHPPJBBC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MLCGALIHAIP(&mut self) -> super::OJLEHPPJBBC::OJLEHPPJBBC {
        if self.has_MLCGALIHAIP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OJLEHPPJBBC::OJLEHPPJBBC::new()
        }
    }

    // .OCJGNPIFOBM BIDDDNIPBLE = 7;

    pub fn BIDDDNIPBLE(&self) -> &super::OCJGNPIFOBM::OCJGNPIFOBM {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(ref v)) => v,
            _ => <super::OCJGNPIFOBM::OCJGNPIFOBM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BIDDDNIPBLE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BIDDDNIPBLE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BIDDDNIPBLE(&mut self, v: super::OCJGNPIFOBM::OCJGNPIFOBM) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BIDDDNIPBLE(&mut self) -> &mut super::OCJGNPIFOBM::OCJGNPIFOBM {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(super::OCJGNPIFOBM::OCJGNPIFOBM::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BIDDDNIPBLE(&mut self) -> super::OCJGNPIFOBM::OCJGNPIFOBM {
        if self.has_BIDDDNIPBLE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OCJGNPIFOBM::OCJGNPIFOBM::new()
        }
    }

    // .NMENKIGNBCA DIJHPEHONOK = 8;

    pub fn DIJHPEHONOK(&self) -> &super::NMENKIGNBCA::NMENKIGNBCA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(ref v)) => v,
            _ => <super::NMENKIGNBCA::NMENKIGNBCA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DIJHPEHONOK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DIJHPEHONOK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DIJHPEHONOK(&mut self, v: super::NMENKIGNBCA::NMENKIGNBCA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DIJHPEHONOK(&mut self) -> &mut super::NMENKIGNBCA::NMENKIGNBCA {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(super::NMENKIGNBCA::NMENKIGNBCA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DIJHPEHONOK(&mut self) -> super::NMENKIGNBCA::NMENKIGNBCA {
        if self.has_DIJHPEHONOK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NMENKIGNBCA::NMENKIGNBCA::new()
        }
    }

    // .NIGCOPGHAMJ EDHBKECGOLI = 11;

    pub fn EDHBKECGOLI(&self) -> &super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(ref v)) => v,
            _ => <super::NIGCOPGHAMJ::NIGCOPGHAMJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EDHBKECGOLI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_EDHBKECGOLI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EDHBKECGOLI(&mut self, v: super::NIGCOPGHAMJ::NIGCOPGHAMJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EDHBKECGOLI(&mut self) -> &mut super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(super::NIGCOPGHAMJ::NIGCOPGHAMJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EDHBKECGOLI(&mut self) -> super::NIGCOPGHAMJ::NIGCOPGHAMJ {
        if self.has_EDHBKECGOLI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NIGCOPGHAMJ::NIGCOPGHAMJ::new()
        }
    }

    // .HJKDNGIHMAA MFHBHKIMDCA = 1;

    pub fn MFHBHKIMDCA(&self) -> &super::HJKDNGIHMAA::HJKDNGIHMAA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(ref v)) => v,
            _ => <super::HJKDNGIHMAA::HJKDNGIHMAA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MFHBHKIMDCA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MFHBHKIMDCA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MFHBHKIMDCA(&mut self, v: super::HJKDNGIHMAA::HJKDNGIHMAA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MFHBHKIMDCA(&mut self) -> &mut super::HJKDNGIHMAA::HJKDNGIHMAA {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(super::HJKDNGIHMAA::HJKDNGIHMAA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MFHBHKIMDCA(&mut self) -> super::HJKDNGIHMAA::HJKDNGIHMAA {
        if self.has_MFHBHKIMDCA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HJKDNGIHMAA::HJKDNGIHMAA::new()
        }
    }

    // uint32 NPFPAJLCLNN = 14;

    pub fn NPFPAJLCLNN(&self) -> u32 {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_NPFPAJLCLNN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NPFPAJLCLNN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NPFPAJLCLNN(&mut self, v: u32) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(v))
    }

    // uint32 IOMGDIKELIA = 1621;

    pub fn IOMGDIKELIA(&self) -> u32 {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_IOMGDIKELIA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IOMGDIKELIA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOMGDIKELIA(&mut self, v: u32) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(v))
    }

    // .KHCAKPOMGNK GKAHDHELILD = 2033;

    pub fn GKAHDHELILD(&self) -> &super::KHCAKPOMGNK::KHCAKPOMGNK {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(ref v)) => v,
            _ => <super::KHCAKPOMGNK::KHCAKPOMGNK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GKAHDHELILD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GKAHDHELILD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GKAHDHELILD(&mut self, v: super::KHCAKPOMGNK::KHCAKPOMGNK) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GKAHDHELILD(&mut self) -> &mut super::KHCAKPOMGNK::KHCAKPOMGNK {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(super::KHCAKPOMGNK::KHCAKPOMGNK::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GKAHDHELILD(&mut self) -> super::KHCAKPOMGNK::KHCAKPOMGNK {
        if self.has_GKAHDHELILD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHCAKPOMGNK::KHCAKPOMGNK::new()
        }
    }

    // .KHPHAIFNJEI GNPEAMELJDJ = 279;

    pub fn GNPEAMELJDJ(&self) -> &super::KHPHAIFNJEI::KHPHAIFNJEI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(ref v)) => v,
            _ => <super::KHPHAIFNJEI::KHPHAIFNJEI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GNPEAMELJDJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GNPEAMELJDJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GNPEAMELJDJ(&mut self, v: super::KHPHAIFNJEI::KHPHAIFNJEI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GNPEAMELJDJ(&mut self) -> &mut super::KHPHAIFNJEI::KHPHAIFNJEI {
        if let ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(super::KHPHAIFNJEI::KHPHAIFNJEI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GNPEAMELJDJ(&mut self) -> super::KHPHAIFNJEI::KHPHAIFNJEI {
        if self.has_GNPEAMELJDJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KHPHAIFNJEI::KHPHAIFNJEI::new()
        }
    }

    // uint32 CBAKIHCDENP = 1686;

    pub fn CBAKIHCDENP(&self) -> u32 {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_CBAKIHCDENP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CBAKIHCDENP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CBAKIHCDENP(&mut self, v: u32) {
        self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NLCALKLPGOG::NLCALKLPGOG>(
            "PJABKIFDNND",
            CGHKIDBJHFH::has_PJABKIFDNND,
            CGHKIDBJHFH::PJABKIFDNND,
            CGHKIDBJHFH::mut_PJABKIFDNND,
            CGHKIDBJHFH::set_PJABKIFDNND,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OJLEHPPJBBC::OJLEHPPJBBC>(
            "NIHIFEMOKAM",
            CGHKIDBJHFH::has_NIHIFEMOKAM,
            CGHKIDBJHFH::NIHIFEMOKAM,
            CGHKIDBJHFH::mut_NIHIFEMOKAM,
            CGHKIDBJHFH::set_NIHIFEMOKAM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OJLEHPPJBBC::OJLEHPPJBBC>(
            "MLCGALIHAIP",
            CGHKIDBJHFH::has_MLCGALIHAIP,
            CGHKIDBJHFH::MLCGALIHAIP,
            CGHKIDBJHFH::mut_MLCGALIHAIP,
            CGHKIDBJHFH::set_MLCGALIHAIP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OCJGNPIFOBM::OCJGNPIFOBM>(
            "BIDDDNIPBLE",
            CGHKIDBJHFH::has_BIDDDNIPBLE,
            CGHKIDBJHFH::BIDDDNIPBLE,
            CGHKIDBJHFH::mut_BIDDDNIPBLE,
            CGHKIDBJHFH::set_BIDDDNIPBLE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NMENKIGNBCA::NMENKIGNBCA>(
            "DIJHPEHONOK",
            CGHKIDBJHFH::has_DIJHPEHONOK,
            CGHKIDBJHFH::DIJHPEHONOK,
            CGHKIDBJHFH::mut_DIJHPEHONOK,
            CGHKIDBJHFH::set_DIJHPEHONOK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NIGCOPGHAMJ::NIGCOPGHAMJ>(
            "EDHBKECGOLI",
            CGHKIDBJHFH::has_EDHBKECGOLI,
            CGHKIDBJHFH::EDHBKECGOLI,
            CGHKIDBJHFH::mut_EDHBKECGOLI,
            CGHKIDBJHFH::set_EDHBKECGOLI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HJKDNGIHMAA::HJKDNGIHMAA>(
            "MFHBHKIMDCA",
            CGHKIDBJHFH::has_MFHBHKIMDCA,
            CGHKIDBJHFH::MFHBHKIMDCA,
            CGHKIDBJHFH::mut_MFHBHKIMDCA,
            CGHKIDBJHFH::set_MFHBHKIMDCA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "NPFPAJLCLNN",
            CGHKIDBJHFH::has_NPFPAJLCLNN,
            CGHKIDBJHFH::NPFPAJLCLNN,
            CGHKIDBJHFH::set_NPFPAJLCLNN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "IOMGDIKELIA",
            CGHKIDBJHFH::has_IOMGDIKELIA,
            CGHKIDBJHFH::IOMGDIKELIA,
            CGHKIDBJHFH::set_IOMGDIKELIA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHCAKPOMGNK::KHCAKPOMGNK>(
            "GKAHDHELILD",
            CGHKIDBJHFH::has_GKAHDHELILD,
            CGHKIDBJHFH::GKAHDHELILD,
            CGHKIDBJHFH::mut_GKAHDHELILD,
            CGHKIDBJHFH::set_GKAHDHELILD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KHPHAIFNJEI::KHPHAIFNJEI>(
            "GNPEAMELJDJ",
            CGHKIDBJHFH::has_GNPEAMELJDJ,
            CGHKIDBJHFH::GNPEAMELJDJ,
            CGHKIDBJHFH::mut_GNPEAMELJDJ,
            CGHKIDBJHFH::set_GNPEAMELJDJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "CBAKIHCDENP",
            CGHKIDBJHFH::has_CBAKIHCDENP,
            CGHKIDBJHFH::CBAKIHCDENP,
            CGHKIDBJHFH::set_CBAKIHCDENP,
        ));
        oneofs.push(cghkidbjhfh::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGHKIDBJHFH>(
            "CGHKIDBJHFH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGHKIDBJHFH {
    const NAME: &'static str = "CGHKIDBJHFH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(is.read_message()?));
                },
                106 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(is.read_message()?));
                },
                98 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(is.read_message()?));
                },
                58 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(is.read_message()?));
                },
                66 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(is.read_message()?));
                },
                90 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(is.read_message()?));
                },
                10 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(is.read_message()?));
                },
                112 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(is.read_uint32()?));
                },
                12968 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(is.read_uint32()?));
                },
                16266 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(is.read_message()?));
                },
                2234 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(is.read_message()?));
                },
                13488 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(is.read_uint32()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(v) => {
                    my_size += ::protobuf::rt::uint32_size(14, v);
                },
                &cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(v) => {
                    my_size += ::protobuf::rt::uint32_size(1621, v);
                },
                &cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(v) => {
                    my_size += ::protobuf::rt::uint32_size(1686, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &cghkidbjhfh::KFELKJLDKEH::PJABKIFDNND(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::NIHIFEMOKAM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::MLCGALIHAIP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::BIDDDNIPBLE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::DIJHPEHONOK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::EDHBKECGOLI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::MFHBHKIMDCA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::NPFPAJLCLNN(v) => {
                    os.write_uint32(14, v)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::IOMGDIKELIA(v) => {
                    os.write_uint32(1621, v)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::GKAHDHELILD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2033, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::GNPEAMELJDJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(279, v, os)?;
                },
                &cghkidbjhfh::KFELKJLDKEH::CBAKIHCDENP(v) => {
                    os.write_uint32(1686, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGHKIDBJHFH {
        CGHKIDBJHFH::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGHKIDBJHFH {
        static instance: CGHKIDBJHFH = CGHKIDBJHFH {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGHKIDBJHFH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGHKIDBJHFH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGHKIDBJHFH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGHKIDBJHFH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGHKIDBJHFH`
pub mod cghkidbjhfh {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CGHKIDBJHFH.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.PJABKIFDNND)
        PJABKIFDNND(super::super::NLCALKLPGOG::NLCALKLPGOG),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.NIHIFEMOKAM)
        NIHIFEMOKAM(super::super::OJLEHPPJBBC::OJLEHPPJBBC),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.MLCGALIHAIP)
        MLCGALIHAIP(super::super::OJLEHPPJBBC::OJLEHPPJBBC),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.BIDDDNIPBLE)
        BIDDDNIPBLE(super::super::OCJGNPIFOBM::OCJGNPIFOBM),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.DIJHPEHONOK)
        DIJHPEHONOK(super::super::NMENKIGNBCA::NMENKIGNBCA),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.EDHBKECGOLI)
        EDHBKECGOLI(super::super::NIGCOPGHAMJ::NIGCOPGHAMJ),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.MFHBHKIMDCA)
        MFHBHKIMDCA(super::super::HJKDNGIHMAA::HJKDNGIHMAA),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.NPFPAJLCLNN)
        NPFPAJLCLNN(u32),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.IOMGDIKELIA)
        IOMGDIKELIA(u32),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.GKAHDHELILD)
        GKAHDHELILD(super::super::KHCAKPOMGNK::KHCAKPOMGNK),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.GNPEAMELJDJ)
        GNPEAMELJDJ(super::super::KHPHAIFNJEI::KHPHAIFNJEI),
        // @@protoc_insertion_point(oneof_field:CGHKIDBJHFH.CBAKIHCDENP)
        CBAKIHCDENP(u32),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CGHKIDBJHFH as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CGHKIDBJHFH.proto\x1a\x11HJKDNGIHMAA.proto\x1a\x11KHCAKPOMGNK.prot\
    o\x1a\x11KHPHAIFNJEI.proto\x1a\x11NIGCOPGHAMJ.proto\x1a\x11NLCALKLPGOG.p\
    roto\x1a\x11NMENKIGNBCA.proto\x1a\x11OCJGNPIFOBM.proto\x1a\x11OJLEHPPJBB\
    C.proto\"\xce\x04\n\x0bCGHKIDBJHFH\x120\n\x0bPJABKIFDNND\x18\t\x20\x01(\
    \x0b2\x0c.NLCALKLPGOGH\0R\x0bPJABKIFDNND\x120\n\x0bNIHIFEMOKAM\x18\r\x20\
    \x01(\x0b2\x0c.OJLEHPPJBBCH\0R\x0bNIHIFEMOKAM\x120\n\x0bMLCGALIHAIP\x18\
    \x0c\x20\x01(\x0b2\x0c.OJLEHPPJBBCH\0R\x0bMLCGALIHAIP\x120\n\x0bBIDDDNIP\
    BLE\x18\x07\x20\x01(\x0b2\x0c.OCJGNPIFOBMH\0R\x0bBIDDDNIPBLE\x120\n\x0bD\
    IJHPEHONOK\x18\x08\x20\x01(\x0b2\x0c.NMENKIGNBCAH\0R\x0bDIJHPEHONOK\x120\
    \n\x0bEDHBKECGOLI\x18\x0b\x20\x01(\x0b2\x0c.NIGCOPGHAMJH\0R\x0bEDHBKECGO\
    LI\x120\n\x0bMFHBHKIMDCA\x18\x01\x20\x01(\x0b2\x0c.HJKDNGIHMAAH\0R\x0bMF\
    HBHKIMDCA\x12\"\n\x0bNPFPAJLCLNN\x18\x0e\x20\x01(\rH\0R\x0bNPFPAJLCLNN\
    \x12#\n\x0bIOMGDIKELIA\x18\xd5\x0c\x20\x01(\rH\0R\x0bIOMGDIKELIA\x121\n\
    \x0bGKAHDHELILD\x18\xf1\x0f\x20\x01(\x0b2\x0c.KHCAKPOMGNKH\0R\x0bGKAHDHE\
    LILD\x121\n\x0bGNPEAMELJDJ\x18\x97\x02\x20\x01(\x0b2\x0c.KHPHAIFNJEIH\0R\
    \x0bGNPEAMELJDJ\x12#\n\x0bCBAKIHCDENP\x18\x96\r\x20\x01(\rH\0R\x0bCBAKIH\
    CDENPB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::HJKDNGIHMAA::file_descriptor().clone());
            deps.push(super::KHCAKPOMGNK::file_descriptor().clone());
            deps.push(super::KHPHAIFNJEI::file_descriptor().clone());
            deps.push(super::NIGCOPGHAMJ::file_descriptor().clone());
            deps.push(super::NLCALKLPGOG::file_descriptor().clone());
            deps.push(super::NMENKIGNBCA::file_descriptor().clone());
            deps.push(super::OCJGNPIFOBM::file_descriptor().clone());
            deps.push(super::OJLEHPPJBBC::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CGHKIDBJHFH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
