// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `LNKFBAEDODI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:LNKFBAEDODI)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LNKFBAEDODI {
    // message fields
    // @@protoc_insertion_point(field:LNKFBAEDODI.DGHNGBLHAIL)
    pub DGHNGBLHAIL: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.MPGPGFKBMHG)
    pub MPGPGFKBMHG: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.GKJKKDAOPAM)
    pub GKJKKDAOPAM: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.OLCCIMLMMAD)
    pub OLCCIMLMMAD: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.ELHEPMNLAPG)
    pub ELHEPMNLAPG: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.PIAMLFBIHPI)
    pub PIAMLFBIHPI: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.CFCAJEMDFKJ)
    pub CFCAJEMDFKJ: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.FEPHHKIGOOP)
    pub FEPHHKIGOOP: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.MOPDHNENCPC)
    pub MOPDHNENCPC: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.EDFPCONIKDC)
    pub EDFPCONIKDC: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.ELGANMDPMID)
    pub ELGANMDPMID: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.HOGHLBEEDGA)
    pub HOGHLBEEDGA: u32,
    // @@protoc_insertion_point(field:LNKFBAEDODI.BIPFIFCJCBN)
    pub BIPFIFCJCBN: u32,
    // special fields
    // @@protoc_insertion_point(special_field:LNKFBAEDODI.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LNKFBAEDODI {
    fn default() -> &'a LNKFBAEDODI {
        <LNKFBAEDODI as ::protobuf::Message>::default_instance()
    }
}

impl LNKFBAEDODI {
    pub fn new() -> LNKFBAEDODI {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DGHNGBLHAIL",
            |m: &LNKFBAEDODI| { &m.DGHNGBLHAIL },
            |m: &mut LNKFBAEDODI| { &mut m.DGHNGBLHAIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MPGPGFKBMHG",
            |m: &LNKFBAEDODI| { &m.MPGPGFKBMHG },
            |m: &mut LNKFBAEDODI| { &mut m.MPGPGFKBMHG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GKJKKDAOPAM",
            |m: &LNKFBAEDODI| { &m.GKJKKDAOPAM },
            |m: &mut LNKFBAEDODI| { &mut m.GKJKKDAOPAM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OLCCIMLMMAD",
            |m: &LNKFBAEDODI| { &m.OLCCIMLMMAD },
            |m: &mut LNKFBAEDODI| { &mut m.OLCCIMLMMAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELHEPMNLAPG",
            |m: &LNKFBAEDODI| { &m.ELHEPMNLAPG },
            |m: &mut LNKFBAEDODI| { &mut m.ELHEPMNLAPG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PIAMLFBIHPI",
            |m: &LNKFBAEDODI| { &m.PIAMLFBIHPI },
            |m: &mut LNKFBAEDODI| { &mut m.PIAMLFBIHPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFCAJEMDFKJ",
            |m: &LNKFBAEDODI| { &m.CFCAJEMDFKJ },
            |m: &mut LNKFBAEDODI| { &mut m.CFCAJEMDFKJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FEPHHKIGOOP",
            |m: &LNKFBAEDODI| { &m.FEPHHKIGOOP },
            |m: &mut LNKFBAEDODI| { &mut m.FEPHHKIGOOP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MOPDHNENCPC",
            |m: &LNKFBAEDODI| { &m.MOPDHNENCPC },
            |m: &mut LNKFBAEDODI| { &mut m.MOPDHNENCPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EDFPCONIKDC",
            |m: &LNKFBAEDODI| { &m.EDFPCONIKDC },
            |m: &mut LNKFBAEDODI| { &mut m.EDFPCONIKDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ELGANMDPMID",
            |m: &LNKFBAEDODI| { &m.ELGANMDPMID },
            |m: &mut LNKFBAEDODI| { &mut m.ELGANMDPMID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HOGHLBEEDGA",
            |m: &LNKFBAEDODI| { &m.HOGHLBEEDGA },
            |m: &mut LNKFBAEDODI| { &mut m.HOGHLBEEDGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BIPFIFCJCBN",
            |m: &LNKFBAEDODI| { &m.BIPFIFCJCBN },
            |m: &mut LNKFBAEDODI| { &mut m.BIPFIFCJCBN },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LNKFBAEDODI>(
            "LNKFBAEDODI",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LNKFBAEDODI {
    const NAME: &'static str = "LNKFBAEDODI";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.DGHNGBLHAIL = is.read_uint32()?;
                },
                16 => {
                    self.MPGPGFKBMHG = is.read_uint32()?;
                },
                24 => {
                    self.GKJKKDAOPAM = is.read_uint32()?;
                },
                32 => {
                    self.OLCCIMLMMAD = is.read_uint32()?;
                },
                40 => {
                    self.ELHEPMNLAPG = is.read_uint32()?;
                },
                48 => {
                    self.PIAMLFBIHPI = is.read_uint32()?;
                },
                56 => {
                    self.CFCAJEMDFKJ = is.read_uint32()?;
                },
                64 => {
                    self.FEPHHKIGOOP = is.read_uint32()?;
                },
                72 => {
                    self.MOPDHNENCPC = is.read_uint32()?;
                },
                80 => {
                    self.EDFPCONIKDC = is.read_uint32()?;
                },
                88 => {
                    self.ELGANMDPMID = is.read_uint32()?;
                },
                96 => {
                    self.HOGHLBEEDGA = is.read_uint32()?;
                },
                104 => {
                    self.BIPFIFCJCBN = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.DGHNGBLHAIL != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.DGHNGBLHAIL);
        }
        if self.MPGPGFKBMHG != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.MPGPGFKBMHG);
        }
        if self.GKJKKDAOPAM != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.GKJKKDAOPAM);
        }
        if self.OLCCIMLMMAD != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.OLCCIMLMMAD);
        }
        if self.ELHEPMNLAPG != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.ELHEPMNLAPG);
        }
        if self.PIAMLFBIHPI != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.PIAMLFBIHPI);
        }
        if self.CFCAJEMDFKJ != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.CFCAJEMDFKJ);
        }
        if self.FEPHHKIGOOP != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.FEPHHKIGOOP);
        }
        if self.MOPDHNENCPC != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.MOPDHNENCPC);
        }
        if self.EDFPCONIKDC != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.EDFPCONIKDC);
        }
        if self.ELGANMDPMID != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.ELGANMDPMID);
        }
        if self.HOGHLBEEDGA != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.HOGHLBEEDGA);
        }
        if self.BIPFIFCJCBN != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.BIPFIFCJCBN);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.DGHNGBLHAIL != 0 {
            os.write_uint32(1, self.DGHNGBLHAIL)?;
        }
        if self.MPGPGFKBMHG != 0 {
            os.write_uint32(2, self.MPGPGFKBMHG)?;
        }
        if self.GKJKKDAOPAM != 0 {
            os.write_uint32(3, self.GKJKKDAOPAM)?;
        }
        if self.OLCCIMLMMAD != 0 {
            os.write_uint32(4, self.OLCCIMLMMAD)?;
        }
        if self.ELHEPMNLAPG != 0 {
            os.write_uint32(5, self.ELHEPMNLAPG)?;
        }
        if self.PIAMLFBIHPI != 0 {
            os.write_uint32(6, self.PIAMLFBIHPI)?;
        }
        if self.CFCAJEMDFKJ != 0 {
            os.write_uint32(7, self.CFCAJEMDFKJ)?;
        }
        if self.FEPHHKIGOOP != 0 {
            os.write_uint32(8, self.FEPHHKIGOOP)?;
        }
        if self.MOPDHNENCPC != 0 {
            os.write_uint32(9, self.MOPDHNENCPC)?;
        }
        if self.EDFPCONIKDC != 0 {
            os.write_uint32(10, self.EDFPCONIKDC)?;
        }
        if self.ELGANMDPMID != 0 {
            os.write_uint32(11, self.ELGANMDPMID)?;
        }
        if self.HOGHLBEEDGA != 0 {
            os.write_uint32(12, self.HOGHLBEEDGA)?;
        }
        if self.BIPFIFCJCBN != 0 {
            os.write_uint32(13, self.BIPFIFCJCBN)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LNKFBAEDODI {
        LNKFBAEDODI::new()
    }

    fn clear(&mut self) {
        self.DGHNGBLHAIL = 0;
        self.MPGPGFKBMHG = 0;
        self.GKJKKDAOPAM = 0;
        self.OLCCIMLMMAD = 0;
        self.ELHEPMNLAPG = 0;
        self.PIAMLFBIHPI = 0;
        self.CFCAJEMDFKJ = 0;
        self.FEPHHKIGOOP = 0;
        self.MOPDHNENCPC = 0;
        self.EDFPCONIKDC = 0;
        self.ELGANMDPMID = 0;
        self.HOGHLBEEDGA = 0;
        self.BIPFIFCJCBN = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LNKFBAEDODI {
        static instance: LNKFBAEDODI = LNKFBAEDODI {
            DGHNGBLHAIL: 0,
            MPGPGFKBMHG: 0,
            GKJKKDAOPAM: 0,
            OLCCIMLMMAD: 0,
            ELHEPMNLAPG: 0,
            PIAMLFBIHPI: 0,
            CFCAJEMDFKJ: 0,
            FEPHHKIGOOP: 0,
            MOPDHNENCPC: 0,
            EDFPCONIKDC: 0,
            ELGANMDPMID: 0,
            HOGHLBEEDGA: 0,
            BIPFIFCJCBN: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LNKFBAEDODI {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LNKFBAEDODI").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LNKFBAEDODI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LNKFBAEDODI {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11LNKFBAEDODI.proto\"\xc7\x03\n\x0bLNKFBAEDODI\x12\x20\n\x0bDGHNGBLH\
    AIL\x18\x01\x20\x01(\rR\x0bDGHNGBLHAIL\x12\x20\n\x0bMPGPGFKBMHG\x18\x02\
    \x20\x01(\rR\x0bMPGPGFKBMHG\x12\x20\n\x0bGKJKKDAOPAM\x18\x03\x20\x01(\rR\
    \x0bGKJKKDAOPAM\x12\x20\n\x0bOLCCIMLMMAD\x18\x04\x20\x01(\rR\x0bOLCCIMLM\
    MAD\x12\x20\n\x0bELHEPMNLAPG\x18\x05\x20\x01(\rR\x0bELHEPMNLAPG\x12\x20\
    \n\x0bPIAMLFBIHPI\x18\x06\x20\x01(\rR\x0bPIAMLFBIHPI\x12\x20\n\x0bCFCAJE\
    MDFKJ\x18\x07\x20\x01(\rR\x0bCFCAJEMDFKJ\x12\x20\n\x0bFEPHHKIGOOP\x18\
    \x08\x20\x01(\rR\x0bFEPHHKIGOOP\x12\x20\n\x0bMOPDHNENCPC\x18\t\x20\x01(\
    \rR\x0bMOPDHNENCPC\x12\x20\n\x0bEDFPCONIKDC\x18\n\x20\x01(\rR\x0bEDFPCON\
    IKDC\x12\x20\n\x0bELGANMDPMID\x18\x0b\x20\x01(\rR\x0bELGANMDPMID\x12\x20\
    \n\x0bHOGHLBEEDGA\x18\x0c\x20\x01(\rR\x0bHOGHLBEEDGA\x12\x20\n\x0bBIPFIF\
    CJCBN\x18\r\x20\x01(\rR\x0bBIPFIFCJCBNb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LNKFBAEDODI::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
