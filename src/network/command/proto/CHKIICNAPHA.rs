// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CHKIICNAPHA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:CHKIICNAPHA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CHKIICNAPHA {
    // message fields
    // @@protoc_insertion_point(field:CHKIICNAPHA.KHCNAJOKJHJ)
    pub KHCNAJOKJHJ: u32,
    // @@protoc_insertion_point(field:CHKIICNAPHA.FJNHDHOHBCL)
    pub FJNHDHOHBCL: u32,
    // message oneof groups
    pub JDICGGKKOOI: ::std::option::Option<chkiicnapha::JDICGGKKOOI>,
    // special fields
    // @@protoc_insertion_point(special_field:CHKIICNAPHA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CHKIICNAPHA {
    fn default() -> &'a CHKIICNAPHA {
        <CHKIICNAPHA as ::protobuf::Message>::default_instance()
    }
}

impl CHKIICNAPHA {
    pub fn new() -> CHKIICNAPHA {
        ::std::default::Default::default()
    }

    // .LDCHNCDFICP MJBENBDBHAJ = 1882;

    pub fn MJBENBDBHAJ(&self) -> &super::LDCHNCDFICP::LDCHNCDFICP {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(ref v)) => v,
            _ => <super::LDCHNCDFICP::LDCHNCDFICP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MJBENBDBHAJ(&mut self) {
        self.JDICGGKKOOI = ::std::option::Option::None;
    }

    pub fn has_MJBENBDBHAJ(&self) -> bool {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MJBENBDBHAJ(&mut self, v: super::LDCHNCDFICP::LDCHNCDFICP) {
        self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MJBENBDBHAJ(&mut self) -> &mut super::LDCHNCDFICP::LDCHNCDFICP {
        if let ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(_)) = self.JDICGGKKOOI {
        } else {
            self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(super::LDCHNCDFICP::LDCHNCDFICP::new()));
        }
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MJBENBDBHAJ(&mut self) -> super::LDCHNCDFICP::LDCHNCDFICP {
        if self.has_MJBENBDBHAJ() {
            match self.JDICGGKKOOI.take() {
                ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LDCHNCDFICP::LDCHNCDFICP::new()
        }
    }

    // .LAAIGBDPLJC AJGCMALNLEN = 1695;

    pub fn AJGCMALNLEN(&self) -> &super::LAAIGBDPLJC::LAAIGBDPLJC {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(ref v)) => v,
            _ => <super::LAAIGBDPLJC::LAAIGBDPLJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJGCMALNLEN(&mut self) {
        self.JDICGGKKOOI = ::std::option::Option::None;
    }

    pub fn has_AJGCMALNLEN(&self) -> bool {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJGCMALNLEN(&mut self, v: super::LAAIGBDPLJC::LAAIGBDPLJC) {
        self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJGCMALNLEN(&mut self) -> &mut super::LAAIGBDPLJC::LAAIGBDPLJC {
        if let ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(_)) = self.JDICGGKKOOI {
        } else {
            self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(super::LAAIGBDPLJC::LAAIGBDPLJC::new()));
        }
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJGCMALNLEN(&mut self) -> super::LAAIGBDPLJC::LAAIGBDPLJC {
        if self.has_AJGCMALNLEN() {
            match self.JDICGGKKOOI.take() {
                ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LAAIGBDPLJC::LAAIGBDPLJC::new()
        }
    }

    // .LGNMPMCPOPF BMCKMGINCIA = 1756;

    pub fn BMCKMGINCIA(&self) -> &super::LGNMPMCPOPF::LGNMPMCPOPF {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(ref v)) => v,
            _ => <super::LGNMPMCPOPF::LGNMPMCPOPF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BMCKMGINCIA(&mut self) {
        self.JDICGGKKOOI = ::std::option::Option::None;
    }

    pub fn has_BMCKMGINCIA(&self) -> bool {
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BMCKMGINCIA(&mut self, v: super::LGNMPMCPOPF::LGNMPMCPOPF) {
        self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BMCKMGINCIA(&mut self) -> &mut super::LGNMPMCPOPF::LGNMPMCPOPF {
        if let ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(_)) = self.JDICGGKKOOI {
        } else {
            self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(super::LGNMPMCPOPF::LGNMPMCPOPF::new()));
        }
        match self.JDICGGKKOOI {
            ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BMCKMGINCIA(&mut self) -> super::LGNMPMCPOPF::LGNMPMCPOPF {
        if self.has_BMCKMGINCIA() {
            match self.JDICGGKKOOI.take() {
                ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LGNMPMCPOPF::LGNMPMCPOPF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "KHCNAJOKJHJ",
            |m: &CHKIICNAPHA| { &m.KHCNAJOKJHJ },
            |m: &mut CHKIICNAPHA| { &mut m.KHCNAJOKJHJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FJNHDHOHBCL",
            |m: &CHKIICNAPHA| { &m.FJNHDHOHBCL },
            |m: &mut CHKIICNAPHA| { &mut m.FJNHDHOHBCL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LDCHNCDFICP::LDCHNCDFICP>(
            "MJBENBDBHAJ",
            CHKIICNAPHA::has_MJBENBDBHAJ,
            CHKIICNAPHA::MJBENBDBHAJ,
            CHKIICNAPHA::mut_MJBENBDBHAJ,
            CHKIICNAPHA::set_MJBENBDBHAJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LAAIGBDPLJC::LAAIGBDPLJC>(
            "AJGCMALNLEN",
            CHKIICNAPHA::has_AJGCMALNLEN,
            CHKIICNAPHA::AJGCMALNLEN,
            CHKIICNAPHA::mut_AJGCMALNLEN,
            CHKIICNAPHA::set_AJGCMALNLEN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LGNMPMCPOPF::LGNMPMCPOPF>(
            "BMCKMGINCIA",
            CHKIICNAPHA::has_BMCKMGINCIA,
            CHKIICNAPHA::BMCKMGINCIA,
            CHKIICNAPHA::mut_BMCKMGINCIA,
            CHKIICNAPHA::set_BMCKMGINCIA,
        ));
        oneofs.push(chkiicnapha::JDICGGKKOOI::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CHKIICNAPHA>(
            "CHKIICNAPHA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CHKIICNAPHA {
    const NAME: &'static str = "CHKIICNAPHA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                72 => {
                    self.KHCNAJOKJHJ = is.read_uint32()?;
                },
                16 => {
                    self.FJNHDHOHBCL = is.read_uint32()?;
                },
                15058 => {
                    self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(is.read_message()?));
                },
                13562 => {
                    self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(is.read_message()?));
                },
                14050 => {
                    self.JDICGGKKOOI = ::std::option::Option::Some(chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.KHCNAJOKJHJ != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.KHCNAJOKJHJ);
        }
        if self.FJNHDHOHBCL != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.FJNHDHOHBCL);
        }
        if let ::std::option::Option::Some(ref v) = self.JDICGGKKOOI {
            match v {
                &chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.KHCNAJOKJHJ != 0 {
            os.write_uint32(9, self.KHCNAJOKJHJ)?;
        }
        if self.FJNHDHOHBCL != 0 {
            os.write_uint32(2, self.FJNHDHOHBCL)?;
        }
        if let ::std::option::Option::Some(ref v) = self.JDICGGKKOOI {
            match v {
                &chkiicnapha::JDICGGKKOOI::MJBENBDBHAJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1882, v, os)?;
                },
                &chkiicnapha::JDICGGKKOOI::AJGCMALNLEN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1695, v, os)?;
                },
                &chkiicnapha::JDICGGKKOOI::BMCKMGINCIA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1756, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CHKIICNAPHA {
        CHKIICNAPHA::new()
    }

    fn clear(&mut self) {
        self.KHCNAJOKJHJ = 0;
        self.FJNHDHOHBCL = 0;
        self.JDICGGKKOOI = ::std::option::Option::None;
        self.JDICGGKKOOI = ::std::option::Option::None;
        self.JDICGGKKOOI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CHKIICNAPHA {
        static instance: CHKIICNAPHA = CHKIICNAPHA {
            KHCNAJOKJHJ: 0,
            FJNHDHOHBCL: 0,
            JDICGGKKOOI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CHKIICNAPHA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CHKIICNAPHA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CHKIICNAPHA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CHKIICNAPHA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CHKIICNAPHA`
pub mod chkiicnapha {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CHKIICNAPHA.JDICGGKKOOI)
    pub enum JDICGGKKOOI {
        // @@protoc_insertion_point(oneof_field:CHKIICNAPHA.MJBENBDBHAJ)
        MJBENBDBHAJ(super::super::LDCHNCDFICP::LDCHNCDFICP),
        // @@protoc_insertion_point(oneof_field:CHKIICNAPHA.AJGCMALNLEN)
        AJGCMALNLEN(super::super::LAAIGBDPLJC::LAAIGBDPLJC),
        // @@protoc_insertion_point(oneof_field:CHKIICNAPHA.BMCKMGINCIA)
        BMCKMGINCIA(super::super::LGNMPMCPOPF::LGNMPMCPOPF),
    }

    impl ::protobuf::Oneof for JDICGGKKOOI {
    }

    impl ::protobuf::OneofFull for JDICGGKKOOI {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CHKIICNAPHA as ::protobuf::MessageFull>::descriptor().oneof_by_name("JDICGGKKOOI").unwrap()).clone()
        }
    }

    impl JDICGGKKOOI {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<JDICGGKKOOI>("JDICGGKKOOI")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CHKIICNAPHA.proto\x1a\x11LAAIGBDPLJC.proto\x1a\x11LDCHNCDFICP.prot\
    o\x1a\x11LGNMPMCPOPF.proto\"\xf9\x01\n\x0bCHKIICNAPHA\x12\x20\n\x0bKHCNA\
    JOKJHJ\x18\t\x20\x01(\rR\x0bKHCNAJOKJHJ\x12\x20\n\x0bFJNHDHOHBCL\x18\x02\
    \x20\x01(\rR\x0bFJNHDHOHBCL\x121\n\x0bMJBENBDBHAJ\x18\xda\x0e\x20\x01(\
    \x0b2\x0c.LDCHNCDFICPH\0R\x0bMJBENBDBHAJ\x121\n\x0bAJGCMALNLEN\x18\x9f\r\
    \x20\x01(\x0b2\x0c.LAAIGBDPLJCH\0R\x0bAJGCMALNLEN\x121\n\x0bBMCKMGINCIA\
    \x18\xdc\r\x20\x01(\x0b2\x0c.LGNMPMCPOPFH\0R\x0bBMCKMGINCIAB\r\n\x0bJDIC\
    GGKKOOIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::LAAIGBDPLJC::file_descriptor().clone());
            deps.push(super::LDCHNCDFICP::file_descriptor().clone());
            deps.push(super::LGNMPMCPOPF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CHKIICNAPHA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
