// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SpaceZooDataScRsp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:SpaceZooDataScRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpaceZooDataScRsp {
    // message fields
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.DPLKBEEHPLB)
    pub DPLKBEEHPLB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.BNHNDBNABFN)
    pub BNHNDBNABFN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.AAGIHKBFMFI)
    pub AAGIHKBFMFI: ::std::vec::Vec<super::FAFGMLPADMI::FAFGMLPADMI>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.KMOADEOGAPA)
    pub KMOADEOGAPA: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.PBLCAHNMFJG)
    pub PBLCAHNMFJG: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.INIHLANCNFI)
    pub INIHLANCNFI: ::std::vec::Vec<super::IPJAIINEGEL::IPJAIINEGEL>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.PMCMECDLEMC)
    pub PMCMECDLEMC: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:SpaceZooDataScRsp.KJFHKICGGDE)
    pub KJFHKICGGDE: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SpaceZooDataScRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpaceZooDataScRsp {
    fn default() -> &'a SpaceZooDataScRsp {
        <SpaceZooDataScRsp as ::protobuf::Message>::default_instance()
    }
}

impl SpaceZooDataScRsp {
    pub fn new() -> SpaceZooDataScRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DPLKBEEHPLB",
            |m: &SpaceZooDataScRsp| { &m.DPLKBEEHPLB },
            |m: &mut SpaceZooDataScRsp| { &mut m.DPLKBEEHPLB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BNHNDBNABFN",
            |m: &SpaceZooDataScRsp| { &m.BNHNDBNABFN },
            |m: &mut SpaceZooDataScRsp| { &mut m.BNHNDBNABFN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AAGIHKBFMFI",
            |m: &SpaceZooDataScRsp| { &m.AAGIHKBFMFI },
            |m: &mut SpaceZooDataScRsp| { &mut m.AAGIHKBFMFI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KMOADEOGAPA",
            |m: &SpaceZooDataScRsp| { &m.KMOADEOGAPA },
            |m: &mut SpaceZooDataScRsp| { &mut m.KMOADEOGAPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBLCAHNMFJG",
            |m: &SpaceZooDataScRsp| { &m.PBLCAHNMFJG },
            |m: &mut SpaceZooDataScRsp| { &mut m.PBLCAHNMFJG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &SpaceZooDataScRsp| { &m.retcode },
            |m: &mut SpaceZooDataScRsp| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INIHLANCNFI",
            |m: &SpaceZooDataScRsp| { &m.INIHLANCNFI },
            |m: &mut SpaceZooDataScRsp| { &mut m.INIHLANCNFI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PMCMECDLEMC",
            |m: &SpaceZooDataScRsp| { &m.PMCMECDLEMC },
            |m: &mut SpaceZooDataScRsp| { &mut m.PMCMECDLEMC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "KJFHKICGGDE",
            |m: &SpaceZooDataScRsp| { &m.KJFHKICGGDE },
            |m: &mut SpaceZooDataScRsp| { &mut m.KJFHKICGGDE },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpaceZooDataScRsp>(
            "SpaceZooDataScRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpaceZooDataScRsp {
    const NAME: &'static str = "SpaceZooDataScRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.DPLKBEEHPLB)?;
                },
                48 => {
                    self.DPLKBEEHPLB.push(is.read_uint32()?);
                },
                90 => {
                    is.read_repeated_packed_uint32_into(&mut self.BNHNDBNABFN)?;
                },
                88 => {
                    self.BNHNDBNABFN.push(is.read_uint32()?);
                },
                34 => {
                    self.AAGIHKBFMFI.push(is.read_message()?);
                },
                122 => {
                    is.read_repeated_packed_uint32_into(&mut self.KMOADEOGAPA)?;
                },
                120 => {
                    self.KMOADEOGAPA.push(is.read_uint32()?);
                },
                56 => {
                    self.PBLCAHNMFJG = is.read_uint32()?;
                },
                40 => {
                    self.retcode = is.read_uint32()?;
                },
                18 => {
                    self.INIHLANCNFI.push(is.read_message()?);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.PMCMECDLEMC)?;
                },
                104 => {
                    self.PMCMECDLEMC.push(is.read_uint32()?);
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.KJFHKICGGDE)?;
                },
                64 => {
                    self.KJFHKICGGDE.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.DPLKBEEHPLB);
        my_size += ::protobuf::rt::vec_packed_uint32_size(11, &self.BNHNDBNABFN);
        for value in &self.AAGIHKBFMFI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(15, &self.KMOADEOGAPA);
        if self.PBLCAHNMFJG != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.PBLCAHNMFJG);
        }
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.retcode);
        }
        for value in &self.INIHLANCNFI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(13, &self.PMCMECDLEMC);
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.KJFHKICGGDE);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(6, &self.DPLKBEEHPLB)?;
        os.write_repeated_packed_uint32(11, &self.BNHNDBNABFN)?;
        for v in &self.AAGIHKBFMFI {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_repeated_packed_uint32(15, &self.KMOADEOGAPA)?;
        if self.PBLCAHNMFJG != 0 {
            os.write_uint32(7, self.PBLCAHNMFJG)?;
        }
        if self.retcode != 0 {
            os.write_uint32(5, self.retcode)?;
        }
        for v in &self.INIHLANCNFI {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_repeated_packed_uint32(13, &self.PMCMECDLEMC)?;
        os.write_repeated_packed_uint32(8, &self.KJFHKICGGDE)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpaceZooDataScRsp {
        SpaceZooDataScRsp::new()
    }

    fn clear(&mut self) {
        self.DPLKBEEHPLB.clear();
        self.BNHNDBNABFN.clear();
        self.AAGIHKBFMFI.clear();
        self.KMOADEOGAPA.clear();
        self.PBLCAHNMFJG = 0;
        self.retcode = 0;
        self.INIHLANCNFI.clear();
        self.PMCMECDLEMC.clear();
        self.KJFHKICGGDE.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpaceZooDataScRsp {
        static instance: SpaceZooDataScRsp = SpaceZooDataScRsp {
            DPLKBEEHPLB: ::std::vec::Vec::new(),
            BNHNDBNABFN: ::std::vec::Vec::new(),
            AAGIHKBFMFI: ::std::vec::Vec::new(),
            KMOADEOGAPA: ::std::vec::Vec::new(),
            PBLCAHNMFJG: 0,
            retcode: 0,
            INIHLANCNFI: ::std::vec::Vec::new(),
            PMCMECDLEMC: ::std::vec::Vec::new(),
            KJFHKICGGDE: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpaceZooDataScRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpaceZooDataScRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpaceZooDataScRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpaceZooDataScRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17SpaceZooDataScRsp.proto\x1a\x11FAFGMLPADMI.proto\x1a\x11IPJAIINEGE\
    L.proto\"\xd9\x02\n\x11SpaceZooDataScRsp\x12\x20\n\x0bDPLKBEEHPLB\x18\
    \x06\x20\x03(\rR\x0bDPLKBEEHPLB\x12\x20\n\x0bBNHNDBNABFN\x18\x0b\x20\x03\
    (\rR\x0bBNHNDBNABFN\x12.\n\x0bAAGIHKBFMFI\x18\x04\x20\x03(\x0b2\x0c.FAFG\
    MLPADMIR\x0bAAGIHKBFMFI\x12\x20\n\x0bKMOADEOGAPA\x18\x0f\x20\x03(\rR\x0b\
    KMOADEOGAPA\x12\x20\n\x0bPBLCAHNMFJG\x18\x07\x20\x01(\rR\x0bPBLCAHNMFJG\
    \x12\x18\n\x07retcode\x18\x05\x20\x01(\rR\x07retcode\x12.\n\x0bINIHLANCN\
    FI\x18\x02\x20\x03(\x0b2\x0c.IPJAIINEGELR\x0bINIHLANCNFI\x12\x20\n\x0bPM\
    CMECDLEMC\x18\r\x20\x03(\rR\x0bPMCMECDLEMC\x12\x20\n\x0bKJFHKICGGDE\x18\
    \x08\x20\x03(\rR\x0bKJFHKICGGDEb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::FAFGMLPADMI::file_descriptor().clone());
            deps.push(super::IPJAIINEGEL::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SpaceZooDataScRsp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
