// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EvolveBuildBattleInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:EvolveBuildBattleInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvolveBuildBattleInfo {
    // message fields
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_level_id)
    pub cur_level_id: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_period)
    pub cur_period: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_coin)
    pub cur_coin: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.weapon_slot_list)
    pub weapon_slot_list: ::std::vec::Vec<super::MEOIFIOAECF::MEOIFIOAECF>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.accessory_slot_list)
    pub accessory_slot_list: ::std::vec::Vec<super::MEOIFIOAECF::MEOIFIOAECF>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.ban_gear_list)
    pub ban_gear_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.collection)
    pub collection: ::protobuf::MessageField<super::LGIFEDNKHON::LGIFEDNKHON>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.allowed_gear_list)
    pub allowed_gear_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_exp)
    pub cur_exp: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_reroll)
    pub cur_reroll: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_treasure_miss_cnt)
    pub cur_treasure_miss_cnt: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.period_id_list)
    pub period_id_list: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_gear_lost_cnt)
    pub cur_gear_lost_cnt: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_wave)
    pub cur_wave: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.is_unlock_gear_reroll)
    pub is_unlock_gear_reroll: bool,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.is_unlock_gear_ban)
    pub is_unlock_gear_ban: bool,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.card_list)
    pub card_list: ::std::vec::Vec<super::BHGBOOJEOPF::BHGBOOJEOPF>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.gear_damage_list)
    pub gear_damage_list: ::std::vec::Vec<super::EvolveBuildGearDamageInfo::EvolveBuildGearDamageInfo>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.stat_params)
    pub stat_params: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.is_giveup)
    pub is_giveup: bool,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.cur_unused_round_cnt)
    pub cur_unused_round_cnt: u32,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.stat_log_info)
    pub stat_log_info: ::protobuf::MessageField<super::PMNHMAMHGAI::PMNHMAMHGAI>,
    // @@protoc_insertion_point(field:EvolveBuildBattleInfo.period_first_random_seed)
    pub period_first_random_seed: u32,
    // special fields
    // @@protoc_insertion_point(special_field:EvolveBuildBattleInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvolveBuildBattleInfo {
    fn default() -> &'a EvolveBuildBattleInfo {
        <EvolveBuildBattleInfo as ::protobuf::Message>::default_instance()
    }
}

impl EvolveBuildBattleInfo {
    pub fn new() -> EvolveBuildBattleInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(23);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_level_id",
            |m: &EvolveBuildBattleInfo| { &m.cur_level_id },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_level_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_period",
            |m: &EvolveBuildBattleInfo| { &m.cur_period },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_coin",
            |m: &EvolveBuildBattleInfo| { &m.cur_coin },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_coin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "weapon_slot_list",
            |m: &EvolveBuildBattleInfo| { &m.weapon_slot_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.weapon_slot_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accessory_slot_list",
            |m: &EvolveBuildBattleInfo| { &m.accessory_slot_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.accessory_slot_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ban_gear_list",
            |m: &EvolveBuildBattleInfo| { &m.ban_gear_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.ban_gear_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LGIFEDNKHON::LGIFEDNKHON>(
            "collection",
            |m: &EvolveBuildBattleInfo| { &m.collection },
            |m: &mut EvolveBuildBattleInfo| { &mut m.collection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_gear_list",
            |m: &EvolveBuildBattleInfo| { &m.allowed_gear_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.allowed_gear_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_exp",
            |m: &EvolveBuildBattleInfo| { &m.cur_exp },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_reroll",
            |m: &EvolveBuildBattleInfo| { &m.cur_reroll },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_reroll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_treasure_miss_cnt",
            |m: &EvolveBuildBattleInfo| { &m.cur_treasure_miss_cnt },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_treasure_miss_cnt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "period_id_list",
            |m: &EvolveBuildBattleInfo| { &m.period_id_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.period_id_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_gear_lost_cnt",
            |m: &EvolveBuildBattleInfo| { &m.cur_gear_lost_cnt },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_gear_lost_cnt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_wave",
            |m: &EvolveBuildBattleInfo| { &m.cur_wave },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_wave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_unlock_gear_reroll",
            |m: &EvolveBuildBattleInfo| { &m.is_unlock_gear_reroll },
            |m: &mut EvolveBuildBattleInfo| { &mut m.is_unlock_gear_reroll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_unlock_gear_ban",
            |m: &EvolveBuildBattleInfo| { &m.is_unlock_gear_ban },
            |m: &mut EvolveBuildBattleInfo| { &mut m.is_unlock_gear_ban },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "card_list",
            |m: &EvolveBuildBattleInfo| { &m.card_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.card_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "gear_damage_list",
            |m: &EvolveBuildBattleInfo| { &m.gear_damage_list },
            |m: &mut EvolveBuildBattleInfo| { &mut m.gear_damage_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stat_params",
            |m: &EvolveBuildBattleInfo| { &m.stat_params },
            |m: &mut EvolveBuildBattleInfo| { &mut m.stat_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_giveup",
            |m: &EvolveBuildBattleInfo| { &m.is_giveup },
            |m: &mut EvolveBuildBattleInfo| { &mut m.is_giveup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cur_unused_round_cnt",
            |m: &EvolveBuildBattleInfo| { &m.cur_unused_round_cnt },
            |m: &mut EvolveBuildBattleInfo| { &mut m.cur_unused_round_cnt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PMNHMAMHGAI::PMNHMAMHGAI>(
            "stat_log_info",
            |m: &EvolveBuildBattleInfo| { &m.stat_log_info },
            |m: &mut EvolveBuildBattleInfo| { &mut m.stat_log_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period_first_random_seed",
            |m: &EvolveBuildBattleInfo| { &m.period_first_random_seed },
            |m: &mut EvolveBuildBattleInfo| { &mut m.period_first_random_seed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvolveBuildBattleInfo>(
            "EvolveBuildBattleInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvolveBuildBattleInfo {
    const NAME: &'static str = "EvolveBuildBattleInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cur_level_id = is.read_uint32()?;
                },
                16 => {
                    self.cur_period = is.read_uint32()?;
                },
                24 => {
                    self.cur_coin = is.read_uint32()?;
                },
                34 => {
                    self.weapon_slot_list.push(is.read_message()?);
                },
                42 => {
                    self.accessory_slot_list.push(is.read_message()?);
                },
                50 => {
                    is.read_repeated_packed_uint32_into(&mut self.ban_gear_list)?;
                },
                48 => {
                    self.ban_gear_list.push(is.read_uint32()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.collection)?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.allowed_gear_list)?;
                },
                64 => {
                    self.allowed_gear_list.push(is.read_uint32()?);
                },
                72 => {
                    self.cur_exp = is.read_uint32()?;
                },
                80 => {
                    self.cur_reroll = is.read_uint32()?;
                },
                88 => {
                    self.cur_treasure_miss_cnt = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.period_id_list)?;
                },
                96 => {
                    self.period_id_list.push(is.read_uint32()?);
                },
                104 => {
                    self.cur_gear_lost_cnt = is.read_uint32()?;
                },
                112 => {
                    self.cur_wave = is.read_uint32()?;
                },
                120 => {
                    self.is_unlock_gear_reroll = is.read_bool()?;
                },
                128 => {
                    self.is_unlock_gear_ban = is.read_bool()?;
                },
                138 => {
                    self.card_list.push(is.read_message()?);
                },
                146 => {
                    self.gear_damage_list.push(is.read_message()?);
                },
                154 => {
                    is.read_repeated_packed_uint32_into(&mut self.stat_params)?;
                },
                152 => {
                    self.stat_params.push(is.read_uint32()?);
                },
                160 => {
                    self.is_giveup = is.read_bool()?;
                },
                168 => {
                    self.cur_unused_round_cnt = is.read_uint32()?;
                },
                178 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stat_log_info)?;
                },
                184 => {
                    self.period_first_random_seed = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cur_level_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.cur_level_id);
        }
        if self.cur_period != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.cur_period);
        }
        if self.cur_coin != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.cur_coin);
        }
        for value in &self.weapon_slot_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.accessory_slot_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(6, &self.ban_gear_list);
        if let Some(v) = self.collection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(8, &self.allowed_gear_list);
        if self.cur_exp != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.cur_exp);
        }
        if self.cur_reroll != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.cur_reroll);
        }
        if self.cur_treasure_miss_cnt != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.cur_treasure_miss_cnt);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.period_id_list);
        if self.cur_gear_lost_cnt != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.cur_gear_lost_cnt);
        }
        if self.cur_wave != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.cur_wave);
        }
        if self.is_unlock_gear_reroll != false {
            my_size += 1 + 1;
        }
        if self.is_unlock_gear_ban != false {
            my_size += 2 + 1;
        }
        for value in &self.card_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.gear_damage_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::vec_packed_uint32_size(19, &self.stat_params);
        if self.is_giveup != false {
            my_size += 2 + 1;
        }
        if self.cur_unused_round_cnt != 0 {
            my_size += ::protobuf::rt::uint32_size(21, self.cur_unused_round_cnt);
        }
        if let Some(v) = self.stat_log_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.period_first_random_seed != 0 {
            my_size += ::protobuf::rt::uint32_size(23, self.period_first_random_seed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cur_level_id != 0 {
            os.write_uint32(1, self.cur_level_id)?;
        }
        if self.cur_period != 0 {
            os.write_uint32(2, self.cur_period)?;
        }
        if self.cur_coin != 0 {
            os.write_uint32(3, self.cur_coin)?;
        }
        for v in &self.weapon_slot_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.accessory_slot_list {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_repeated_packed_uint32(6, &self.ban_gear_list)?;
        if let Some(v) = self.collection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_repeated_packed_uint32(8, &self.allowed_gear_list)?;
        if self.cur_exp != 0 {
            os.write_uint32(9, self.cur_exp)?;
        }
        if self.cur_reroll != 0 {
            os.write_uint32(10, self.cur_reroll)?;
        }
        if self.cur_treasure_miss_cnt != 0 {
            os.write_uint32(11, self.cur_treasure_miss_cnt)?;
        }
        os.write_repeated_packed_uint32(12, &self.period_id_list)?;
        if self.cur_gear_lost_cnt != 0 {
            os.write_uint32(13, self.cur_gear_lost_cnt)?;
        }
        if self.cur_wave != 0 {
            os.write_uint32(14, self.cur_wave)?;
        }
        if self.is_unlock_gear_reroll != false {
            os.write_bool(15, self.is_unlock_gear_reroll)?;
        }
        if self.is_unlock_gear_ban != false {
            os.write_bool(16, self.is_unlock_gear_ban)?;
        }
        for v in &self.card_list {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        };
        for v in &self.gear_damage_list {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        os.write_repeated_packed_uint32(19, &self.stat_params)?;
        if self.is_giveup != false {
            os.write_bool(20, self.is_giveup)?;
        }
        if self.cur_unused_round_cnt != 0 {
            os.write_uint32(21, self.cur_unused_round_cnt)?;
        }
        if let Some(v) = self.stat_log_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        }
        if self.period_first_random_seed != 0 {
            os.write_uint32(23, self.period_first_random_seed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvolveBuildBattleInfo {
        EvolveBuildBattleInfo::new()
    }

    fn clear(&mut self) {
        self.cur_level_id = 0;
        self.cur_period = 0;
        self.cur_coin = 0;
        self.weapon_slot_list.clear();
        self.accessory_slot_list.clear();
        self.ban_gear_list.clear();
        self.collection.clear();
        self.allowed_gear_list.clear();
        self.cur_exp = 0;
        self.cur_reroll = 0;
        self.cur_treasure_miss_cnt = 0;
        self.period_id_list.clear();
        self.cur_gear_lost_cnt = 0;
        self.cur_wave = 0;
        self.is_unlock_gear_reroll = false;
        self.is_unlock_gear_ban = false;
        self.card_list.clear();
        self.gear_damage_list.clear();
        self.stat_params.clear();
        self.is_giveup = false;
        self.cur_unused_round_cnt = 0;
        self.stat_log_info.clear();
        self.period_first_random_seed = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvolveBuildBattleInfo {
        static instance: EvolveBuildBattleInfo = EvolveBuildBattleInfo {
            cur_level_id: 0,
            cur_period: 0,
            cur_coin: 0,
            weapon_slot_list: ::std::vec::Vec::new(),
            accessory_slot_list: ::std::vec::Vec::new(),
            ban_gear_list: ::std::vec::Vec::new(),
            collection: ::protobuf::MessageField::none(),
            allowed_gear_list: ::std::vec::Vec::new(),
            cur_exp: 0,
            cur_reroll: 0,
            cur_treasure_miss_cnt: 0,
            period_id_list: ::std::vec::Vec::new(),
            cur_gear_lost_cnt: 0,
            cur_wave: 0,
            is_unlock_gear_reroll: false,
            is_unlock_gear_ban: false,
            card_list: ::std::vec::Vec::new(),
            gear_damage_list: ::std::vec::Vec::new(),
            stat_params: ::std::vec::Vec::new(),
            is_giveup: false,
            cur_unused_round_cnt: 0,
            stat_log_info: ::protobuf::MessageField::none(),
            period_first_random_seed: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvolveBuildBattleInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvolveBuildBattleInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvolveBuildBattleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvolveBuildBattleInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bEvolveBuildBattleInfo.proto\x1a\x11BHGBOOJEOPF.proto\x1a\x1fEvolve\
    BuildGearDamageInfo.proto\x1a\x11LGIFEDNKHON.proto\x1a\x11MEOIFIOAECF.pr\
    oto\x1a\x11PMNHMAMHGAI.proto\"\xe9\x07\n\x15EvolveBuildBattleInfo\x12\
    \x20\n\x0ccur_level_id\x18\x01\x20\x01(\rR\ncurLevelId\x12\x1d\n\ncur_pe\
    riod\x18\x02\x20\x01(\rR\tcurPeriod\x12\x19\n\x08cur_coin\x18\x03\x20\
    \x01(\rR\x07curCoin\x126\n\x10weapon_slot_list\x18\x04\x20\x03(\x0b2\x0c\
    .MEOIFIOAECFR\x0eweaponSlotList\x12<\n\x13accessory_slot_list\x18\x05\
    \x20\x03(\x0b2\x0c.MEOIFIOAECFR\x11accessorySlotList\x12\"\n\rban_gear_l\
    ist\x18\x06\x20\x03(\rR\x0bbanGearList\x12,\n\ncollection\x18\x07\x20\
    \x01(\x0b2\x0c.LGIFEDNKHONR\ncollection\x12*\n\x11allowed_gear_list\x18\
    \x08\x20\x03(\rR\x0fallowedGearList\x12\x17\n\x07cur_exp\x18\t\x20\x01(\
    \rR\x06curExp\x12\x1d\n\ncur_reroll\x18\n\x20\x01(\rR\tcurReroll\x121\n\
    \x15cur_treasure_miss_cnt\x18\x0b\x20\x01(\rR\x12curTreasureMissCnt\x12$\
    \n\x0eperiod_id_list\x18\x0c\x20\x03(\rR\x0cperiodIdList\x12)\n\x11cur_g\
    ear_lost_cnt\x18\r\x20\x01(\rR\x0ecurGearLostCnt\x12\x19\n\x08cur_wave\
    \x18\x0e\x20\x01(\rR\x07curWave\x121\n\x15is_unlock_gear_reroll\x18\x0f\
    \x20\x01(\x08R\x12isUnlockGearReroll\x12+\n\x12is_unlock_gear_ban\x18\
    \x10\x20\x01(\x08R\x0fisUnlockGearBan\x12)\n\tcard_list\x18\x11\x20\x03(\
    \x0b2\x0c.BHGBOOJEOPFR\x08cardList\x12D\n\x10gear_damage_list\x18\x12\
    \x20\x03(\x0b2\x1a.EvolveBuildGearDamageInfoR\x0egearDamageList\x12\x1f\
    \n\x0bstat_params\x18\x13\x20\x03(\rR\nstatParams\x12\x1b\n\tis_giveup\
    \x18\x14\x20\x01(\x08R\x08isGiveup\x12/\n\x14cur_unused_round_cnt\x18\
    \x15\x20\x01(\rR\x11curUnusedRoundCnt\x120\n\rstat_log_info\x18\x16\x20\
    \x01(\x0b2\x0c.PMNHMAMHGAIR\x0bstatLogInfo\x127\n\x18period_first_random\
    _seed\x18\x17\x20\x01(\rR\x15periodFirstRandomSeedb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::BHGBOOJEOPF::file_descriptor().clone());
            deps.push(super::EvolveBuildGearDamageInfo::file_descriptor().clone());
            deps.push(super::LGIFEDNKHON::file_descriptor().clone());
            deps.push(super::MEOIFIOAECF::file_descriptor().clone());
            deps.push(super::PMNHMAMHGAI::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EvolveBuildBattleInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
