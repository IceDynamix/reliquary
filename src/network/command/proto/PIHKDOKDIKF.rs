// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PIHKDOKDIKF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PIHKDOKDIKF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PIHKDOKDIKF {
    // message oneof groups
    pub INBKIJDHPLP: ::std::option::Option<pihkdokdikf::INBKIJDHPLP>,
    // special fields
    // @@protoc_insertion_point(special_field:PIHKDOKDIKF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PIHKDOKDIKF {
    fn default() -> &'a PIHKDOKDIKF {
        <PIHKDOKDIKF as ::protobuf::Message>::default_instance()
    }
}

impl PIHKDOKDIKF {
    pub fn new() -> PIHKDOKDIKF {
        ::std::default::Default::default()
    }

    // .MMOPBLDHJMF HGIMNJFLKLB = 13;

    pub fn HGIMNJFLKLB(&self) -> &super::MMOPBLDHJMF::MMOPBLDHJMF {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(ref v)) => v,
            _ => <super::MMOPBLDHJMF::MMOPBLDHJMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HGIMNJFLKLB(&mut self) {
        self.INBKIJDHPLP = ::std::option::Option::None;
    }

    pub fn has_HGIMNJFLKLB(&self) -> bool {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HGIMNJFLKLB(&mut self, v: super::MMOPBLDHJMF::MMOPBLDHJMF) {
        self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HGIMNJFLKLB(&mut self) -> &mut super::MMOPBLDHJMF::MMOPBLDHJMF {
        if let ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(_)) = self.INBKIJDHPLP {
        } else {
            self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(super::MMOPBLDHJMF::MMOPBLDHJMF::new()));
        }
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HGIMNJFLKLB(&mut self) -> super::MMOPBLDHJMF::MMOPBLDHJMF {
        if self.has_HGIMNJFLKLB() {
            match self.INBKIJDHPLP.take() {
                ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MMOPBLDHJMF::MMOPBLDHJMF::new()
        }
    }

    // .ILHLPPHLDCG CJIAKCAPHJG = 7;

    pub fn CJIAKCAPHJG(&self) -> &super::ILHLPPHLDCG::ILHLPPHLDCG {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(ref v)) => v,
            _ => <super::ILHLPPHLDCG::ILHLPPHLDCG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CJIAKCAPHJG(&mut self) {
        self.INBKIJDHPLP = ::std::option::Option::None;
    }

    pub fn has_CJIAKCAPHJG(&self) -> bool {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CJIAKCAPHJG(&mut self, v: super::ILHLPPHLDCG::ILHLPPHLDCG) {
        self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CJIAKCAPHJG(&mut self) -> &mut super::ILHLPPHLDCG::ILHLPPHLDCG {
        if let ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(_)) = self.INBKIJDHPLP {
        } else {
            self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(super::ILHLPPHLDCG::ILHLPPHLDCG::new()));
        }
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CJIAKCAPHJG(&mut self) -> super::ILHLPPHLDCG::ILHLPPHLDCG {
        if self.has_CJIAKCAPHJG() {
            match self.INBKIJDHPLP.take() {
                ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ILHLPPHLDCG::ILHLPPHLDCG::new()
        }
    }

    // .IKHPEEPOGLE IAGEBJBPLFM = 12;

    pub fn IAGEBJBPLFM(&self) -> &super::IKHPEEPOGLE::IKHPEEPOGLE {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(ref v)) => v,
            _ => <super::IKHPEEPOGLE::IKHPEEPOGLE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IAGEBJBPLFM(&mut self) {
        self.INBKIJDHPLP = ::std::option::Option::None;
    }

    pub fn has_IAGEBJBPLFM(&self) -> bool {
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IAGEBJBPLFM(&mut self, v: super::IKHPEEPOGLE::IKHPEEPOGLE) {
        self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IAGEBJBPLFM(&mut self) -> &mut super::IKHPEEPOGLE::IKHPEEPOGLE {
        if let ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(_)) = self.INBKIJDHPLP {
        } else {
            self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(super::IKHPEEPOGLE::IKHPEEPOGLE::new()));
        }
        match self.INBKIJDHPLP {
            ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IAGEBJBPLFM(&mut self) -> super::IKHPEEPOGLE::IKHPEEPOGLE {
        if self.has_IAGEBJBPLFM() {
            match self.INBKIJDHPLP.take() {
                ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IKHPEEPOGLE::IKHPEEPOGLE::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MMOPBLDHJMF::MMOPBLDHJMF>(
            "HGIMNJFLKLB",
            PIHKDOKDIKF::has_HGIMNJFLKLB,
            PIHKDOKDIKF::HGIMNJFLKLB,
            PIHKDOKDIKF::mut_HGIMNJFLKLB,
            PIHKDOKDIKF::set_HGIMNJFLKLB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ILHLPPHLDCG::ILHLPPHLDCG>(
            "CJIAKCAPHJG",
            PIHKDOKDIKF::has_CJIAKCAPHJG,
            PIHKDOKDIKF::CJIAKCAPHJG,
            PIHKDOKDIKF::mut_CJIAKCAPHJG,
            PIHKDOKDIKF::set_CJIAKCAPHJG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IKHPEEPOGLE::IKHPEEPOGLE>(
            "IAGEBJBPLFM",
            PIHKDOKDIKF::has_IAGEBJBPLFM,
            PIHKDOKDIKF::IAGEBJBPLFM,
            PIHKDOKDIKF::mut_IAGEBJBPLFM,
            PIHKDOKDIKF::set_IAGEBJBPLFM,
        ));
        oneofs.push(pihkdokdikf::INBKIJDHPLP::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PIHKDOKDIKF>(
            "PIHKDOKDIKF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PIHKDOKDIKF {
    const NAME: &'static str = "PIHKDOKDIKF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                106 => {
                    self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(is.read_message()?));
                },
                58 => {
                    self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(is.read_message()?));
                },
                98 => {
                    self.INBKIJDHPLP = ::std::option::Option::Some(pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.INBKIJDHPLP {
            match v {
                &pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.INBKIJDHPLP {
            match v {
                &pihkdokdikf::INBKIJDHPLP::HGIMNJFLKLB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &pihkdokdikf::INBKIJDHPLP::CJIAKCAPHJG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &pihkdokdikf::INBKIJDHPLP::IAGEBJBPLFM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PIHKDOKDIKF {
        PIHKDOKDIKF::new()
    }

    fn clear(&mut self) {
        self.INBKIJDHPLP = ::std::option::Option::None;
        self.INBKIJDHPLP = ::std::option::Option::None;
        self.INBKIJDHPLP = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PIHKDOKDIKF {
        static instance: PIHKDOKDIKF = PIHKDOKDIKF {
            INBKIJDHPLP: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PIHKDOKDIKF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PIHKDOKDIKF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PIHKDOKDIKF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PIHKDOKDIKF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PIHKDOKDIKF`
pub mod pihkdokdikf {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PIHKDOKDIKF.INBKIJDHPLP)
    pub enum INBKIJDHPLP {
        // @@protoc_insertion_point(oneof_field:PIHKDOKDIKF.HGIMNJFLKLB)
        HGIMNJFLKLB(super::super::MMOPBLDHJMF::MMOPBLDHJMF),
        // @@protoc_insertion_point(oneof_field:PIHKDOKDIKF.CJIAKCAPHJG)
        CJIAKCAPHJG(super::super::ILHLPPHLDCG::ILHLPPHLDCG),
        // @@protoc_insertion_point(oneof_field:PIHKDOKDIKF.IAGEBJBPLFM)
        IAGEBJBPLFM(super::super::IKHPEEPOGLE::IKHPEEPOGLE),
    }

    impl ::protobuf::Oneof for INBKIJDHPLP {
    }

    impl ::protobuf::OneofFull for INBKIJDHPLP {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PIHKDOKDIKF as ::protobuf::MessageFull>::descriptor().oneof_by_name("INBKIJDHPLP").unwrap()).clone()
        }
    }

    impl INBKIJDHPLP {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<INBKIJDHPLP>("INBKIJDHPLP")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PIHKDOKDIKF.proto\x1a\x11IKHPEEPOGLE.proto\x1a\x11ILHLPPHLDCG.prot\
    o\x1a\x11MMOPBLDHJMF.proto\"\xb2\x01\n\x0bPIHKDOKDIKF\x120\n\x0bHGIMNJFL\
    KLB\x18\r\x20\x01(\x0b2\x0c.MMOPBLDHJMFH\0R\x0bHGIMNJFLKLB\x120\n\x0bCJI\
    AKCAPHJG\x18\x07\x20\x01(\x0b2\x0c.ILHLPPHLDCGH\0R\x0bCJIAKCAPHJG\x120\n\
    \x0bIAGEBJBPLFM\x18\x0c\x20\x01(\x0b2\x0c.IKHPEEPOGLEH\0R\x0bIAGEBJBPLFM\
    B\r\n\x0bINBKIJDHPLPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::IKHPEEPOGLE::file_descriptor().clone());
            deps.push(super::ILHLPPHLDCG::file_descriptor().clone());
            deps.push(super::MMOPBLDHJMF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PIHKDOKDIKF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
