// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JBOCJHNDAMC.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:JBOCJHNDAMC)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JBOCJHNDAMC {
    // message fields
    // @@protoc_insertion_point(field:JBOCJHNDAMC.IJPPKNKNLNL)
    pub IJPPKNKNLNL: ::protobuf::EnumOrUnknown<super::DMLCPAKDBLJ::DMLCPAKDBLJ>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.NPJEECEDPOK)
    pub NPJEECEDPOK: u32,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.GDGHCBGHLND)
    pub GDGHCBGHLND: ::protobuf::MessageField<super::KACKJJDJONI::KACKJJDJONI>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.OMGGNAEAHIF)
    pub OMGGNAEAHIF: ::std::vec::Vec<super::PlayCardBrief::PlayCardBrief>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.BIHFECJHPGH)
    pub BIHFECJHPGH: ::std::vec::Vec<super::PlaySkillBrief::PlaySkillBrief>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.CCGBHHFBAFJ)
    pub CCGBHHFBAFJ: ::std::vec::Vec<super::HEOJLDBKKGE::HEOJLDBKKGE>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.MFAKJHFMAIB)
    pub MFAKJHFMAIB: ::protobuf::MessageField<super::PHOEFKFBIKD::PHOEFKFBIKD>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.DNPHCJEBIKB)
    pub DNPHCJEBIKB: u32,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.MMEIPHBNKED)
    pub MMEIPHBNKED: ::std::vec::Vec<super::PJJDMMBKKCN::PJJDMMBKKCN>,
    // @@protoc_insertion_point(field:JBOCJHNDAMC.CFOKIGIHCFP)
    pub CFOKIGIHCFP: u32,
    // special fields
    // @@protoc_insertion_point(special_field:JBOCJHNDAMC.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JBOCJHNDAMC {
    fn default() -> &'a JBOCJHNDAMC {
        <JBOCJHNDAMC as ::protobuf::Message>::default_instance()
    }
}

impl JBOCJHNDAMC {
    pub fn new() -> JBOCJHNDAMC {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IJPPKNKNLNL",
            |m: &JBOCJHNDAMC| { &m.IJPPKNKNLNL },
            |m: &mut JBOCJHNDAMC| { &mut m.IJPPKNKNLNL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NPJEECEDPOK",
            |m: &JBOCJHNDAMC| { &m.NPJEECEDPOK },
            |m: &mut JBOCJHNDAMC| { &mut m.NPJEECEDPOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KACKJJDJONI::KACKJJDJONI>(
            "GDGHCBGHLND",
            |m: &JBOCJHNDAMC| { &m.GDGHCBGHLND },
            |m: &mut JBOCJHNDAMC| { &mut m.GDGHCBGHLND },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OMGGNAEAHIF",
            |m: &JBOCJHNDAMC| { &m.OMGGNAEAHIF },
            |m: &mut JBOCJHNDAMC| { &mut m.OMGGNAEAHIF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BIHFECJHPGH",
            |m: &JBOCJHNDAMC| { &m.BIHFECJHPGH },
            |m: &mut JBOCJHNDAMC| { &mut m.BIHFECJHPGH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CCGBHHFBAFJ",
            |m: &JBOCJHNDAMC| { &m.CCGBHHFBAFJ },
            |m: &mut JBOCJHNDAMC| { &mut m.CCGBHHFBAFJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::PHOEFKFBIKD::PHOEFKFBIKD>(
            "MFAKJHFMAIB",
            |m: &JBOCJHNDAMC| { &m.MFAKJHFMAIB },
            |m: &mut JBOCJHNDAMC| { &mut m.MFAKJHFMAIB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DNPHCJEBIKB",
            |m: &JBOCJHNDAMC| { &m.DNPHCJEBIKB },
            |m: &mut JBOCJHNDAMC| { &mut m.DNPHCJEBIKB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MMEIPHBNKED",
            |m: &JBOCJHNDAMC| { &m.MMEIPHBNKED },
            |m: &mut JBOCJHNDAMC| { &mut m.MMEIPHBNKED },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFOKIGIHCFP",
            |m: &JBOCJHNDAMC| { &m.CFOKIGIHCFP },
            |m: &mut JBOCJHNDAMC| { &mut m.CFOKIGIHCFP },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JBOCJHNDAMC>(
            "JBOCJHNDAMC",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JBOCJHNDAMC {
    const NAME: &'static str = "JBOCJHNDAMC";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                48 => {
                    self.IJPPKNKNLNL = is.read_enum_or_unknown()?;
                },
                112 => {
                    self.NPJEECEDPOK = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GDGHCBGHLND)?;
                },
                98 => {
                    self.OMGGNAEAHIF.push(is.read_message()?);
                },
                58 => {
                    self.BIHFECJHPGH.push(is.read_message()?);
                },
                66 => {
                    self.CCGBHHFBAFJ.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MFAKJHFMAIB)?;
                },
                120 => {
                    self.DNPHCJEBIKB = is.read_uint32()?;
                },
                18 => {
                    self.MMEIPHBNKED.push(is.read_message()?);
                },
                40 => {
                    self.CFOKIGIHCFP = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IJPPKNKNLNL != ::protobuf::EnumOrUnknown::new(super::DMLCPAKDBLJ::DMLCPAKDBLJ::TRAIN_PARTY_MT_CATEGORY_NONE) {
            my_size += ::protobuf::rt::int32_size(6, self.IJPPKNKNLNL.value());
        }
        if self.NPJEECEDPOK != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.NPJEECEDPOK);
        }
        if let Some(v) = self.GDGHCBGHLND.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.OMGGNAEAHIF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.BIHFECJHPGH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.CCGBHHFBAFJ {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.MFAKJHFMAIB.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.DNPHCJEBIKB != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.DNPHCJEBIKB);
        }
        for value in &self.MMEIPHBNKED {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CFOKIGIHCFP != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.CFOKIGIHCFP);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IJPPKNKNLNL != ::protobuf::EnumOrUnknown::new(super::DMLCPAKDBLJ::DMLCPAKDBLJ::TRAIN_PARTY_MT_CATEGORY_NONE) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.IJPPKNKNLNL))?;
        }
        if self.NPJEECEDPOK != 0 {
            os.write_uint32(14, self.NPJEECEDPOK)?;
        }
        if let Some(v) = self.GDGHCBGHLND.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.OMGGNAEAHIF {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.BIHFECJHPGH {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.CCGBHHFBAFJ {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if let Some(v) = self.MFAKJHFMAIB.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.DNPHCJEBIKB != 0 {
            os.write_uint32(15, self.DNPHCJEBIKB)?;
        }
        for v in &self.MMEIPHBNKED {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.CFOKIGIHCFP != 0 {
            os.write_uint32(5, self.CFOKIGIHCFP)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JBOCJHNDAMC {
        JBOCJHNDAMC::new()
    }

    fn clear(&mut self) {
        self.IJPPKNKNLNL = ::protobuf::EnumOrUnknown::new(super::DMLCPAKDBLJ::DMLCPAKDBLJ::TRAIN_PARTY_MT_CATEGORY_NONE);
        self.NPJEECEDPOK = 0;
        self.GDGHCBGHLND.clear();
        self.OMGGNAEAHIF.clear();
        self.BIHFECJHPGH.clear();
        self.CCGBHHFBAFJ.clear();
        self.MFAKJHFMAIB.clear();
        self.DNPHCJEBIKB = 0;
        self.MMEIPHBNKED.clear();
        self.CFOKIGIHCFP = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JBOCJHNDAMC {
        static instance: JBOCJHNDAMC = JBOCJHNDAMC {
            IJPPKNKNLNL: ::protobuf::EnumOrUnknown::from_i32(0),
            NPJEECEDPOK: 0,
            GDGHCBGHLND: ::protobuf::MessageField::none(),
            OMGGNAEAHIF: ::std::vec::Vec::new(),
            BIHFECJHPGH: ::std::vec::Vec::new(),
            CCGBHHFBAFJ: ::std::vec::Vec::new(),
            MFAKJHFMAIB: ::protobuf::MessageField::none(),
            DNPHCJEBIKB: 0,
            MMEIPHBNKED: ::std::vec::Vec::new(),
            CFOKIGIHCFP: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JBOCJHNDAMC {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JBOCJHNDAMC").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JBOCJHNDAMC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JBOCJHNDAMC {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11JBOCJHNDAMC.proto\x1a\x11DMLCPAKDBLJ.proto\x1a\x11HEOJLDBKKGE.prot\
    o\x1a\x11KACKJJDJONI.proto\x1a\x11PHOEFKFBIKD.proto\x1a\x11PJJDMMBKKCN.p\
    roto\x1a\x13PlayCardBrief.proto\x1a\x14PlaySkillBrief.proto\"\xc8\x03\n\
    \x0bJBOCJHNDAMC\x12.\n\x0bIJPPKNKNLNL\x18\x06\x20\x01(\x0e2\x0c.DMLCPAKD\
    BLJR\x0bIJPPKNKNLNL\x12\x20\n\x0bNPJEECEDPOK\x18\x0e\x20\x01(\rR\x0bNPJE\
    ECEDPOK\x12.\n\x0bGDGHCBGHLND\x18\t\x20\x01(\x0b2\x0c.KACKJJDJONIR\x0bGD\
    GHCBGHLND\x120\n\x0bOMGGNAEAHIF\x18\x0c\x20\x03(\x0b2\x0e.PlayCardBriefR\
    \x0bOMGGNAEAHIF\x121\n\x0bBIHFECJHPGH\x18\x07\x20\x03(\x0b2\x0f.PlaySkil\
    lBriefR\x0bBIHFECJHPGH\x12.\n\x0bCCGBHHFBAFJ\x18\x08\x20\x03(\x0b2\x0c.H\
    EOJLDBKKGER\x0bCCGBHHFBAFJ\x12.\n\x0bMFAKJHFMAIB\x18\x03\x20\x01(\x0b2\
    \x0c.PHOEFKFBIKDR\x0bMFAKJHFMAIB\x12\x20\n\x0bDNPHCJEBIKB\x18\x0f\x20\
    \x01(\rR\x0bDNPHCJEBIKB\x12.\n\x0bMMEIPHBNKED\x18\x02\x20\x03(\x0b2\x0c.\
    PJJDMMBKKCNR\x0bMMEIPHBNKED\x12\x20\n\x0bCFOKIGIHCFP\x18\x05\x20\x01(\rR\
    \x0bCFOKIGIHCFPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::DMLCPAKDBLJ::file_descriptor().clone());
            deps.push(super::HEOJLDBKKGE::file_descriptor().clone());
            deps.push(super::KACKJJDJONI::file_descriptor().clone());
            deps.push(super::PHOEFKFBIKD::file_descriptor().clone());
            deps.push(super::PJJDMMBKKCN::file_descriptor().clone());
            deps.push(super::PlayCardBrief::file_descriptor().clone());
            deps.push(super::PlaySkillBrief::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JBOCJHNDAMC::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
