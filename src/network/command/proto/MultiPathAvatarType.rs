// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MultiPathAvatarType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MultiPathAvatarType)
pub enum MultiPathAvatarType {
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.MultiPathAvatarTypeNone)
    MultiPathAvatarTypeNone = 0,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.Mar_7thKnightType)
    Mar_7thKnightType = 1001,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.Mar_7thRogueType)
    Mar_7thRogueType = 1224,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.BoyWarriorType)
    BoyWarriorType = 8001,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.GirlWarriorType)
    GirlWarriorType = 8002,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.BoyKnightType)
    BoyKnightType = 8003,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.GirlKnightType)
    GirlKnightType = 8004,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.BoyShamanType)
    BoyShamanType = 8005,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.GirlShamanType)
    GirlShamanType = 8006,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.BoyMemoryType)
    BoyMemoryType = 8007,
    // @@protoc_insertion_point(enum_value:MultiPathAvatarType.GirlMemoryType)
    GirlMemoryType = 8008,
}

impl ::protobuf::Enum for MultiPathAvatarType {
    const NAME: &'static str = "MultiPathAvatarType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MultiPathAvatarType> {
        match value {
            0 => ::std::option::Option::Some(MultiPathAvatarType::MultiPathAvatarTypeNone),
            1001 => ::std::option::Option::Some(MultiPathAvatarType::Mar_7thKnightType),
            1224 => ::std::option::Option::Some(MultiPathAvatarType::Mar_7thRogueType),
            8001 => ::std::option::Option::Some(MultiPathAvatarType::BoyWarriorType),
            8002 => ::std::option::Option::Some(MultiPathAvatarType::GirlWarriorType),
            8003 => ::std::option::Option::Some(MultiPathAvatarType::BoyKnightType),
            8004 => ::std::option::Option::Some(MultiPathAvatarType::GirlKnightType),
            8005 => ::std::option::Option::Some(MultiPathAvatarType::BoyShamanType),
            8006 => ::std::option::Option::Some(MultiPathAvatarType::GirlShamanType),
            8007 => ::std::option::Option::Some(MultiPathAvatarType::BoyMemoryType),
            8008 => ::std::option::Option::Some(MultiPathAvatarType::GirlMemoryType),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MultiPathAvatarType> {
        match str {
            "MultiPathAvatarTypeNone" => ::std::option::Option::Some(MultiPathAvatarType::MultiPathAvatarTypeNone),
            "Mar_7thKnightType" => ::std::option::Option::Some(MultiPathAvatarType::Mar_7thKnightType),
            "Mar_7thRogueType" => ::std::option::Option::Some(MultiPathAvatarType::Mar_7thRogueType),
            "BoyWarriorType" => ::std::option::Option::Some(MultiPathAvatarType::BoyWarriorType),
            "GirlWarriorType" => ::std::option::Option::Some(MultiPathAvatarType::GirlWarriorType),
            "BoyKnightType" => ::std::option::Option::Some(MultiPathAvatarType::BoyKnightType),
            "GirlKnightType" => ::std::option::Option::Some(MultiPathAvatarType::GirlKnightType),
            "BoyShamanType" => ::std::option::Option::Some(MultiPathAvatarType::BoyShamanType),
            "GirlShamanType" => ::std::option::Option::Some(MultiPathAvatarType::GirlShamanType),
            "BoyMemoryType" => ::std::option::Option::Some(MultiPathAvatarType::BoyMemoryType),
            "GirlMemoryType" => ::std::option::Option::Some(MultiPathAvatarType::GirlMemoryType),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MultiPathAvatarType] = &[
        MultiPathAvatarType::MultiPathAvatarTypeNone,
        MultiPathAvatarType::Mar_7thKnightType,
        MultiPathAvatarType::Mar_7thRogueType,
        MultiPathAvatarType::BoyWarriorType,
        MultiPathAvatarType::GirlWarriorType,
        MultiPathAvatarType::BoyKnightType,
        MultiPathAvatarType::GirlKnightType,
        MultiPathAvatarType::BoyShamanType,
        MultiPathAvatarType::GirlShamanType,
        MultiPathAvatarType::BoyMemoryType,
        MultiPathAvatarType::GirlMemoryType,
    ];
}

impl ::protobuf::EnumFull for MultiPathAvatarType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MultiPathAvatarType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            MultiPathAvatarType::MultiPathAvatarTypeNone => 0,
            MultiPathAvatarType::Mar_7thKnightType => 1,
            MultiPathAvatarType::Mar_7thRogueType => 2,
            MultiPathAvatarType::BoyWarriorType => 3,
            MultiPathAvatarType::GirlWarriorType => 4,
            MultiPathAvatarType::BoyKnightType => 5,
            MultiPathAvatarType::GirlKnightType => 6,
            MultiPathAvatarType::BoyShamanType => 7,
            MultiPathAvatarType::GirlShamanType => 8,
            MultiPathAvatarType::BoyMemoryType => 9,
            MultiPathAvatarType::GirlMemoryType => 10,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MultiPathAvatarType {
    fn default() -> Self {
        MultiPathAvatarType::MultiPathAvatarTypeNone
    }
}

impl MultiPathAvatarType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MultiPathAvatarType>("MultiPathAvatarType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19MultiPathAvatarType.proto*\x87\x02\n\x13MultiPathAvatarType\x12\
    \x1b\n\x17MultiPathAvatarTypeNone\x10\0\x12\x16\n\x11Mar_7thKnightType\
    \x10\xe9\x07\x12\x15\n\x10Mar_7thRogueType\x10\xc8\t\x12\x13\n\x0eBoyWar\
    riorType\x10\xc1>\x12\x14\n\x0fGirlWarriorType\x10\xc2>\x12\x12\n\rBoyKn\
    ightType\x10\xc3>\x12\x13\n\x0eGirlKnightType\x10\xc4>\x12\x12\n\rBoySha\
    manType\x10\xc5>\x12\x13\n\x0eGirlShamanType\x10\xc6>\x12\x12\n\rBoyMemo\
    ryType\x10\xc7>\x12\x13\n\x0eGirlMemoryType\x10\xc8>b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MultiPathAvatarType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
