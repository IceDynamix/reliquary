// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DKNMKFBOBJF.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:DKNMKFBOBJF)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DKNMKFBOBJF {
    // message fields
    // @@protoc_insertion_point(field:DKNMKFBOBJF.CHMHPCNGFAO)
    pub CHMHPCNGFAO: ::protobuf::MessageField<super::GABCAPJGHFG::GABCAPJGHFG>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.CMBHKLPPPAD)
    pub CMBHKLPPPAD: ::protobuf::MessageField<super::OJCEALJIFND::OJCEALJIFND>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.OCBKFGAOHEH)
    pub OCBKFGAOHEH: ::protobuf::MessageField<super::IJMGMKCHHEF::IJMGMKCHHEF>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.KNDMEILHKEJ)
    pub KNDMEILHKEJ: ::protobuf::MessageField<super::KFPMAIAADMO::KFPMAIAADMO>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.EEPPKMPAJOH)
    pub EEPPKMPAJOH: ::protobuf::MessageField<super::OMOCHGKHNIK::OMOCHGKHNIK>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.AABCHFBKPEG)
    pub AABCHFBKPEG: ::protobuf::MessageField<super::BCLLBMEEDKP::BCLLBMEEDKP>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.EMBAGMMHIPA)
    pub EMBAGMMHIPA: ::protobuf::MessageField<super::EFJDMHOAKOO::EFJDMHOAKOO>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.GJBOLJKMGGE)
    pub GJBOLJKMGGE: bool,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.PBLFLJNHMIL)
    pub PBLFLJNHMIL: ::protobuf::EnumOrUnknown<super::RogueStatus::RogueStatus>,
    // @@protoc_insertion_point(field:DKNMKFBOBJF.LGOPNBHHHBG)
    pub LGOPNBHHHBG: ::protobuf::MessageField<super::CFMAPIMJDFC::CFMAPIMJDFC>,
    // special fields
    // @@protoc_insertion_point(special_field:DKNMKFBOBJF.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DKNMKFBOBJF {
    fn default() -> &'a DKNMKFBOBJF {
        <DKNMKFBOBJF as ::protobuf::Message>::default_instance()
    }
}

impl DKNMKFBOBJF {
    pub fn new() -> DKNMKFBOBJF {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GABCAPJGHFG::GABCAPJGHFG>(
            "CHMHPCNGFAO",
            |m: &DKNMKFBOBJF| { &m.CHMHPCNGFAO },
            |m: &mut DKNMKFBOBJF| { &mut m.CHMHPCNGFAO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OJCEALJIFND::OJCEALJIFND>(
            "CMBHKLPPPAD",
            |m: &DKNMKFBOBJF| { &m.CMBHKLPPPAD },
            |m: &mut DKNMKFBOBJF| { &mut m.CMBHKLPPPAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::IJMGMKCHHEF::IJMGMKCHHEF>(
            "OCBKFGAOHEH",
            |m: &DKNMKFBOBJF| { &m.OCBKFGAOHEH },
            |m: &mut DKNMKFBOBJF| { &mut m.OCBKFGAOHEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KFPMAIAADMO::KFPMAIAADMO>(
            "KNDMEILHKEJ",
            |m: &DKNMKFBOBJF| { &m.KNDMEILHKEJ },
            |m: &mut DKNMKFBOBJF| { &mut m.KNDMEILHKEJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OMOCHGKHNIK::OMOCHGKHNIK>(
            "EEPPKMPAJOH",
            |m: &DKNMKFBOBJF| { &m.EEPPKMPAJOH },
            |m: &mut DKNMKFBOBJF| { &mut m.EEPPKMPAJOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BCLLBMEEDKP::BCLLBMEEDKP>(
            "AABCHFBKPEG",
            |m: &DKNMKFBOBJF| { &m.AABCHFBKPEG },
            |m: &mut DKNMKFBOBJF| { &mut m.AABCHFBKPEG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::EFJDMHOAKOO::EFJDMHOAKOO>(
            "EMBAGMMHIPA",
            |m: &DKNMKFBOBJF| { &m.EMBAGMMHIPA },
            |m: &mut DKNMKFBOBJF| { &mut m.EMBAGMMHIPA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GJBOLJKMGGE",
            |m: &DKNMKFBOBJF| { &m.GJBOLJKMGGE },
            |m: &mut DKNMKFBOBJF| { &mut m.GJBOLJKMGGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PBLFLJNHMIL",
            |m: &DKNMKFBOBJF| { &m.PBLFLJNHMIL },
            |m: &mut DKNMKFBOBJF| { &mut m.PBLFLJNHMIL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::CFMAPIMJDFC::CFMAPIMJDFC>(
            "LGOPNBHHHBG",
            |m: &DKNMKFBOBJF| { &m.LGOPNBHHHBG },
            |m: &mut DKNMKFBOBJF| { &mut m.LGOPNBHHHBG },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DKNMKFBOBJF>(
            "DKNMKFBOBJF",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DKNMKFBOBJF {
    const NAME: &'static str = "DKNMKFBOBJF";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CHMHPCNGFAO)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.CMBHKLPPPAD)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OCBKFGAOHEH)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.KNDMEILHKEJ)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EEPPKMPAJOH)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.AABCHFBKPEG)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EMBAGMMHIPA)?;
                },
                16 => {
                    self.GJBOLJKMGGE = is.read_bool()?;
                },
                112 => {
                    self.PBLFLJNHMIL = is.read_enum_or_unknown()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LGOPNBHHHBG)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.CHMHPCNGFAO.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.CMBHKLPPPAD.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OCBKFGAOHEH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.KNDMEILHKEJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EEPPKMPAJOH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.AABCHFBKPEG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.EMBAGMMHIPA.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.GJBOLJKMGGE != false {
            my_size += 1 + 1;
        }
        if self.PBLFLJNHMIL != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.PBLFLJNHMIL.value());
        }
        if let Some(v) = self.LGOPNBHHHBG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.CHMHPCNGFAO.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.CMBHKLPPPAD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.OCBKFGAOHEH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.KNDMEILHKEJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.EEPPKMPAJOH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.AABCHFBKPEG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.EMBAGMMHIPA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.GJBOLJKMGGE != false {
            os.write_bool(2, self.GJBOLJKMGGE)?;
        }
        if self.PBLFLJNHMIL != ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.PBLFLJNHMIL))?;
        }
        if let Some(v) = self.LGOPNBHHHBG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DKNMKFBOBJF {
        DKNMKFBOBJF::new()
    }

    fn clear(&mut self) {
        self.CHMHPCNGFAO.clear();
        self.CMBHKLPPPAD.clear();
        self.OCBKFGAOHEH.clear();
        self.KNDMEILHKEJ.clear();
        self.EEPPKMPAJOH.clear();
        self.AABCHFBKPEG.clear();
        self.EMBAGMMHIPA.clear();
        self.GJBOLJKMGGE = false;
        self.PBLFLJNHMIL = ::protobuf::EnumOrUnknown::new(super::RogueStatus::RogueStatus::ROGUE_STATUS_NONE);
        self.LGOPNBHHHBG.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DKNMKFBOBJF {
        static instance: DKNMKFBOBJF = DKNMKFBOBJF {
            CHMHPCNGFAO: ::protobuf::MessageField::none(),
            CMBHKLPPPAD: ::protobuf::MessageField::none(),
            OCBKFGAOHEH: ::protobuf::MessageField::none(),
            KNDMEILHKEJ: ::protobuf::MessageField::none(),
            EEPPKMPAJOH: ::protobuf::MessageField::none(),
            AABCHFBKPEG: ::protobuf::MessageField::none(),
            EMBAGMMHIPA: ::protobuf::MessageField::none(),
            GJBOLJKMGGE: false,
            PBLFLJNHMIL: ::protobuf::EnumOrUnknown::from_i32(0),
            LGOPNBHHHBG: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DKNMKFBOBJF {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DKNMKFBOBJF").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DKNMKFBOBJF {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DKNMKFBOBJF {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11DKNMKFBOBJF.proto\x1a\x11BCLLBMEEDKP.proto\x1a\x11CFMAPIMJDFC.prot\
    o\x1a\x11EFJDMHOAKOO.proto\x1a\x11GABCAPJGHFG.proto\x1a\x11IJMGMKCHHEF.p\
    roto\x1a\x11KFPMAIAADMO.proto\x1a\x11OJCEALJIFND.proto\x1a\x11OMOCHGKHNI\
    K.proto\x1a\x11RogueStatus.proto\"\xdf\x03\n\x0bDKNMKFBOBJF\x12.\n\x0bCH\
    MHPCNGFAO\x18\t\x20\x01(\x0b2\x0c.GABCAPJGHFGR\x0bCHMHPCNGFAO\x12.\n\x0b\
    CMBHKLPPPAD\x18\x08\x20\x01(\x0b2\x0c.OJCEALJIFNDR\x0bCMBHKLPPPAD\x12.\n\
    \x0bOCBKFGAOHEH\x18\x01\x20\x01(\x0b2\x0c.IJMGMKCHHEFR\x0bOCBKFGAOHEH\
    \x12.\n\x0bKNDMEILHKEJ\x18\x06\x20\x01(\x0b2\x0c.KFPMAIAADMOR\x0bKNDMEIL\
    HKEJ\x12.\n\x0bEEPPKMPAJOH\x18\x0c\x20\x01(\x0b2\x0c.OMOCHGKHNIKR\x0bEEP\
    PKMPAJOH\x12.\n\x0bAABCHFBKPEG\x18\r\x20\x01(\x0b2\x0c.BCLLBMEEDKPR\x0bA\
    ABCHFBKPEG\x12.\n\x0bEMBAGMMHIPA\x18\x05\x20\x01(\x0b2\x0c.EFJDMHOAKOOR\
    \x0bEMBAGMMHIPA\x12\x20\n\x0bGJBOLJKMGGE\x18\x02\x20\x01(\x08R\x0bGJBOLJ\
    KMGGE\x12.\n\x0bPBLFLJNHMIL\x18\x0e\x20\x01(\x0e2\x0c.RogueStatusR\x0bPB\
    LFLJNHMIL\x12.\n\x0bLGOPNBHHHBG\x18\n\x20\x01(\x0b2\x0c.CFMAPIMJDFCR\x0b\
    LGOPNBHHHBGb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(9);
            deps.push(super::BCLLBMEEDKP::file_descriptor().clone());
            deps.push(super::CFMAPIMJDFC::file_descriptor().clone());
            deps.push(super::EFJDMHOAKOO::file_descriptor().clone());
            deps.push(super::GABCAPJGHFG::file_descriptor().clone());
            deps.push(super::IJMGMKCHHEF::file_descriptor().clone());
            deps.push(super::KFPMAIAADMO::file_descriptor().clone());
            deps.push(super::OJCEALJIFND::file_descriptor().clone());
            deps.push(super::OMOCHGKHNIK::file_descriptor().clone());
            deps.push(super::RogueStatus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DKNMKFBOBJF::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
