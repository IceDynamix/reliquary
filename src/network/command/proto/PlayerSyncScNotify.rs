// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PlayerSyncScNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PlayerSyncScNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerSyncScNotify {
    // message fields
    // @@protoc_insertion_point(field:PlayerSyncScNotify.OLFLKCBBJOH)
    pub OLFLKCBBJOH: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.BKEBJFIPJEH)
    pub BKEBJFIPJEH: ::protobuf::MessageField<super::LPFMHAJHDMM::LPFMHAJHDMM>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.INKHDOGLEMN)
    pub INKHDOGLEMN: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.MJOKLHFPGAD)
    pub MJOKLHFPGAD: ::protobuf::MessageField<super::ItemList::ItemList>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.equipment_list)
    pub equipment_list: ::std::vec::Vec<super::Equipment::Equipment>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.multi_path_avatar_type_info_list)
    pub multi_path_avatar_type_info_list: ::std::vec::Vec<super::MultiPathAvatarTypeInfo::MultiPathAvatarTypeInfo>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.FCOKFFEAPMI)
    pub FCOKFFEAPMI: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.HLINMKBDKNC)
    pub HLINMKBDKNC: ::std::vec::Vec<super::CLLPNMOCFKB::CLLPNMOCFKB>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.EPBCNFMEFFP)
    pub EPBCNFMEFFP: ::protobuf::MessageField<super::GKIBNDNFNIJ::GKIBNDNFNIJ>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.relic_list)
    pub relic_list: ::std::vec::Vec<super::Relic::Relic>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.HKIKCAABHPB)
    pub HKIKCAABHPB: u32,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.GEJLEKBBFNC)
    pub GEJLEKBBFNC: ::protobuf::MessageField<super::DBANAPEAALP::DBANAPEAALP>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.OMJOPKGJPLG)
    pub OMJOPKGJPLG: ::protobuf::MessageField<super::DMBMPAHKHLA::DMBMPAHKHLA>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.IGGOGFJFPDJ)
    pub IGGOGFJFPDJ: ::protobuf::MessageField<super::BLPMHFGIOAC::BLPMHFGIOAC>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.DGINPELINHI)
    pub DGINPELINHI: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.PCLGHHFJMGA)
    pub PCLGHHFJMGA: ::protobuf::MessageField<super::OPGPOJAAHHG::OPGPOJAAHHG>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.AOHKNGACOPN)
    pub AOHKNGACOPN: ::std::vec::Vec<super::Material::Material>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.PPAKDPOOANI)
    pub PPAKDPOOANI: ::std::vec::Vec<super::FPPAMPPIHMN::FPPAMPPIHMN>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.GPKGJLNHPJK)
    pub GPKGJLNHPJK: ::protobuf::MessageField<super::DJOLEKKPBGB::DJOLEKKPBGB>,
    // @@protoc_insertion_point(field:PlayerSyncScNotify.IGIPEIMGEAA)
    pub IGIPEIMGEAA: ::std::vec::Vec<super::GKDIHIFFHFD::GKDIHIFFHFD>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerSyncScNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerSyncScNotify {
    fn default() -> &'a PlayerSyncScNotify {
        <PlayerSyncScNotify as ::protobuf::Message>::default_instance()
    }
}

impl PlayerSyncScNotify {
    pub fn new() -> PlayerSyncScNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(20);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "OLFLKCBBJOH",
            |m: &PlayerSyncScNotify| { &m.OLFLKCBBJOH },
            |m: &mut PlayerSyncScNotify| { &mut m.OLFLKCBBJOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::LPFMHAJHDMM::LPFMHAJHDMM>(
            "BKEBJFIPJEH",
            |m: &PlayerSyncScNotify| { &m.BKEBJFIPJEH },
            |m: &mut PlayerSyncScNotify| { &mut m.BKEBJFIPJEH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "INKHDOGLEMN",
            |m: &PlayerSyncScNotify| { &m.INKHDOGLEMN },
            |m: &mut PlayerSyncScNotify| { &mut m.INKHDOGLEMN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ItemList::ItemList>(
            "MJOKLHFPGAD",
            |m: &PlayerSyncScNotify| { &m.MJOKLHFPGAD },
            |m: &mut PlayerSyncScNotify| { &mut m.MJOKLHFPGAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "equipment_list",
            |m: &PlayerSyncScNotify| { &m.equipment_list },
            |m: &mut PlayerSyncScNotify| { &mut m.equipment_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "multi_path_avatar_type_info_list",
            |m: &PlayerSyncScNotify| { &m.multi_path_avatar_type_info_list },
            |m: &mut PlayerSyncScNotify| { &mut m.multi_path_avatar_type_info_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FCOKFFEAPMI",
            |m: &PlayerSyncScNotify| { &m.FCOKFFEAPMI },
            |m: &mut PlayerSyncScNotify| { &mut m.FCOKFFEAPMI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "HLINMKBDKNC",
            |m: &PlayerSyncScNotify| { &m.HLINMKBDKNC },
            |m: &mut PlayerSyncScNotify| { &mut m.HLINMKBDKNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::GKIBNDNFNIJ::GKIBNDNFNIJ>(
            "EPBCNFMEFFP",
            |m: &PlayerSyncScNotify| { &m.EPBCNFMEFFP },
            |m: &mut PlayerSyncScNotify| { &mut m.EPBCNFMEFFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relic_list",
            |m: &PlayerSyncScNotify| { &m.relic_list },
            |m: &mut PlayerSyncScNotify| { &mut m.relic_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HKIKCAABHPB",
            |m: &PlayerSyncScNotify| { &m.HKIKCAABHPB },
            |m: &mut PlayerSyncScNotify| { &mut m.HKIKCAABHPB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DBANAPEAALP::DBANAPEAALP>(
            "GEJLEKBBFNC",
            |m: &PlayerSyncScNotify| { &m.GEJLEKBBFNC },
            |m: &mut PlayerSyncScNotify| { &mut m.GEJLEKBBFNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DMBMPAHKHLA::DMBMPAHKHLA>(
            "OMJOPKGJPLG",
            |m: &PlayerSyncScNotify| { &m.OMJOPKGJPLG },
            |m: &mut PlayerSyncScNotify| { &mut m.OMJOPKGJPLG },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::BLPMHFGIOAC::BLPMHFGIOAC>(
            "IGGOGFJFPDJ",
            |m: &PlayerSyncScNotify| { &m.IGGOGFJFPDJ },
            |m: &mut PlayerSyncScNotify| { &mut m.IGGOGFJFPDJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "DGINPELINHI",
            |m: &PlayerSyncScNotify| { &m.DGINPELINHI },
            |m: &mut PlayerSyncScNotify| { &mut m.DGINPELINHI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::OPGPOJAAHHG::OPGPOJAAHHG>(
            "PCLGHHFJMGA",
            |m: &PlayerSyncScNotify| { &m.PCLGHHFJMGA },
            |m: &mut PlayerSyncScNotify| { &mut m.PCLGHHFJMGA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "AOHKNGACOPN",
            |m: &PlayerSyncScNotify| { &m.AOHKNGACOPN },
            |m: &mut PlayerSyncScNotify| { &mut m.AOHKNGACOPN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PPAKDPOOANI",
            |m: &PlayerSyncScNotify| { &m.PPAKDPOOANI },
            |m: &mut PlayerSyncScNotify| { &mut m.PPAKDPOOANI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DJOLEKKPBGB::DJOLEKKPBGB>(
            "GPKGJLNHPJK",
            |m: &PlayerSyncScNotify| { &m.GPKGJLNHPJK },
            |m: &mut PlayerSyncScNotify| { &mut m.GPKGJLNHPJK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IGIPEIMGEAA",
            |m: &PlayerSyncScNotify| { &m.IGIPEIMGEAA },
            |m: &mut PlayerSyncScNotify| { &mut m.IGIPEIMGEAA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerSyncScNotify>(
            "PlayerSyncScNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerSyncScNotify {
    const NAME: &'static str = "PlayerSyncScNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                5162 => {
                    is.read_repeated_packed_uint32_into(&mut self.OLFLKCBBJOH)?;
                },
                5160 => {
                    self.OLFLKCBBJOH.push(is.read_uint32()?);
                },
                4610 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.BKEBJFIPJEH)?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.INKHDOGLEMN)?;
                },
                56 => {
                    self.INKHDOGLEMN.push(is.read_uint32()?);
                },
                5058 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.MJOKLHFPGAD)?;
                },
                34 => {
                    self.equipment_list.push(is.read_message()?);
                },
                962 => {
                    self.multi_path_avatar_type_info_list.push(is.read_message()?);
                },
                8154 => {
                    self.FCOKFFEAPMI.push(is.read_message()?);
                },
                82 => {
                    self.HLINMKBDKNC.push(is.read_message()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.EPBCNFMEFFP)?;
                },
                98 => {
                    self.relic_list.push(is.read_message()?);
                },
                10848 => {
                    self.HKIKCAABHPB = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GEJLEKBBFNC)?;
                },
                14906 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.OMJOPKGJPLG)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IGGOGFJFPDJ)?;
                },
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.DGINPELINHI)?;
                },
                8 => {
                    self.DGINPELINHI.push(is.read_uint32()?);
                },
                570 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.PCLGHHFJMGA)?;
                },
                50 => {
                    self.AOHKNGACOPN.push(is.read_message()?);
                },
                122 => {
                    self.PPAKDPOOANI.push(is.read_message()?);
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GPKGJLNHPJK)?;
                },
                16154 => {
                    self.IGIPEIMGEAA.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::vec_packed_uint32_size(645, &self.OLFLKCBBJOH);
        if let Some(v) = self.BKEBJFIPJEH.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.INKHDOGLEMN);
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.equipment_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.multi_path_avatar_type_info_list {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.FCOKFFEAPMI {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.HLINMKBDKNC {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.EPBCNFMEFFP.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.relic_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HKIKCAABHPB != 0 {
            my_size += ::protobuf::rt::uint32_size(1356, self.HKIKCAABHPB);
        }
        if let Some(v) = self.GEJLEKBBFNC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IGGOGFJFPDJ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(1, &self.DGINPELINHI);
        if let Some(v) = self.PCLGHHFJMGA.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.AOHKNGACOPN {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.PPAKDPOOANI {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.GPKGJLNHPJK.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.IGIPEIMGEAA {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_repeated_packed_uint32(645, &self.OLFLKCBBJOH)?;
        if let Some(v) = self.BKEBJFIPJEH.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(576, v, os)?;
        }
        os.write_repeated_packed_uint32(7, &self.INKHDOGLEMN)?;
        if let Some(v) = self.MJOKLHFPGAD.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(632, v, os)?;
        }
        for v in &self.equipment_list {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.multi_path_avatar_type_info_list {
            ::protobuf::rt::write_message_field_with_cached_size(120, v, os)?;
        };
        for v in &self.FCOKFFEAPMI {
            ::protobuf::rt::write_message_field_with_cached_size(1019, v, os)?;
        };
        for v in &self.HLINMKBDKNC {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if let Some(v) = self.EPBCNFMEFFP.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        for v in &self.relic_list {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.HKIKCAABHPB != 0 {
            os.write_uint32(1356, self.HKIKCAABHPB)?;
        }
        if let Some(v) = self.GEJLEKBBFNC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.OMJOPKGJPLG.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1863, v, os)?;
        }
        if let Some(v) = self.IGGOGFJFPDJ.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_repeated_packed_uint32(1, &self.DGINPELINHI)?;
        if let Some(v) = self.PCLGHHFJMGA.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(71, v, os)?;
        }
        for v in &self.AOHKNGACOPN {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.PPAKDPOOANI {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if let Some(v) = self.GPKGJLNHPJK.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        for v in &self.IGIPEIMGEAA {
            ::protobuf::rt::write_message_field_with_cached_size(2019, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerSyncScNotify {
        PlayerSyncScNotify::new()
    }

    fn clear(&mut self) {
        self.OLFLKCBBJOH.clear();
        self.BKEBJFIPJEH.clear();
        self.INKHDOGLEMN.clear();
        self.MJOKLHFPGAD.clear();
        self.equipment_list.clear();
        self.multi_path_avatar_type_info_list.clear();
        self.FCOKFFEAPMI.clear();
        self.HLINMKBDKNC.clear();
        self.EPBCNFMEFFP.clear();
        self.relic_list.clear();
        self.HKIKCAABHPB = 0;
        self.GEJLEKBBFNC.clear();
        self.OMJOPKGJPLG.clear();
        self.IGGOGFJFPDJ.clear();
        self.DGINPELINHI.clear();
        self.PCLGHHFJMGA.clear();
        self.AOHKNGACOPN.clear();
        self.PPAKDPOOANI.clear();
        self.GPKGJLNHPJK.clear();
        self.IGIPEIMGEAA.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerSyncScNotify {
        static instance: PlayerSyncScNotify = PlayerSyncScNotify {
            OLFLKCBBJOH: ::std::vec::Vec::new(),
            BKEBJFIPJEH: ::protobuf::MessageField::none(),
            INKHDOGLEMN: ::std::vec::Vec::new(),
            MJOKLHFPGAD: ::protobuf::MessageField::none(),
            equipment_list: ::std::vec::Vec::new(),
            multi_path_avatar_type_info_list: ::std::vec::Vec::new(),
            FCOKFFEAPMI: ::std::vec::Vec::new(),
            HLINMKBDKNC: ::std::vec::Vec::new(),
            EPBCNFMEFFP: ::protobuf::MessageField::none(),
            relic_list: ::std::vec::Vec::new(),
            HKIKCAABHPB: 0,
            GEJLEKBBFNC: ::protobuf::MessageField::none(),
            OMJOPKGJPLG: ::protobuf::MessageField::none(),
            IGGOGFJFPDJ: ::protobuf::MessageField::none(),
            DGINPELINHI: ::std::vec::Vec::new(),
            PCLGHHFJMGA: ::protobuf::MessageField::none(),
            AOHKNGACOPN: ::std::vec::Vec::new(),
            PPAKDPOOANI: ::std::vec::Vec::new(),
            GPKGJLNHPJK: ::protobuf::MessageField::none(),
            IGIPEIMGEAA: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerSyncScNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerSyncScNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerSyncScNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerSyncScNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18PlayerSyncScNotify.proto\x1a\x11BLPMHFGIOAC.proto\x1a\x11CLLPNMOCF\
    KB.proto\x1a\x11DBANAPEAALP.proto\x1a\x11DJOLEKKPBGB.proto\x1a\x11DMBMPA\
    HKHLA.proto\x1a\x0fEquipment.proto\x1a\x11FPPAMPPIHMN.proto\x1a\x11GKDIH\
    IFFHFD.proto\x1a\x11GKIBNDNFNIJ.proto\x1a\x0eItemList.proto\x1a\x11LPFMH\
    AJHDMM.proto\x1a\x0eMaterial.proto\x1a\x1dMultiPathAvatarTypeInfo.proto\
    \x1a\x11OPGPOJAAHHG.proto\x1a\x0bRelic.proto\"\xc5\x07\n\x12PlayerSyncSc\
    Notify\x12!\n\x0bOLFLKCBBJOH\x18\x85\x05\x20\x03(\rR\x0bOLFLKCBBJOH\x12/\
    \n\x0bBKEBJFIPJEH\x18\xc0\x04\x20\x01(\x0b2\x0c.LPFMHAJHDMMR\x0bBKEBJFIP\
    JEH\x12\x20\n\x0bINKHDOGLEMN\x18\x07\x20\x03(\rR\x0bINKHDOGLEMN\x12,\n\
    \x0bMJOKLHFPGAD\x18\xf8\x04\x20\x01(\x0b2\t.ItemListR\x0bMJOKLHFPGAD\x12\
    1\n\x0eequipment_list\x18\x04\x20\x03(\x0b2\n.EquipmentR\requipmentList\
    \x12_\n\x20multi_path_avatar_type_info_list\x18x\x20\x03(\x0b2\x18.Multi\
    PathAvatarTypeInfoR\x1bmultiPathAvatarTypeInfoList\x12,\n\x0bFCOKFFEAPMI\
    \x18\xfb\x07\x20\x03(\x0b2\t.MaterialR\x0bFCOKFFEAPMI\x12.\n\x0bHLINMKBD\
    KNC\x18\n\x20\x03(\x0b2\x0c.CLLPNMOCFKBR\x0bHLINMKBDKNC\x12.\n\x0bEPBCNF\
    MEFFP\x18\x08\x20\x01(\x0b2\x0c.GKIBNDNFNIJR\x0bEPBCNFMEFFP\x12%\n\nreli\
    c_list\x18\x0c\x20\x03(\x0b2\x06.RelicR\trelicList\x12!\n\x0bHKIKCAABHPB\
    \x18\xcc\n\x20\x01(\rR\x0bHKIKCAABHPB\x12.\n\x0bGEJLEKBBFNC\x18\x02\x20\
    \x01(\x0b2\x0c.DBANAPEAALPR\x0bGEJLEKBBFNC\x12/\n\x0bOMJOPKGJPLG\x18\xc7\
    \x0e\x20\x01(\x0b2\x0c.DMBMPAHKHLAR\x0bOMJOPKGJPLG\x12.\n\x0bIGGOGFJFPDJ\
    \x18\x05\x20\x01(\x0b2\x0c.BLPMHFGIOACR\x0bIGGOGFJFPDJ\x12\x20\n\x0bDGIN\
    PELINHI\x18\x01\x20\x03(\rR\x0bDGINPELINHI\x12.\n\x0bPCLGHHFJMGA\x18G\
    \x20\x01(\x0b2\x0c.OPGPOJAAHHGR\x0bPCLGHHFJMGA\x12+\n\x0bAOHKNGACOPN\x18\
    \x06\x20\x03(\x0b2\t.MaterialR\x0bAOHKNGACOPN\x12.\n\x0bPPAKDPOOANI\x18\
    \x0f\x20\x03(\x0b2\x0c.FPPAMPPIHMNR\x0bPPAKDPOOANI\x12.\n\x0bGPKGJLNHPJK\
    \x18\x0e\x20\x01(\x0b2\x0c.DJOLEKKPBGBR\x0bGPKGJLNHPJK\x12/\n\x0bIGIPEIM\
    GEAA\x18\xe3\x0f\x20\x03(\x0b2\x0c.GKDIHIFFHFDR\x0bIGIPEIMGEAAb\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(15);
            deps.push(super::BLPMHFGIOAC::file_descriptor().clone());
            deps.push(super::CLLPNMOCFKB::file_descriptor().clone());
            deps.push(super::DBANAPEAALP::file_descriptor().clone());
            deps.push(super::DJOLEKKPBGB::file_descriptor().clone());
            deps.push(super::DMBMPAHKHLA::file_descriptor().clone());
            deps.push(super::Equipment::file_descriptor().clone());
            deps.push(super::FPPAMPPIHMN::file_descriptor().clone());
            deps.push(super::GKDIHIFFHFD::file_descriptor().clone());
            deps.push(super::GKIBNDNFNIJ::file_descriptor().clone());
            deps.push(super::ItemList::file_descriptor().clone());
            deps.push(super::LPFMHAJHDMM::file_descriptor().clone());
            deps.push(super::Material::file_descriptor().clone());
            deps.push(super::MultiPathAvatarTypeInfo::file_descriptor().clone());
            deps.push(super::OPGPOJAAHHG::file_descriptor().clone());
            deps.push(super::Relic::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PlayerSyncScNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
