// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `EIOHAGHELOA.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:EIOHAGHELOA)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EIOHAGHELOA {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<eiohagheloa::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:EIOHAGHELOA.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EIOHAGHELOA {
    fn default() -> &'a EIOHAGHELOA {
        <EIOHAGHELOA as ::protobuf::Message>::default_instance()
    }
}

impl EIOHAGHELOA {
    pub fn new() -> EIOHAGHELOA {
        ::std::default::Default::default()
    }

    // .RogueCommonBuffSelectInfo NLNBNGIJAFI = 1928;

    pub fn NLNBNGIJAFI(&self) -> &super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(ref v)) => v,
            _ => <super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NLNBNGIJAFI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NLNBNGIJAFI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NLNBNGIJAFI(&mut self, v: super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NLNBNGIJAFI(&mut self) -> &mut super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NLNBNGIJAFI(&mut self) -> super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo {
        if self.has_NLNBNGIJAFI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo::new()
        }
    }

    // .LEFCOMGMPCL FPHHHIOBFAI = 778;

    pub fn FPHHHIOBFAI(&self) -> &super::LEFCOMGMPCL::LEFCOMGMPCL {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(ref v)) => v,
            _ => <super::LEFCOMGMPCL::LEFCOMGMPCL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FPHHHIOBFAI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FPHHHIOBFAI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FPHHHIOBFAI(&mut self, v: super::LEFCOMGMPCL::LEFCOMGMPCL) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FPHHHIOBFAI(&mut self) -> &mut super::LEFCOMGMPCL::LEFCOMGMPCL {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(super::LEFCOMGMPCL::LEFCOMGMPCL::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FPHHHIOBFAI(&mut self) -> super::LEFCOMGMPCL::LEFCOMGMPCL {
        if self.has_FPHHHIOBFAI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LEFCOMGMPCL::LEFCOMGMPCL::new()
        }
    }

    // .IPGKAGFFBHF AJDDFANCEJN = 216;

    pub fn AJDDFANCEJN(&self) -> &super::IPGKAGFFBHF::IPGKAGFFBHF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(ref v)) => v,
            _ => <super::IPGKAGFFBHF::IPGKAGFFBHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AJDDFANCEJN(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AJDDFANCEJN(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AJDDFANCEJN(&mut self, v: super::IPGKAGFFBHF::IPGKAGFFBHF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AJDDFANCEJN(&mut self) -> &mut super::IPGKAGFFBHF::IPGKAGFFBHF {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(super::IPGKAGFFBHF::IPGKAGFFBHF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AJDDFANCEJN(&mut self) -> super::IPGKAGFFBHF::IPGKAGFFBHF {
        if self.has_AJDDFANCEJN() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IPGKAGFFBHF::IPGKAGFFBHF::new()
        }
    }

    // .KBPMFKKNBJH IMIKPGFHLHK = 953;

    pub fn IMIKPGFHLHK(&self) -> &super::KBPMFKKNBJH::KBPMFKKNBJH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(ref v)) => v,
            _ => <super::KBPMFKKNBJH::KBPMFKKNBJH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IMIKPGFHLHK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IMIKPGFHLHK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IMIKPGFHLHK(&mut self, v: super::KBPMFKKNBJH::KBPMFKKNBJH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IMIKPGFHLHK(&mut self) -> &mut super::KBPMFKKNBJH::KBPMFKKNBJH {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(super::KBPMFKKNBJH::KBPMFKKNBJH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IMIKPGFHLHK(&mut self) -> super::KBPMFKKNBJH::KBPMFKKNBJH {
        if self.has_IMIKPGFHLHK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KBPMFKKNBJH::KBPMFKKNBJH::new()
        }
    }

    // .EBHGHGIIGOM CJENJIFEIDI = 703;

    pub fn CJENJIFEIDI(&self) -> &super::EBHGHGIIGOM::EBHGHGIIGOM {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(ref v)) => v,
            _ => <super::EBHGHGIIGOM::EBHGHGIIGOM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CJENJIFEIDI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CJENJIFEIDI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CJENJIFEIDI(&mut self, v: super::EBHGHGIIGOM::EBHGHGIIGOM) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CJENJIFEIDI(&mut self) -> &mut super::EBHGHGIIGOM::EBHGHGIIGOM {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(super::EBHGHGIIGOM::EBHGHGIIGOM::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CJENJIFEIDI(&mut self) -> super::EBHGHGIIGOM::EBHGHGIIGOM {
        if self.has_CJENJIFEIDI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EBHGHGIIGOM::EBHGHGIIGOM::new()
        }
    }

    // .ANMCAIMELCA BICJEMPPLAM = 495;

    pub fn BICJEMPPLAM(&self) -> &super::ANMCAIMELCA::ANMCAIMELCA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(ref v)) => v,
            _ => <super::ANMCAIMELCA::ANMCAIMELCA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BICJEMPPLAM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BICJEMPPLAM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BICJEMPPLAM(&mut self, v: super::ANMCAIMELCA::ANMCAIMELCA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BICJEMPPLAM(&mut self) -> &mut super::ANMCAIMELCA::ANMCAIMELCA {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(super::ANMCAIMELCA::ANMCAIMELCA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BICJEMPPLAM(&mut self) -> super::ANMCAIMELCA::ANMCAIMELCA {
        if self.has_BICJEMPPLAM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ANMCAIMELCA::ANMCAIMELCA::new()
        }
    }

    // .GABBEHOIPJC AELPPPIEFAB = 1830;

    pub fn AELPPPIEFAB(&self) -> &super::GABBEHOIPJC::GABBEHOIPJC {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(ref v)) => v,
            _ => <super::GABBEHOIPJC::GABBEHOIPJC as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AELPPPIEFAB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AELPPPIEFAB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AELPPPIEFAB(&mut self, v: super::GABBEHOIPJC::GABBEHOIPJC) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AELPPPIEFAB(&mut self) -> &mut super::GABBEHOIPJC::GABBEHOIPJC {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(super::GABBEHOIPJC::GABBEHOIPJC::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AELPPPIEFAB(&mut self) -> super::GABBEHOIPJC::GABBEHOIPJC {
        if self.has_AELPPPIEFAB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GABBEHOIPJC::GABBEHOIPJC::new()
        }
    }

    // .MLKICCAELKE BEDIACHLCII = 1487;

    pub fn BEDIACHLCII(&self) -> &super::MLKICCAELKE::MLKICCAELKE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(ref v)) => v,
            _ => <super::MLKICCAELKE::MLKICCAELKE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BEDIACHLCII(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BEDIACHLCII(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BEDIACHLCII(&mut self, v: super::MLKICCAELKE::MLKICCAELKE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BEDIACHLCII(&mut self) -> &mut super::MLKICCAELKE::MLKICCAELKE {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(super::MLKICCAELKE::MLKICCAELKE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BEDIACHLCII(&mut self) -> super::MLKICCAELKE::MLKICCAELKE {
        if self.has_BEDIACHLCII() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MLKICCAELKE::MLKICCAELKE::new()
        }
    }

    // .EAKECFAPPKD LADGCOOMNKA = 1802;

    pub fn LADGCOOMNKA(&self) -> &super::EAKECFAPPKD::EAKECFAPPKD {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(ref v)) => v,
            _ => <super::EAKECFAPPKD::EAKECFAPPKD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LADGCOOMNKA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LADGCOOMNKA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LADGCOOMNKA(&mut self, v: super::EAKECFAPPKD::EAKECFAPPKD) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LADGCOOMNKA(&mut self) -> &mut super::EAKECFAPPKD::EAKECFAPPKD {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(super::EAKECFAPPKD::EAKECFAPPKD::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LADGCOOMNKA(&mut self) -> super::EAKECFAPPKD::EAKECFAPPKD {
        if self.has_LADGCOOMNKA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EAKECFAPPKD::EAKECFAPPKD::new()
        }
    }

    // .ELDAFCNMFBF CGKFOMNCNAK = 925;

    pub fn CGKFOMNCNAK(&self) -> &super::ELDAFCNMFBF::ELDAFCNMFBF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(ref v)) => v,
            _ => <super::ELDAFCNMFBF::ELDAFCNMFBF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CGKFOMNCNAK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CGKFOMNCNAK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CGKFOMNCNAK(&mut self, v: super::ELDAFCNMFBF::ELDAFCNMFBF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CGKFOMNCNAK(&mut self) -> &mut super::ELDAFCNMFBF::ELDAFCNMFBF {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(super::ELDAFCNMFBF::ELDAFCNMFBF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CGKFOMNCNAK(&mut self) -> super::ELDAFCNMFBF::ELDAFCNMFBF {
        if self.has_CGKFOMNCNAK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ELDAFCNMFBF::ELDAFCNMFBF::new()
        }
    }

    // .LCAGIOOIIDN EIEFMPFLLCM = 663;

    pub fn EIEFMPFLLCM(&self) -> &super::LCAGIOOIIDN::LCAGIOOIIDN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(ref v)) => v,
            _ => <super::LCAGIOOIIDN::LCAGIOOIIDN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EIEFMPFLLCM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_EIEFMPFLLCM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EIEFMPFLLCM(&mut self, v: super::LCAGIOOIIDN::LCAGIOOIIDN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EIEFMPFLLCM(&mut self) -> &mut super::LCAGIOOIIDN::LCAGIOOIIDN {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(super::LCAGIOOIIDN::LCAGIOOIIDN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EIEFMPFLLCM(&mut self) -> super::LCAGIOOIIDN::LCAGIOOIIDN {
        if self.has_EIEFMPFLLCM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LCAGIOOIIDN::LCAGIOOIIDN::new()
        }
    }

    // .OFPEKNMFMAB NKKBODGFCLM = 1548;

    pub fn NKKBODGFCLM(&self) -> &super::OFPEKNMFMAB::OFPEKNMFMAB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(ref v)) => v,
            _ => <super::OFPEKNMFMAB::OFPEKNMFMAB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NKKBODGFCLM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NKKBODGFCLM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NKKBODGFCLM(&mut self, v: super::OFPEKNMFMAB::OFPEKNMFMAB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NKKBODGFCLM(&mut self) -> &mut super::OFPEKNMFMAB::OFPEKNMFMAB {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(super::OFPEKNMFMAB::OFPEKNMFMAB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NKKBODGFCLM(&mut self) -> super::OFPEKNMFMAB::OFPEKNMFMAB {
        if self.has_NKKBODGFCLM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OFPEKNMFMAB::OFPEKNMFMAB::new()
        }
    }

    // .DLCJMOHOBDH GKFLNMOJNCP = 980;

    pub fn GKFLNMOJNCP(&self) -> &super::DLCJMOHOBDH::DLCJMOHOBDH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(ref v)) => v,
            _ => <super::DLCJMOHOBDH::DLCJMOHOBDH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_GKFLNMOJNCP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_GKFLNMOJNCP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_GKFLNMOJNCP(&mut self, v: super::DLCJMOHOBDH::DLCJMOHOBDH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_GKFLNMOJNCP(&mut self) -> &mut super::DLCJMOHOBDH::DLCJMOHOBDH {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(super::DLCJMOHOBDH::DLCJMOHOBDH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_GKFLNMOJNCP(&mut self) -> super::DLCJMOHOBDH::DLCJMOHOBDH {
        if self.has_GKFLNMOJNCP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DLCJMOHOBDH::DLCJMOHOBDH::new()
        }
    }

    // .RogueFormulaSelectInfo BJEHOAFBHBE = 1146;

    pub fn BJEHOAFBHBE(&self) -> &super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(ref v)) => v,
            _ => <super::RogueFormulaSelectInfo::RogueFormulaSelectInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BJEHOAFBHBE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BJEHOAFBHBE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BJEHOAFBHBE(&mut self, v: super::RogueFormulaSelectInfo::RogueFormulaSelectInfo) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BJEHOAFBHBE(&mut self) -> &mut super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BJEHOAFBHBE(&mut self) -> super::RogueFormulaSelectInfo::RogueFormulaSelectInfo {
        if self.has_BJEHOAFBHBE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::RogueFormulaSelectInfo::RogueFormulaSelectInfo::new()
        }
    }

    // .FHMAIANENPO JBKPIKAJPEB = 581;

    pub fn JBKPIKAJPEB(&self) -> &super::FHMAIANENPO::FHMAIANENPO {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(ref v)) => v,
            _ => <super::FHMAIANENPO::FHMAIANENPO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JBKPIKAJPEB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JBKPIKAJPEB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JBKPIKAJPEB(&mut self, v: super::FHMAIANENPO::FHMAIANENPO) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JBKPIKAJPEB(&mut self) -> &mut super::FHMAIANENPO::FHMAIANENPO {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(super::FHMAIANENPO::FHMAIANENPO::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JBKPIKAJPEB(&mut self) -> super::FHMAIANENPO::FHMAIANENPO {
        if self.has_JBKPIKAJPEB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FHMAIANENPO::FHMAIANENPO::new()
        }
    }

    // .BPDDOBAHPNA HCCHFJEFANJ = 1590;

    pub fn HCCHFJEFANJ(&self) -> &super::BPDDOBAHPNA::BPDDOBAHPNA {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(ref v)) => v,
            _ => <super::BPDDOBAHPNA::BPDDOBAHPNA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HCCHFJEFANJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HCCHFJEFANJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HCCHFJEFANJ(&mut self, v: super::BPDDOBAHPNA::BPDDOBAHPNA) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HCCHFJEFANJ(&mut self) -> &mut super::BPDDOBAHPNA::BPDDOBAHPNA {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(super::BPDDOBAHPNA::BPDDOBAHPNA::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HCCHFJEFANJ(&mut self) -> super::BPDDOBAHPNA::BPDDOBAHPNA {
        if self.has_HCCHFJEFANJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BPDDOBAHPNA::BPDDOBAHPNA::new()
        }
    }

    // .OEDOAOGAKPP OIOMHOPNIMF = 1512;

    pub fn OIOMHOPNIMF(&self) -> &super::OEDOAOGAKPP::OEDOAOGAKPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(ref v)) => v,
            _ => <super::OEDOAOGAKPP::OEDOAOGAKPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OIOMHOPNIMF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OIOMHOPNIMF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OIOMHOPNIMF(&mut self, v: super::OEDOAOGAKPP::OEDOAOGAKPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OIOMHOPNIMF(&mut self) -> &mut super::OEDOAOGAKPP::OEDOAOGAKPP {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(super::OEDOAOGAKPP::OEDOAOGAKPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OIOMHOPNIMF(&mut self) -> super::OEDOAOGAKPP::OEDOAOGAKPP {
        if self.has_OIOMHOPNIMF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OEDOAOGAKPP::OEDOAOGAKPP::new()
        }
    }

    // .FLNAGDEOOPG IFCLAAFPKHC = 1733;

    pub fn IFCLAAFPKHC(&self) -> &super::FLNAGDEOOPG::FLNAGDEOOPG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(ref v)) => v,
            _ => <super::FLNAGDEOOPG::FLNAGDEOOPG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IFCLAAFPKHC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IFCLAAFPKHC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IFCLAAFPKHC(&mut self, v: super::FLNAGDEOOPG::FLNAGDEOOPG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IFCLAAFPKHC(&mut self) -> &mut super::FLNAGDEOOPG::FLNAGDEOOPG {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(super::FLNAGDEOOPG::FLNAGDEOOPG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IFCLAAFPKHC(&mut self) -> super::FLNAGDEOOPG::FLNAGDEOOPG {
        if self.has_IFCLAAFPKHC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FLNAGDEOOPG::FLNAGDEOOPG::new()
        }
    }

    // .JKHKEBMOBEJ HFJECHFANNF = 727;

    pub fn HFJECHFANNF(&self) -> &super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(ref v)) => v,
            _ => <super::JKHKEBMOBEJ::JKHKEBMOBEJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_HFJECHFANNF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_HFJECHFANNF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_HFJECHFANNF(&mut self, v: super::JKHKEBMOBEJ::JKHKEBMOBEJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_HFJECHFANNF(&mut self) -> &mut super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(super::JKHKEBMOBEJ::JKHKEBMOBEJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_HFJECHFANNF(&mut self) -> super::JKHKEBMOBEJ::JKHKEBMOBEJ {
        if self.has_HFJECHFANNF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JKHKEBMOBEJ::JKHKEBMOBEJ::new()
        }
    }

    // .OEDOAOGAKPP LDJOMIOJEPF = 455;

    pub fn LDJOMIOJEPF(&self) -> &super::OEDOAOGAKPP::OEDOAOGAKPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(ref v)) => v,
            _ => <super::OEDOAOGAKPP::OEDOAOGAKPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LDJOMIOJEPF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LDJOMIOJEPF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LDJOMIOJEPF(&mut self, v: super::OEDOAOGAKPP::OEDOAOGAKPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LDJOMIOJEPF(&mut self) -> &mut super::OEDOAOGAKPP::OEDOAOGAKPP {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(super::OEDOAOGAKPP::OEDOAOGAKPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LDJOMIOJEPF(&mut self) -> super::OEDOAOGAKPP::OEDOAOGAKPP {
        if self.has_LDJOMIOJEPF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OEDOAOGAKPP::OEDOAOGAKPP::new()
        }
    }

    // .OEDOAOGAKPP LMNONCMBIOO = 1810;

    pub fn LMNONCMBIOO(&self) -> &super::OEDOAOGAKPP::OEDOAOGAKPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(ref v)) => v,
            _ => <super::OEDOAOGAKPP::OEDOAOGAKPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LMNONCMBIOO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_LMNONCMBIOO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LMNONCMBIOO(&mut self, v: super::OEDOAOGAKPP::OEDOAOGAKPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LMNONCMBIOO(&mut self) -> &mut super::OEDOAOGAKPP::OEDOAOGAKPP {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(super::OEDOAOGAKPP::OEDOAOGAKPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LMNONCMBIOO(&mut self) -> super::OEDOAOGAKPP::OEDOAOGAKPP {
        if self.has_LMNONCMBIOO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OEDOAOGAKPP::OEDOAOGAKPP::new()
        }
    }

    // .OEDOAOGAKPP CNLMCOBNCAI = 1882;

    pub fn CNLMCOBNCAI(&self) -> &super::OEDOAOGAKPP::OEDOAOGAKPP {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(ref v)) => v,
            _ => <super::OEDOAOGAKPP::OEDOAOGAKPP as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CNLMCOBNCAI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_CNLMCOBNCAI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CNLMCOBNCAI(&mut self, v: super::OEDOAOGAKPP::OEDOAOGAKPP) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CNLMCOBNCAI(&mut self) -> &mut super::OEDOAOGAKPP::OEDOAOGAKPP {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(super::OEDOAOGAKPP::OEDOAOGAKPP::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CNLMCOBNCAI(&mut self) -> super::OEDOAOGAKPP::OEDOAOGAKPP {
        if self.has_CNLMCOBNCAI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::OEDOAOGAKPP::OEDOAOGAKPP::new()
        }
    }

    // .KKAGNMEMKOG FHOKDLLICJL = 504;

    pub fn FHOKDLLICJL(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FHOKDLLICJL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FHOKDLLICJL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FHOKDLLICJL(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FHOKDLLICJL(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FHOKDLLICJL(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_FHOKDLLICJL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .KKAGNMEMKOG PHDEMDBGOIB = 234;

    pub fn PHDEMDBGOIB(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PHDEMDBGOIB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PHDEMDBGOIB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PHDEMDBGOIB(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PHDEMDBGOIB(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PHDEMDBGOIB(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_PHDEMDBGOIB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .KKAGNMEMKOG KLJJIBPJGFF = 156;

    pub fn KLJJIBPJGFF(&self) -> &super::KKAGNMEMKOG::KKAGNMEMKOG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(ref v)) => v,
            _ => <super::KKAGNMEMKOG::KKAGNMEMKOG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KLJJIBPJGFF(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KLJJIBPJGFF(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KLJJIBPJGFF(&mut self, v: super::KKAGNMEMKOG::KKAGNMEMKOG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KLJJIBPJGFF(&mut self) -> &mut super::KKAGNMEMKOG::KKAGNMEMKOG {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(super::KKAGNMEMKOG::KKAGNMEMKOG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KLJJIBPJGFF(&mut self) -> super::KKAGNMEMKOG::KKAGNMEMKOG {
        if self.has_KLJJIBPJGFF() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KKAGNMEMKOG::KKAGNMEMKOG::new()
        }
    }

    // .PIGFBKOJNHG DLFALFGFDHE = 1837;

    pub fn DLFALFGFDHE(&self) -> &super::PIGFBKOJNHG::PIGFBKOJNHG {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(ref v)) => v,
            _ => <super::PIGFBKOJNHG::PIGFBKOJNHG as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DLFALFGFDHE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DLFALFGFDHE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DLFALFGFDHE(&mut self, v: super::PIGFBKOJNHG::PIGFBKOJNHG) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DLFALFGFDHE(&mut self) -> &mut super::PIGFBKOJNHG::PIGFBKOJNHG {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(super::PIGFBKOJNHG::PIGFBKOJNHG::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DLFALFGFDHE(&mut self) -> super::PIGFBKOJNHG::PIGFBKOJNHG {
        if self.has_DLFALFGFDHE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PIGFBKOJNHG::PIGFBKOJNHG::new()
        }
    }

    // .CGGBPJICHGF NPCDBPNDGOP = 493;

    pub fn NPCDBPNDGOP(&self) -> &super::CGGBPJICHGF::CGGBPJICHGF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(ref v)) => v,
            _ => <super::CGGBPJICHGF::CGGBPJICHGF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NPCDBPNDGOP(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NPCDBPNDGOP(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NPCDBPNDGOP(&mut self, v: super::CGGBPJICHGF::CGGBPJICHGF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NPCDBPNDGOP(&mut self) -> &mut super::CGGBPJICHGF::CGGBPJICHGF {
        if let ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(super::CGGBPJICHGF::CGGBPJICHGF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NPCDBPNDGOP(&mut self) -> super::CGGBPJICHGF::CGGBPJICHGF {
        if self.has_NPCDBPNDGOP() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CGGBPJICHGF::CGGBPJICHGF::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(27);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo>(
            "NLNBNGIJAFI",
            EIOHAGHELOA::has_NLNBNGIJAFI,
            EIOHAGHELOA::NLNBNGIJAFI,
            EIOHAGHELOA::mut_NLNBNGIJAFI,
            EIOHAGHELOA::set_NLNBNGIJAFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LEFCOMGMPCL::LEFCOMGMPCL>(
            "FPHHHIOBFAI",
            EIOHAGHELOA::has_FPHHHIOBFAI,
            EIOHAGHELOA::FPHHHIOBFAI,
            EIOHAGHELOA::mut_FPHHHIOBFAI,
            EIOHAGHELOA::set_FPHHHIOBFAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IPGKAGFFBHF::IPGKAGFFBHF>(
            "AJDDFANCEJN",
            EIOHAGHELOA::has_AJDDFANCEJN,
            EIOHAGHELOA::AJDDFANCEJN,
            EIOHAGHELOA::mut_AJDDFANCEJN,
            EIOHAGHELOA::set_AJDDFANCEJN,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KBPMFKKNBJH::KBPMFKKNBJH>(
            "IMIKPGFHLHK",
            EIOHAGHELOA::has_IMIKPGFHLHK,
            EIOHAGHELOA::IMIKPGFHLHK,
            EIOHAGHELOA::mut_IMIKPGFHLHK,
            EIOHAGHELOA::set_IMIKPGFHLHK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EBHGHGIIGOM::EBHGHGIIGOM>(
            "CJENJIFEIDI",
            EIOHAGHELOA::has_CJENJIFEIDI,
            EIOHAGHELOA::CJENJIFEIDI,
            EIOHAGHELOA::mut_CJENJIFEIDI,
            EIOHAGHELOA::set_CJENJIFEIDI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ANMCAIMELCA::ANMCAIMELCA>(
            "BICJEMPPLAM",
            EIOHAGHELOA::has_BICJEMPPLAM,
            EIOHAGHELOA::BICJEMPPLAM,
            EIOHAGHELOA::mut_BICJEMPPLAM,
            EIOHAGHELOA::set_BICJEMPPLAM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GABBEHOIPJC::GABBEHOIPJC>(
            "AELPPPIEFAB",
            EIOHAGHELOA::has_AELPPPIEFAB,
            EIOHAGHELOA::AELPPPIEFAB,
            EIOHAGHELOA::mut_AELPPPIEFAB,
            EIOHAGHELOA::set_AELPPPIEFAB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MLKICCAELKE::MLKICCAELKE>(
            "BEDIACHLCII",
            EIOHAGHELOA::has_BEDIACHLCII,
            EIOHAGHELOA::BEDIACHLCII,
            EIOHAGHELOA::mut_BEDIACHLCII,
            EIOHAGHELOA::set_BEDIACHLCII,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EAKECFAPPKD::EAKECFAPPKD>(
            "LADGCOOMNKA",
            EIOHAGHELOA::has_LADGCOOMNKA,
            EIOHAGHELOA::LADGCOOMNKA,
            EIOHAGHELOA::mut_LADGCOOMNKA,
            EIOHAGHELOA::set_LADGCOOMNKA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::ELDAFCNMFBF::ELDAFCNMFBF>(
            "CGKFOMNCNAK",
            EIOHAGHELOA::has_CGKFOMNCNAK,
            EIOHAGHELOA::CGKFOMNCNAK,
            EIOHAGHELOA::mut_CGKFOMNCNAK,
            EIOHAGHELOA::set_CGKFOMNCNAK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LCAGIOOIIDN::LCAGIOOIIDN>(
            "EIEFMPFLLCM",
            EIOHAGHELOA::has_EIEFMPFLLCM,
            EIOHAGHELOA::EIEFMPFLLCM,
            EIOHAGHELOA::mut_EIEFMPFLLCM,
            EIOHAGHELOA::set_EIEFMPFLLCM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OFPEKNMFMAB::OFPEKNMFMAB>(
            "NKKBODGFCLM",
            EIOHAGHELOA::has_NKKBODGFCLM,
            EIOHAGHELOA::NKKBODGFCLM,
            EIOHAGHELOA::mut_NKKBODGFCLM,
            EIOHAGHELOA::set_NKKBODGFCLM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DLCJMOHOBDH::DLCJMOHOBDH>(
            "GKFLNMOJNCP",
            EIOHAGHELOA::has_GKFLNMOJNCP,
            EIOHAGHELOA::GKFLNMOJNCP,
            EIOHAGHELOA::mut_GKFLNMOJNCP,
            EIOHAGHELOA::set_GKFLNMOJNCP,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::RogueFormulaSelectInfo::RogueFormulaSelectInfo>(
            "BJEHOAFBHBE",
            EIOHAGHELOA::has_BJEHOAFBHBE,
            EIOHAGHELOA::BJEHOAFBHBE,
            EIOHAGHELOA::mut_BJEHOAFBHBE,
            EIOHAGHELOA::set_BJEHOAFBHBE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FHMAIANENPO::FHMAIANENPO>(
            "JBKPIKAJPEB",
            EIOHAGHELOA::has_JBKPIKAJPEB,
            EIOHAGHELOA::JBKPIKAJPEB,
            EIOHAGHELOA::mut_JBKPIKAJPEB,
            EIOHAGHELOA::set_JBKPIKAJPEB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::BPDDOBAHPNA::BPDDOBAHPNA>(
            "HCCHFJEFANJ",
            EIOHAGHELOA::has_HCCHFJEFANJ,
            EIOHAGHELOA::HCCHFJEFANJ,
            EIOHAGHELOA::mut_HCCHFJEFANJ,
            EIOHAGHELOA::set_HCCHFJEFANJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OEDOAOGAKPP::OEDOAOGAKPP>(
            "OIOMHOPNIMF",
            EIOHAGHELOA::has_OIOMHOPNIMF,
            EIOHAGHELOA::OIOMHOPNIMF,
            EIOHAGHELOA::mut_OIOMHOPNIMF,
            EIOHAGHELOA::set_OIOMHOPNIMF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FLNAGDEOOPG::FLNAGDEOOPG>(
            "IFCLAAFPKHC",
            EIOHAGHELOA::has_IFCLAAFPKHC,
            EIOHAGHELOA::IFCLAAFPKHC,
            EIOHAGHELOA::mut_IFCLAAFPKHC,
            EIOHAGHELOA::set_IFCLAAFPKHC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JKHKEBMOBEJ::JKHKEBMOBEJ>(
            "HFJECHFANNF",
            EIOHAGHELOA::has_HFJECHFANNF,
            EIOHAGHELOA::HFJECHFANNF,
            EIOHAGHELOA::mut_HFJECHFANNF,
            EIOHAGHELOA::set_HFJECHFANNF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OEDOAOGAKPP::OEDOAOGAKPP>(
            "LDJOMIOJEPF",
            EIOHAGHELOA::has_LDJOMIOJEPF,
            EIOHAGHELOA::LDJOMIOJEPF,
            EIOHAGHELOA::mut_LDJOMIOJEPF,
            EIOHAGHELOA::set_LDJOMIOJEPF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OEDOAOGAKPP::OEDOAOGAKPP>(
            "LMNONCMBIOO",
            EIOHAGHELOA::has_LMNONCMBIOO,
            EIOHAGHELOA::LMNONCMBIOO,
            EIOHAGHELOA::mut_LMNONCMBIOO,
            EIOHAGHELOA::set_LMNONCMBIOO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::OEDOAOGAKPP::OEDOAOGAKPP>(
            "CNLMCOBNCAI",
            EIOHAGHELOA::has_CNLMCOBNCAI,
            EIOHAGHELOA::CNLMCOBNCAI,
            EIOHAGHELOA::mut_CNLMCOBNCAI,
            EIOHAGHELOA::set_CNLMCOBNCAI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "FHOKDLLICJL",
            EIOHAGHELOA::has_FHOKDLLICJL,
            EIOHAGHELOA::FHOKDLLICJL,
            EIOHAGHELOA::mut_FHOKDLLICJL,
            EIOHAGHELOA::set_FHOKDLLICJL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "PHDEMDBGOIB",
            EIOHAGHELOA::has_PHDEMDBGOIB,
            EIOHAGHELOA::PHDEMDBGOIB,
            EIOHAGHELOA::mut_PHDEMDBGOIB,
            EIOHAGHELOA::set_PHDEMDBGOIB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KKAGNMEMKOG::KKAGNMEMKOG>(
            "KLJJIBPJGFF",
            EIOHAGHELOA::has_KLJJIBPJGFF,
            EIOHAGHELOA::KLJJIBPJGFF,
            EIOHAGHELOA::mut_KLJJIBPJGFF,
            EIOHAGHELOA::set_KLJJIBPJGFF,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PIGFBKOJNHG::PIGFBKOJNHG>(
            "DLFALFGFDHE",
            EIOHAGHELOA::has_DLFALFGFDHE,
            EIOHAGHELOA::DLFALFGFDHE,
            EIOHAGHELOA::mut_DLFALFGFDHE,
            EIOHAGHELOA::set_DLFALFGFDHE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CGGBPJICHGF::CGGBPJICHGF>(
            "NPCDBPNDGOP",
            EIOHAGHELOA::has_NPCDBPNDGOP,
            EIOHAGHELOA::NPCDBPNDGOP,
            EIOHAGHELOA::mut_NPCDBPNDGOP,
            EIOHAGHELOA::set_NPCDBPNDGOP,
        ));
        oneofs.push(eiohagheloa::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EIOHAGHELOA>(
            "EIOHAGHELOA",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EIOHAGHELOA {
    const NAME: &'static str = "EIOHAGHELOA";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                15426 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(is.read_message()?));
                },
                6226 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(is.read_message()?));
                },
                1730 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(is.read_message()?));
                },
                7626 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(is.read_message()?));
                },
                5626 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(is.read_message()?));
                },
                3962 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(is.read_message()?));
                },
                14642 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(is.read_message()?));
                },
                11898 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BEDIACHLCII(is.read_message()?));
                },
                14418 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(is.read_message()?));
                },
                7402 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(is.read_message()?));
                },
                5306 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(is.read_message()?));
                },
                12386 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(is.read_message()?));
                },
                7842 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(is.read_message()?));
                },
                9170 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(is.read_message()?));
                },
                4650 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(is.read_message()?));
                },
                12722 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(is.read_message()?));
                },
                12098 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(is.read_message()?));
                },
                13866 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(is.read_message()?));
                },
                5818 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::HFJECHFANNF(is.read_message()?));
                },
                3642 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(is.read_message()?));
                },
                14482 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(is.read_message()?));
                },
                15058 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(is.read_message()?));
                },
                4034 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(is.read_message()?));
                },
                1874 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(is.read_message()?));
                },
                1250 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(is.read_message()?));
                },
                14698 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(is.read_message()?));
                },
                3946 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::BEDIACHLCII(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::HFJECHFANNF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &eiohagheloa::KFELKJLDKEH::NLNBNGIJAFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1928, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::FPHHHIOBFAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(778, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::AJDDFANCEJN(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(216, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::IMIKPGFHLHK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(953, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::CJENJIFEIDI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(703, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::BICJEMPPLAM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(495, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::AELPPPIEFAB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1830, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::BEDIACHLCII(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1487, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::LADGCOOMNKA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1802, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::CGKFOMNCNAK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(925, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::EIEFMPFLLCM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(663, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::NKKBODGFCLM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1548, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::GKFLNMOJNCP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(980, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::BJEHOAFBHBE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1146, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::JBKPIKAJPEB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(581, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::HCCHFJEFANJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1590, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::OIOMHOPNIMF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1512, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::IFCLAAFPKHC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1733, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::HFJECHFANNF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(727, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::LDJOMIOJEPF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(455, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::LMNONCMBIOO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1810, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::CNLMCOBNCAI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1882, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::FHOKDLLICJL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(504, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::PHDEMDBGOIB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(234, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::KLJJIBPJGFF(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(156, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::DLFALFGFDHE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1837, v, os)?;
                },
                &eiohagheloa::KFELKJLDKEH::NPCDBPNDGOP(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(493, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EIOHAGHELOA {
        EIOHAGHELOA::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EIOHAGHELOA {
        static instance: EIOHAGHELOA = EIOHAGHELOA {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EIOHAGHELOA {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EIOHAGHELOA").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EIOHAGHELOA {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EIOHAGHELOA {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EIOHAGHELOA`
pub mod eiohagheloa {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:EIOHAGHELOA.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.NLNBNGIJAFI)
        NLNBNGIJAFI(super::super::RogueCommonBuffSelectInfo::RogueCommonBuffSelectInfo),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.FPHHHIOBFAI)
        FPHHHIOBFAI(super::super::LEFCOMGMPCL::LEFCOMGMPCL),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.AJDDFANCEJN)
        AJDDFANCEJN(super::super::IPGKAGFFBHF::IPGKAGFFBHF),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.IMIKPGFHLHK)
        IMIKPGFHLHK(super::super::KBPMFKKNBJH::KBPMFKKNBJH),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.CJENJIFEIDI)
        CJENJIFEIDI(super::super::EBHGHGIIGOM::EBHGHGIIGOM),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.BICJEMPPLAM)
        BICJEMPPLAM(super::super::ANMCAIMELCA::ANMCAIMELCA),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.AELPPPIEFAB)
        AELPPPIEFAB(super::super::GABBEHOIPJC::GABBEHOIPJC),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.BEDIACHLCII)
        BEDIACHLCII(super::super::MLKICCAELKE::MLKICCAELKE),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.LADGCOOMNKA)
        LADGCOOMNKA(super::super::EAKECFAPPKD::EAKECFAPPKD),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.CGKFOMNCNAK)
        CGKFOMNCNAK(super::super::ELDAFCNMFBF::ELDAFCNMFBF),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.EIEFMPFLLCM)
        EIEFMPFLLCM(super::super::LCAGIOOIIDN::LCAGIOOIIDN),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.NKKBODGFCLM)
        NKKBODGFCLM(super::super::OFPEKNMFMAB::OFPEKNMFMAB),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.GKFLNMOJNCP)
        GKFLNMOJNCP(super::super::DLCJMOHOBDH::DLCJMOHOBDH),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.BJEHOAFBHBE)
        BJEHOAFBHBE(super::super::RogueFormulaSelectInfo::RogueFormulaSelectInfo),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.JBKPIKAJPEB)
        JBKPIKAJPEB(super::super::FHMAIANENPO::FHMAIANENPO),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.HCCHFJEFANJ)
        HCCHFJEFANJ(super::super::BPDDOBAHPNA::BPDDOBAHPNA),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.OIOMHOPNIMF)
        OIOMHOPNIMF(super::super::OEDOAOGAKPP::OEDOAOGAKPP),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.IFCLAAFPKHC)
        IFCLAAFPKHC(super::super::FLNAGDEOOPG::FLNAGDEOOPG),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.HFJECHFANNF)
        HFJECHFANNF(super::super::JKHKEBMOBEJ::JKHKEBMOBEJ),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.LDJOMIOJEPF)
        LDJOMIOJEPF(super::super::OEDOAOGAKPP::OEDOAOGAKPP),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.LMNONCMBIOO)
        LMNONCMBIOO(super::super::OEDOAOGAKPP::OEDOAOGAKPP),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.CNLMCOBNCAI)
        CNLMCOBNCAI(super::super::OEDOAOGAKPP::OEDOAOGAKPP),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.FHOKDLLICJL)
        FHOKDLLICJL(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.PHDEMDBGOIB)
        PHDEMDBGOIB(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.KLJJIBPJGFF)
        KLJJIBPJGFF(super::super::KKAGNMEMKOG::KKAGNMEMKOG),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.DLFALFGFDHE)
        DLFALFGFDHE(super::super::PIGFBKOJNHG::PIGFBKOJNHG),
        // @@protoc_insertion_point(oneof_field:EIOHAGHELOA.NPCDBPNDGOP)
        NPCDBPNDGOP(super::super::CGGBPJICHGF::CGGBPJICHGF),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EIOHAGHELOA as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11EIOHAGHELOA.proto\x1a\x11ANMCAIMELCA.proto\x1a\x11BPDDOBAHPNA.prot\
    o\x1a\x11CGGBPJICHGF.proto\x1a\x11DLCJMOHOBDH.proto\x1a\x11EAKECFAPPKD.p\
    roto\x1a\x11EBHGHGIIGOM.proto\x1a\x11ELDAFCNMFBF.proto\x1a\x11FHMAIANENP\
    O.proto\x1a\x11FLNAGDEOOPG.proto\x1a\x11GABBEHOIPJC.proto\x1a\x11IPGKAGF\
    FBHF.proto\x1a\x11JKHKEBMOBEJ.proto\x1a\x11KBPMFKKNBJH.proto\x1a\x11KKAG\
    NMEMKOG.proto\x1a\x11LCAGIOOIIDN.proto\x1a\x11LEFCOMGMPCL.proto\x1a\x11M\
    LKICCAELKE.proto\x1a\x11OEDOAOGAKPP.proto\x1a\x11OFPEKNMFMAB.proto\x1a\
    \x11PIGFBKOJNHG.proto\x1a\x1fRogueCommonBuffSelectInfo.proto\x1a\x1cRogu\
    eFormulaSelectInfo.proto\"\x96\x0b\n\x0bEIOHAGHELOA\x12?\n\x0bNLNBNGIJAF\
    I\x18\x88\x0f\x20\x01(\x0b2\x1a.RogueCommonBuffSelectInfoH\0R\x0bNLNBNGI\
    JAFI\x121\n\x0bFPHHHIOBFAI\x18\x8a\x06\x20\x01(\x0b2\x0c.LEFCOMGMPCLH\0R\
    \x0bFPHHHIOBFAI\x121\n\x0bAJDDFANCEJN\x18\xd8\x01\x20\x01(\x0b2\x0c.IPGK\
    AGFFBHFH\0R\x0bAJDDFANCEJN\x121\n\x0bIMIKPGFHLHK\x18\xb9\x07\x20\x01(\
    \x0b2\x0c.KBPMFKKNBJHH\0R\x0bIMIKPGFHLHK\x121\n\x0bCJENJIFEIDI\x18\xbf\
    \x05\x20\x01(\x0b2\x0c.EBHGHGIIGOMH\0R\x0bCJENJIFEIDI\x121\n\x0bBICJEMPP\
    LAM\x18\xef\x03\x20\x01(\x0b2\x0c.ANMCAIMELCAH\0R\x0bBICJEMPPLAM\x121\n\
    \x0bAELPPPIEFAB\x18\xa6\x0e\x20\x01(\x0b2\x0c.GABBEHOIPJCH\0R\x0bAELPPPI\
    EFAB\x121\n\x0bBEDIACHLCII\x18\xcf\x0b\x20\x01(\x0b2\x0c.MLKICCAELKEH\0R\
    \x0bBEDIACHLCII\x121\n\x0bLADGCOOMNKA\x18\x8a\x0e\x20\x01(\x0b2\x0c.EAKE\
    CFAPPKDH\0R\x0bLADGCOOMNKA\x121\n\x0bCGKFOMNCNAK\x18\x9d\x07\x20\x01(\
    \x0b2\x0c.ELDAFCNMFBFH\0R\x0bCGKFOMNCNAK\x121\n\x0bEIEFMPFLLCM\x18\x97\
    \x05\x20\x01(\x0b2\x0c.LCAGIOOIIDNH\0R\x0bEIEFMPFLLCM\x121\n\x0bNKKBODGF\
    CLM\x18\x8c\x0c\x20\x01(\x0b2\x0c.OFPEKNMFMABH\0R\x0bNKKBODGFCLM\x121\n\
    \x0bGKFLNMOJNCP\x18\xd4\x07\x20\x01(\x0b2\x0c.DLCJMOHOBDHH\0R\x0bGKFLNMO\
    JNCP\x12<\n\x0bBJEHOAFBHBE\x18\xfa\x08\x20\x01(\x0b2\x17.RogueFormulaSel\
    ectInfoH\0R\x0bBJEHOAFBHBE\x121\n\x0bJBKPIKAJPEB\x18\xc5\x04\x20\x01(\
    \x0b2\x0c.FHMAIANENPOH\0R\x0bJBKPIKAJPEB\x121\n\x0bHCCHFJEFANJ\x18\xb6\
    \x0c\x20\x01(\x0b2\x0c.BPDDOBAHPNAH\0R\x0bHCCHFJEFANJ\x121\n\x0bOIOMHOPN\
    IMF\x18\xe8\x0b\x20\x01(\x0b2\x0c.OEDOAOGAKPPH\0R\x0bOIOMHOPNIMF\x121\n\
    \x0bIFCLAAFPKHC\x18\xc5\r\x20\x01(\x0b2\x0c.FLNAGDEOOPGH\0R\x0bIFCLAAFPK\
    HC\x121\n\x0bHFJECHFANNF\x18\xd7\x05\x20\x01(\x0b2\x0c.JKHKEBMOBEJH\0R\
    \x0bHFJECHFANNF\x121\n\x0bLDJOMIOJEPF\x18\xc7\x03\x20\x01(\x0b2\x0c.OEDO\
    AOGAKPPH\0R\x0bLDJOMIOJEPF\x121\n\x0bLMNONCMBIOO\x18\x92\x0e\x20\x01(\
    \x0b2\x0c.OEDOAOGAKPPH\0R\x0bLMNONCMBIOO\x121\n\x0bCNLMCOBNCAI\x18\xda\
    \x0e\x20\x01(\x0b2\x0c.OEDOAOGAKPPH\0R\x0bCNLMCOBNCAI\x121\n\x0bFHOKDLLI\
    CJL\x18\xf8\x03\x20\x01(\x0b2\x0c.KKAGNMEMKOGH\0R\x0bFHOKDLLICJL\x121\n\
    \x0bPHDEMDBGOIB\x18\xea\x01\x20\x01(\x0b2\x0c.KKAGNMEMKOGH\0R\x0bPHDEMDB\
    GOIB\x121\n\x0bKLJJIBPJGFF\x18\x9c\x01\x20\x01(\x0b2\x0c.KKAGNMEMKOGH\0R\
    \x0bKLJJIBPJGFF\x121\n\x0bDLFALFGFDHE\x18\xad\x0e\x20\x01(\x0b2\x0c.PIGF\
    BKOJNHGH\0R\x0bDLFALFGFDHE\x121\n\x0bNPCDBPNDGOP\x18\xed\x03\x20\x01(\
    \x0b2\x0c.CGGBPJICHGFH\0R\x0bNPCDBPNDGOPB\r\n\x0bKFELKJLDKEHb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(22);
            deps.push(super::ANMCAIMELCA::file_descriptor().clone());
            deps.push(super::BPDDOBAHPNA::file_descriptor().clone());
            deps.push(super::CGGBPJICHGF::file_descriptor().clone());
            deps.push(super::DLCJMOHOBDH::file_descriptor().clone());
            deps.push(super::EAKECFAPPKD::file_descriptor().clone());
            deps.push(super::EBHGHGIIGOM::file_descriptor().clone());
            deps.push(super::ELDAFCNMFBF::file_descriptor().clone());
            deps.push(super::FHMAIANENPO::file_descriptor().clone());
            deps.push(super::FLNAGDEOOPG::file_descriptor().clone());
            deps.push(super::GABBEHOIPJC::file_descriptor().clone());
            deps.push(super::IPGKAGFFBHF::file_descriptor().clone());
            deps.push(super::JKHKEBMOBEJ::file_descriptor().clone());
            deps.push(super::KBPMFKKNBJH::file_descriptor().clone());
            deps.push(super::KKAGNMEMKOG::file_descriptor().clone());
            deps.push(super::LCAGIOOIIDN::file_descriptor().clone());
            deps.push(super::LEFCOMGMPCL::file_descriptor().clone());
            deps.push(super::MLKICCAELKE::file_descriptor().clone());
            deps.push(super::OEDOAOGAKPP::file_descriptor().clone());
            deps.push(super::OFPEKNMFMAB::file_descriptor().clone());
            deps.push(super::PIGFBKOJNHG::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectInfo::file_descriptor().clone());
            deps.push(super::RogueFormulaSelectInfo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EIOHAGHELOA::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
