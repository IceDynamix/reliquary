// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GCFEHMENONM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:GCFEHMENONM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GCFEHMENONM {
    // message fields
    // @@protoc_insertion_point(field:GCFEHMENONM.HBAPCCEGNME)
    pub HBAPCCEGNME: u32,
    // message oneof groups
    pub DMJFKDOOFMP: ::std::option::Option<gcfehmenonm::DMJFKDOOFMP>,
    // special fields
    // @@protoc_insertion_point(special_field:GCFEHMENONM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GCFEHMENONM {
    fn default() -> &'a GCFEHMENONM {
        <GCFEHMENONM as ::protobuf::Message>::default_instance()
    }
}

impl GCFEHMENONM {
    pub fn new() -> GCFEHMENONM {
        ::std::default::Default::default()
    }

    // .NJKENNCJLCF IAMKDJCFMIB = 1030;

    pub fn IAMKDJCFMIB(&self) -> &super::NJKENNCJLCF::NJKENNCJLCF {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(ref v)) => v,
            _ => <super::NJKENNCJLCF::NJKENNCJLCF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IAMKDJCFMIB(&mut self) {
        self.DMJFKDOOFMP = ::std::option::Option::None;
    }

    pub fn has_IAMKDJCFMIB(&self) -> bool {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IAMKDJCFMIB(&mut self, v: super::NJKENNCJLCF::NJKENNCJLCF) {
        self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IAMKDJCFMIB(&mut self) -> &mut super::NJKENNCJLCF::NJKENNCJLCF {
        if let ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(_)) = self.DMJFKDOOFMP {
        } else {
            self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(super::NJKENNCJLCF::NJKENNCJLCF::new()));
        }
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IAMKDJCFMIB(&mut self) -> super::NJKENNCJLCF::NJKENNCJLCF {
        if self.has_IAMKDJCFMIB() {
            match self.DMJFKDOOFMP.take() {
                ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::NJKENNCJLCF::NJKENNCJLCF::new()
        }
    }

    // .MIIAIODLEOA LEEHAEOBEBA = 740;

    pub fn LEEHAEOBEBA(&self) -> &super::MIIAIODLEOA::MIIAIODLEOA {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(ref v)) => v,
            _ => <super::MIIAIODLEOA::MIIAIODLEOA as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_LEEHAEOBEBA(&mut self) {
        self.DMJFKDOOFMP = ::std::option::Option::None;
    }

    pub fn has_LEEHAEOBEBA(&self) -> bool {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LEEHAEOBEBA(&mut self, v: super::MIIAIODLEOA::MIIAIODLEOA) {
        self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_LEEHAEOBEBA(&mut self) -> &mut super::MIIAIODLEOA::MIIAIODLEOA {
        if let ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(_)) = self.DMJFKDOOFMP {
        } else {
            self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(super::MIIAIODLEOA::MIIAIODLEOA::new()));
        }
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_LEEHAEOBEBA(&mut self) -> super::MIIAIODLEOA::MIIAIODLEOA {
        if self.has_LEEHAEOBEBA() {
            match self.DMJFKDOOFMP.take() {
                ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MIIAIODLEOA::MIIAIODLEOA::new()
        }
    }

    // .EMMDENJBFPF OAOOFNJGIDH = 1451;

    pub fn OAOOFNJGIDH(&self) -> &super::EMMDENJBFPF::EMMDENJBFPF {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(ref v)) => v,
            _ => <super::EMMDENJBFPF::EMMDENJBFPF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OAOOFNJGIDH(&mut self) {
        self.DMJFKDOOFMP = ::std::option::Option::None;
    }

    pub fn has_OAOOFNJGIDH(&self) -> bool {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OAOOFNJGIDH(&mut self, v: super::EMMDENJBFPF::EMMDENJBFPF) {
        self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OAOOFNJGIDH(&mut self) -> &mut super::EMMDENJBFPF::EMMDENJBFPF {
        if let ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(_)) = self.DMJFKDOOFMP {
        } else {
            self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(super::EMMDENJBFPF::EMMDENJBFPF::new()));
        }
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OAOOFNJGIDH(&mut self) -> super::EMMDENJBFPF::EMMDENJBFPF {
        if self.has_OAOOFNJGIDH() {
            match self.DMJFKDOOFMP.take() {
                ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EMMDENJBFPF::EMMDENJBFPF::new()
        }
    }

    // .EPBGFBEDANM PMMGOCJFEEJ = 478;

    pub fn PMMGOCJFEEJ(&self) -> &super::EPBGFBEDANM::EPBGFBEDANM {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(ref v)) => v,
            _ => <super::EPBGFBEDANM::EPBGFBEDANM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PMMGOCJFEEJ(&mut self) {
        self.DMJFKDOOFMP = ::std::option::Option::None;
    }

    pub fn has_PMMGOCJFEEJ(&self) -> bool {
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PMMGOCJFEEJ(&mut self, v: super::EPBGFBEDANM::EPBGFBEDANM) {
        self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PMMGOCJFEEJ(&mut self) -> &mut super::EPBGFBEDANM::EPBGFBEDANM {
        if let ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(_)) = self.DMJFKDOOFMP {
        } else {
            self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(super::EPBGFBEDANM::EPBGFBEDANM::new()));
        }
        match self.DMJFKDOOFMP {
            ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PMMGOCJFEEJ(&mut self) -> super::EPBGFBEDANM::EPBGFBEDANM {
        if self.has_PMMGOCJFEEJ() {
            match self.DMJFKDOOFMP.take() {
                ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::EPBGFBEDANM::EPBGFBEDANM::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HBAPCCEGNME",
            |m: &GCFEHMENONM| { &m.HBAPCCEGNME },
            |m: &mut GCFEHMENONM| { &mut m.HBAPCCEGNME },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::NJKENNCJLCF::NJKENNCJLCF>(
            "IAMKDJCFMIB",
            GCFEHMENONM::has_IAMKDJCFMIB,
            GCFEHMENONM::IAMKDJCFMIB,
            GCFEHMENONM::mut_IAMKDJCFMIB,
            GCFEHMENONM::set_IAMKDJCFMIB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MIIAIODLEOA::MIIAIODLEOA>(
            "LEEHAEOBEBA",
            GCFEHMENONM::has_LEEHAEOBEBA,
            GCFEHMENONM::LEEHAEOBEBA,
            GCFEHMENONM::mut_LEEHAEOBEBA,
            GCFEHMENONM::set_LEEHAEOBEBA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EMMDENJBFPF::EMMDENJBFPF>(
            "OAOOFNJGIDH",
            GCFEHMENONM::has_OAOOFNJGIDH,
            GCFEHMENONM::OAOOFNJGIDH,
            GCFEHMENONM::mut_OAOOFNJGIDH,
            GCFEHMENONM::set_OAOOFNJGIDH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::EPBGFBEDANM::EPBGFBEDANM>(
            "PMMGOCJFEEJ",
            GCFEHMENONM::has_PMMGOCJFEEJ,
            GCFEHMENONM::PMMGOCJFEEJ,
            GCFEHMENONM::mut_PMMGOCJFEEJ,
            GCFEHMENONM::set_PMMGOCJFEEJ,
        ));
        oneofs.push(gcfehmenonm::DMJFKDOOFMP::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GCFEHMENONM>(
            "GCFEHMENONM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GCFEHMENONM {
    const NAME: &'static str = "GCFEHMENONM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                88 => {
                    self.HBAPCCEGNME = is.read_uint32()?;
                },
                8242 => {
                    self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(is.read_message()?));
                },
                5922 => {
                    self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(is.read_message()?));
                },
                11610 => {
                    self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(is.read_message()?));
                },
                3826 => {
                    self.DMJFKDOOFMP = ::std::option::Option::Some(gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.HBAPCCEGNME != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.HBAPCCEGNME);
        }
        if let ::std::option::Option::Some(ref v) = self.DMJFKDOOFMP {
            match v {
                &gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.HBAPCCEGNME != 0 {
            os.write_uint32(11, self.HBAPCCEGNME)?;
        }
        if let ::std::option::Option::Some(ref v) = self.DMJFKDOOFMP {
            match v {
                &gcfehmenonm::DMJFKDOOFMP::IAMKDJCFMIB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1030, v, os)?;
                },
                &gcfehmenonm::DMJFKDOOFMP::LEEHAEOBEBA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(740, v, os)?;
                },
                &gcfehmenonm::DMJFKDOOFMP::OAOOFNJGIDH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1451, v, os)?;
                },
                &gcfehmenonm::DMJFKDOOFMP::PMMGOCJFEEJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(478, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GCFEHMENONM {
        GCFEHMENONM::new()
    }

    fn clear(&mut self) {
        self.HBAPCCEGNME = 0;
        self.DMJFKDOOFMP = ::std::option::Option::None;
        self.DMJFKDOOFMP = ::std::option::Option::None;
        self.DMJFKDOOFMP = ::std::option::Option::None;
        self.DMJFKDOOFMP = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GCFEHMENONM {
        static instance: GCFEHMENONM = GCFEHMENONM {
            HBAPCCEGNME: 0,
            DMJFKDOOFMP: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GCFEHMENONM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GCFEHMENONM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GCFEHMENONM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GCFEHMENONM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GCFEHMENONM`
pub mod gcfehmenonm {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:GCFEHMENONM.DMJFKDOOFMP)
    pub enum DMJFKDOOFMP {
        // @@protoc_insertion_point(oneof_field:GCFEHMENONM.IAMKDJCFMIB)
        IAMKDJCFMIB(super::super::NJKENNCJLCF::NJKENNCJLCF),
        // @@protoc_insertion_point(oneof_field:GCFEHMENONM.LEEHAEOBEBA)
        LEEHAEOBEBA(super::super::MIIAIODLEOA::MIIAIODLEOA),
        // @@protoc_insertion_point(oneof_field:GCFEHMENONM.OAOOFNJGIDH)
        OAOOFNJGIDH(super::super::EMMDENJBFPF::EMMDENJBFPF),
        // @@protoc_insertion_point(oneof_field:GCFEHMENONM.PMMGOCJFEEJ)
        PMMGOCJFEEJ(super::super::EPBGFBEDANM::EPBGFBEDANM),
    }

    impl ::protobuf::Oneof for DMJFKDOOFMP {
    }

    impl ::protobuf::OneofFull for DMJFKDOOFMP {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GCFEHMENONM as ::protobuf::MessageFull>::descriptor().oneof_by_name("DMJFKDOOFMP").unwrap()).clone()
        }
    }

    impl DMJFKDOOFMP {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<DMJFKDOOFMP>("DMJFKDOOFMP")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11GCFEHMENONM.proto\x1a\x11EMMDENJBFPF.proto\x1a\x11EPBGFBEDANM.prot\
    o\x1a\x11MIIAIODLEOA.proto\x1a\x11NJKENNCJLCF.proto\"\x8a\x02\n\x0bGCFEH\
    MENONM\x12\x20\n\x0bHBAPCCEGNME\x18\x0b\x20\x01(\rR\x0bHBAPCCEGNME\x121\
    \n\x0bIAMKDJCFMIB\x18\x86\x08\x20\x01(\x0b2\x0c.NJKENNCJLCFH\0R\x0bIAMKD\
    JCFMIB\x121\n\x0bLEEHAEOBEBA\x18\xe4\x05\x20\x01(\x0b2\x0c.MIIAIODLEOAH\
    \0R\x0bLEEHAEOBEBA\x121\n\x0bOAOOFNJGIDH\x18\xab\x0b\x20\x01(\x0b2\x0c.E\
    MMDENJBFPFH\0R\x0bOAOOFNJGIDH\x121\n\x0bPMMGOCJFEEJ\x18\xde\x03\x20\x01(\
    \x0b2\x0c.EPBGFBEDANMH\0R\x0bPMMGOCJFEEJB\r\n\x0bDMJFKDOOFMPb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::EMMDENJBFPF::file_descriptor().clone());
            deps.push(super::EPBGFBEDANM::file_descriptor().clone());
            deps.push(super::MIIAIODLEOA::file_descriptor().clone());
            deps.push(super::NJKENNCJLCF::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GCFEHMENONM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
