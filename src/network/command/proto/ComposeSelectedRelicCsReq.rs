// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ComposeSelectedRelicCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ComposeSelectedRelicCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComposeSelectedRelicCsReq {
    // message fields
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.JDOEKFEMOJA)
    pub JDOEKFEMOJA: u32,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.LOMDAGHOLKC)
    pub LOMDAGHOLKC: u32,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.LEBFMHHIDNC)
    pub LEBFMHHIDNC: u32,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.main_affix_id)
    pub main_affix_id: u32,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.GGNPAIFHPBB)
    pub GGNPAIFHPBB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.GJFMNMOKAIC)
    pub GJFMNMOKAIC: ::protobuf::MessageField<super::KNAPAIOFJIE::KNAPAIOFJIE>,
    // @@protoc_insertion_point(field:ComposeSelectedRelicCsReq.FBGODFJICLL)
    pub FBGODFJICLL: ::protobuf::MessageField<super::KNAPAIOFJIE::KNAPAIOFJIE>,
    // special fields
    // @@protoc_insertion_point(special_field:ComposeSelectedRelicCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComposeSelectedRelicCsReq {
    fn default() -> &'a ComposeSelectedRelicCsReq {
        <ComposeSelectedRelicCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ComposeSelectedRelicCsReq {
    pub fn new() -> ComposeSelectedRelicCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JDOEKFEMOJA",
            |m: &ComposeSelectedRelicCsReq| { &m.JDOEKFEMOJA },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.JDOEKFEMOJA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LOMDAGHOLKC",
            |m: &ComposeSelectedRelicCsReq| { &m.LOMDAGHOLKC },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.LOMDAGHOLKC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LEBFMHHIDNC",
            |m: &ComposeSelectedRelicCsReq| { &m.LEBFMHHIDNC },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.LEBFMHHIDNC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "main_affix_id",
            |m: &ComposeSelectedRelicCsReq| { &m.main_affix_id },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.main_affix_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "GGNPAIFHPBB",
            |m: &ComposeSelectedRelicCsReq| { &m.GGNPAIFHPBB },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.GGNPAIFHPBB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KNAPAIOFJIE::KNAPAIOFJIE>(
            "GJFMNMOKAIC",
            |m: &ComposeSelectedRelicCsReq| { &m.GJFMNMOKAIC },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.GJFMNMOKAIC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KNAPAIOFJIE::KNAPAIOFJIE>(
            "FBGODFJICLL",
            |m: &ComposeSelectedRelicCsReq| { &m.FBGODFJICLL },
            |m: &mut ComposeSelectedRelicCsReq| { &mut m.FBGODFJICLL },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComposeSelectedRelicCsReq>(
            "ComposeSelectedRelicCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComposeSelectedRelicCsReq {
    const NAME: &'static str = "ComposeSelectedRelicCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.JDOEKFEMOJA = is.read_uint32()?;
                },
                24 => {
                    self.LOMDAGHOLKC = is.read_uint32()?;
                },
                40 => {
                    self.LEBFMHHIDNC = is.read_uint32()?;
                },
                120 => {
                    self.main_affix_id = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.GGNPAIFHPBB)?;
                },
                96 => {
                    self.GGNPAIFHPBB.push(is.read_uint32()?);
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.GJFMNMOKAIC)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FBGODFJICLL)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.JDOEKFEMOJA != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.JDOEKFEMOJA);
        }
        if self.LOMDAGHOLKC != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LOMDAGHOLKC);
        }
        if self.LEBFMHHIDNC != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.LEBFMHHIDNC);
        }
        if self.main_affix_id != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.main_affix_id);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.GGNPAIFHPBB);
        if let Some(v) = self.GJFMNMOKAIC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.FBGODFJICLL.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.JDOEKFEMOJA != 0 {
            os.write_uint32(4, self.JDOEKFEMOJA)?;
        }
        if self.LOMDAGHOLKC != 0 {
            os.write_uint32(3, self.LOMDAGHOLKC)?;
        }
        if self.LEBFMHHIDNC != 0 {
            os.write_uint32(5, self.LEBFMHHIDNC)?;
        }
        if self.main_affix_id != 0 {
            os.write_uint32(15, self.main_affix_id)?;
        }
        os.write_repeated_packed_uint32(12, &self.GGNPAIFHPBB)?;
        if let Some(v) = self.GJFMNMOKAIC.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.FBGODFJICLL.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComposeSelectedRelicCsReq {
        ComposeSelectedRelicCsReq::new()
    }

    fn clear(&mut self) {
        self.JDOEKFEMOJA = 0;
        self.LOMDAGHOLKC = 0;
        self.LEBFMHHIDNC = 0;
        self.main_affix_id = 0;
        self.GGNPAIFHPBB.clear();
        self.GJFMNMOKAIC.clear();
        self.FBGODFJICLL.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComposeSelectedRelicCsReq {
        static instance: ComposeSelectedRelicCsReq = ComposeSelectedRelicCsReq {
            JDOEKFEMOJA: 0,
            LOMDAGHOLKC: 0,
            LEBFMHHIDNC: 0,
            main_affix_id: 0,
            GGNPAIFHPBB: ::std::vec::Vec::new(),
            GJFMNMOKAIC: ::protobuf::MessageField::none(),
            FBGODFJICLL: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComposeSelectedRelicCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComposeSelectedRelicCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComposeSelectedRelicCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComposeSelectedRelicCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fComposeSelectedRelicCsReq.proto\x1a\x11KNAPAIOFJIE.proto\"\xa7\x02\
    \n\x19ComposeSelectedRelicCsReq\x12\x20\n\x0bJDOEKFEMOJA\x18\x04\x20\x01\
    (\rR\x0bJDOEKFEMOJA\x12\x20\n\x0bLOMDAGHOLKC\x18\x03\x20\x01(\rR\x0bLOMD\
    AGHOLKC\x12\x20\n\x0bLEBFMHHIDNC\x18\x05\x20\x01(\rR\x0bLEBFMHHIDNC\x12\
    \"\n\rmain_affix_id\x18\x0f\x20\x01(\rR\x0bmainAffixId\x12\x20\n\x0bGGNP\
    AIFHPBB\x18\x0c\x20\x03(\rR\x0bGGNPAIFHPBB\x12.\n\x0bGJFMNMOKAIC\x18\x0e\
    \x20\x01(\x0b2\x0c.KNAPAIOFJIER\x0bGJFMNMOKAIC\x12.\n\x0bFBGODFJICLL\x18\
    \r\x20\x01(\x0b2\x0c.KNAPAIOFJIER\x0bFBGODFJICLLb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::KNAPAIOFJIE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ComposeSelectedRelicCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
