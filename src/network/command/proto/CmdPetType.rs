// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CmdPetType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CmdPetType)
pub enum CmdPetType {
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdPetTypeNone)
    CmdPetTypeNone = 0,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdCurPetChangedScNotify)
    CmdCurPetChangedScNotify = 7616,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdSummonPetCsReq)
    CmdSummonPetCsReq = 7601,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdRecallPetCsReq)
    CmdRecallPetCsReq = 7623,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdRecallPetScRsp)
    CmdRecallPetScRsp = 7608,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdGetPetDataCsReq)
    CmdGetPetDataCsReq = 7622,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdGetPetDataScRsp)
    CmdGetPetDataScRsp = 7614,
    // @@protoc_insertion_point(enum_value:CmdPetType.CmdSummonPetScRsp)
    CmdSummonPetScRsp = 7615,
}

impl ::protobuf::Enum for CmdPetType {
    const NAME: &'static str = "CmdPetType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CmdPetType> {
        match value {
            0 => ::std::option::Option::Some(CmdPetType::CmdPetTypeNone),
            7616 => ::std::option::Option::Some(CmdPetType::CmdCurPetChangedScNotify),
            7601 => ::std::option::Option::Some(CmdPetType::CmdSummonPetCsReq),
            7623 => ::std::option::Option::Some(CmdPetType::CmdRecallPetCsReq),
            7608 => ::std::option::Option::Some(CmdPetType::CmdRecallPetScRsp),
            7622 => ::std::option::Option::Some(CmdPetType::CmdGetPetDataCsReq),
            7614 => ::std::option::Option::Some(CmdPetType::CmdGetPetDataScRsp),
            7615 => ::std::option::Option::Some(CmdPetType::CmdSummonPetScRsp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CmdPetType> {
        match str {
            "CmdPetTypeNone" => ::std::option::Option::Some(CmdPetType::CmdPetTypeNone),
            "CmdCurPetChangedScNotify" => ::std::option::Option::Some(CmdPetType::CmdCurPetChangedScNotify),
            "CmdSummonPetCsReq" => ::std::option::Option::Some(CmdPetType::CmdSummonPetCsReq),
            "CmdRecallPetCsReq" => ::std::option::Option::Some(CmdPetType::CmdRecallPetCsReq),
            "CmdRecallPetScRsp" => ::std::option::Option::Some(CmdPetType::CmdRecallPetScRsp),
            "CmdGetPetDataCsReq" => ::std::option::Option::Some(CmdPetType::CmdGetPetDataCsReq),
            "CmdGetPetDataScRsp" => ::std::option::Option::Some(CmdPetType::CmdGetPetDataScRsp),
            "CmdSummonPetScRsp" => ::std::option::Option::Some(CmdPetType::CmdSummonPetScRsp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CmdPetType] = &[
        CmdPetType::CmdPetTypeNone,
        CmdPetType::CmdCurPetChangedScNotify,
        CmdPetType::CmdSummonPetCsReq,
        CmdPetType::CmdRecallPetCsReq,
        CmdPetType::CmdRecallPetScRsp,
        CmdPetType::CmdGetPetDataCsReq,
        CmdPetType::CmdGetPetDataScRsp,
        CmdPetType::CmdSummonPetScRsp,
    ];
}

impl ::protobuf::EnumFull for CmdPetType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CmdPetType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CmdPetType::CmdPetTypeNone => 0,
            CmdPetType::CmdCurPetChangedScNotify => 1,
            CmdPetType::CmdSummonPetCsReq => 2,
            CmdPetType::CmdRecallPetCsReq => 3,
            CmdPetType::CmdRecallPetScRsp => 4,
            CmdPetType::CmdGetPetDataCsReq => 5,
            CmdPetType::CmdGetPetDataScRsp => 6,
            CmdPetType::CmdSummonPetScRsp => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CmdPetType {
    fn default() -> Self {
        CmdPetType::CmdPetTypeNone
    }
}

impl CmdPetType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CmdPetType>("CmdPetType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10CmdPetType.proto*\xd1\x01\n\nCmdPetType\x12\x12\n\x0eCmdPetTypeNon\
    e\x10\0\x12\x1d\n\x18CmdCurPetChangedScNotify\x10\xc0;\x12\x16\n\x11CmdS\
    ummonPetCsReq\x10\xb1;\x12\x16\n\x11CmdRecallPetCsReq\x10\xc7;\x12\x16\n\
    \x11CmdRecallPetScRsp\x10\xb8;\x12\x17\n\x12CmdGetPetDataCsReq\x10\xc6;\
    \x12\x17\n\x12CmdGetPetDataScRsp\x10\xbe;\x12\x16\n\x11CmdSummonPetScRsp\
    \x10\xbf;b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CmdPetType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
