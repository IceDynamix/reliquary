// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DevelopmentType.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DevelopmentType)
pub enum DevelopmentType {
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_NONE)
    DEVELOPMENT_NONE = 0,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_COSMOS)
    DEVELOPMENT_ROGUE_COSMOS = 1,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_CHESS)
    DEVELOPMENT_ROGUE_CHESS = 2,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_CHESS_NOUS)
    DEVELOPMENT_ROGUE_CHESS_NOUS = 3,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_MEMORY_CHALLENGE)
    DEVELOPMENT_MEMORY_CHALLENGE = 4,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_STORY_CHALLENGE)
    DEVELOPMENT_STORY_CHALLENGE = 5,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_UNLOCK_AVATAR)
    DEVELOPMENT_UNLOCK_AVATAR = 6,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_UNLOCK_EQUIPMENT)
    DEVELOPMENT_UNLOCK_EQUIPMENT = 7,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ACTIVITY_START)
    DEVELOPMENT_ACTIVITY_START = 8,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ACTIVITY_END)
    DEVELOPMENT_ACTIVITY_END = 9,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_BOSS_CHALLENGE)
    DEVELOPMENT_BOSS_CHALLENGE = 10,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_TOURN)
    DEVELOPMENT_ROGUE_TOURN = 11,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_TOURN_WEEK)
    DEVELOPMENT_ROGUE_TOURN_WEEK = 12,
    // @@protoc_insertion_point(enum_value:DevelopmentType.DEVELOPMENT_ROGUE_MAGIC)
    DEVELOPMENT_ROGUE_MAGIC = 13,
}

impl ::protobuf::Enum for DevelopmentType {
    const NAME: &'static str = "DevelopmentType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DevelopmentType> {
        match value {
            0 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_NONE),
            1 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_COSMOS),
            2 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_CHESS),
            3 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_CHESS_NOUS),
            4 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_MEMORY_CHALLENGE),
            5 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_STORY_CHALLENGE),
            6 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_UNLOCK_AVATAR),
            7 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_UNLOCK_EQUIPMENT),
            8 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ACTIVITY_START),
            9 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ACTIVITY_END),
            10 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_BOSS_CHALLENGE),
            11 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_TOURN),
            12 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_TOURN_WEEK),
            13 => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_MAGIC),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DevelopmentType> {
        match str {
            "DEVELOPMENT_NONE" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_NONE),
            "DEVELOPMENT_ROGUE_COSMOS" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_COSMOS),
            "DEVELOPMENT_ROGUE_CHESS" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_CHESS),
            "DEVELOPMENT_ROGUE_CHESS_NOUS" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_CHESS_NOUS),
            "DEVELOPMENT_MEMORY_CHALLENGE" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_MEMORY_CHALLENGE),
            "DEVELOPMENT_STORY_CHALLENGE" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_STORY_CHALLENGE),
            "DEVELOPMENT_UNLOCK_AVATAR" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_UNLOCK_AVATAR),
            "DEVELOPMENT_UNLOCK_EQUIPMENT" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_UNLOCK_EQUIPMENT),
            "DEVELOPMENT_ACTIVITY_START" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ACTIVITY_START),
            "DEVELOPMENT_ACTIVITY_END" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ACTIVITY_END),
            "DEVELOPMENT_BOSS_CHALLENGE" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_BOSS_CHALLENGE),
            "DEVELOPMENT_ROGUE_TOURN" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_TOURN),
            "DEVELOPMENT_ROGUE_TOURN_WEEK" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_TOURN_WEEK),
            "DEVELOPMENT_ROGUE_MAGIC" => ::std::option::Option::Some(DevelopmentType::DEVELOPMENT_ROGUE_MAGIC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DevelopmentType] = &[
        DevelopmentType::DEVELOPMENT_NONE,
        DevelopmentType::DEVELOPMENT_ROGUE_COSMOS,
        DevelopmentType::DEVELOPMENT_ROGUE_CHESS,
        DevelopmentType::DEVELOPMENT_ROGUE_CHESS_NOUS,
        DevelopmentType::DEVELOPMENT_MEMORY_CHALLENGE,
        DevelopmentType::DEVELOPMENT_STORY_CHALLENGE,
        DevelopmentType::DEVELOPMENT_UNLOCK_AVATAR,
        DevelopmentType::DEVELOPMENT_UNLOCK_EQUIPMENT,
        DevelopmentType::DEVELOPMENT_ACTIVITY_START,
        DevelopmentType::DEVELOPMENT_ACTIVITY_END,
        DevelopmentType::DEVELOPMENT_BOSS_CHALLENGE,
        DevelopmentType::DEVELOPMENT_ROGUE_TOURN,
        DevelopmentType::DEVELOPMENT_ROGUE_TOURN_WEEK,
        DevelopmentType::DEVELOPMENT_ROGUE_MAGIC,
    ];
}

impl ::protobuf::EnumFull for DevelopmentType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DevelopmentType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DevelopmentType {
    fn default() -> Self {
        DevelopmentType::DEVELOPMENT_NONE
    }
}

impl DevelopmentType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DevelopmentType>("DevelopmentType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15DevelopmentType.proto*\xc2\x03\n\x0fDevelopmentType\x12\x14\n\x10D\
    EVELOPMENT_NONE\x10\0\x12\x1c\n\x18DEVELOPMENT_ROGUE_COSMOS\x10\x01\x12\
    \x1b\n\x17DEVELOPMENT_ROGUE_CHESS\x10\x02\x12\x20\n\x1cDEVELOPMENT_ROGUE\
    _CHESS_NOUS\x10\x03\x12\x20\n\x1cDEVELOPMENT_MEMORY_CHALLENGE\x10\x04\
    \x12\x1f\n\x1bDEVELOPMENT_STORY_CHALLENGE\x10\x05\x12\x1d\n\x19DEVELOPME\
    NT_UNLOCK_AVATAR\x10\x06\x12\x20\n\x1cDEVELOPMENT_UNLOCK_EQUIPMENT\x10\
    \x07\x12\x1e\n\x1aDEVELOPMENT_ACTIVITY_START\x10\x08\x12\x1c\n\x18DEVELO\
    PMENT_ACTIVITY_END\x10\t\x12\x1e\n\x1aDEVELOPMENT_BOSS_CHALLENGE\x10\n\
    \x12\x1b\n\x17DEVELOPMENT_ROGUE_TOURN\x10\x0b\x12\x20\n\x1cDEVELOPMENT_R\
    OGUE_TOURN_WEEK\x10\x0c\x12\x1b\n\x17DEVELOPMENT_ROGUE_MAGIC\x10\rb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DevelopmentType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
