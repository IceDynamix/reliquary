// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ReplaceLineupCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:ReplaceLineupCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReplaceLineupCsReq {
    // message fields
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.BGBICMHKOMF)
    pub BGBICMHKOMF: ::std::vec::Vec<super::GAKCPBNCMPE::GAKCPBNCMPE>,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.EMDHEKKOCMD)
    pub EMDHEKKOCMD: u32,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.PDONLOOBBCI)
    pub PDONLOOBBCI: u32,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.HCDNLLHBBOK)
    pub HCDNLLHBBOK: bool,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.EGMAFIOOKJJ)
    pub EGMAFIOOKJJ: u32,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.NJDMFPFKKIH)
    pub NJDMFPFKKIH: ::protobuf::EnumOrUnknown<super::ExtraLineupType::ExtraLineupType>,
    // @@protoc_insertion_point(field:ReplaceLineupCsReq.OCAFJKKEPOF)
    pub OCAFJKKEPOF: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ReplaceLineupCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReplaceLineupCsReq {
    fn default() -> &'a ReplaceLineupCsReq {
        <ReplaceLineupCsReq as ::protobuf::Message>::default_instance()
    }
}

impl ReplaceLineupCsReq {
    pub fn new() -> ReplaceLineupCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BGBICMHKOMF",
            |m: &ReplaceLineupCsReq| { &m.BGBICMHKOMF },
            |m: &mut ReplaceLineupCsReq| { &mut m.BGBICMHKOMF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EMDHEKKOCMD",
            |m: &ReplaceLineupCsReq| { &m.EMDHEKKOCMD },
            |m: &mut ReplaceLineupCsReq| { &mut m.EMDHEKKOCMD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDONLOOBBCI",
            |m: &ReplaceLineupCsReq| { &m.PDONLOOBBCI },
            |m: &mut ReplaceLineupCsReq| { &mut m.PDONLOOBBCI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCDNLLHBBOK",
            |m: &ReplaceLineupCsReq| { &m.HCDNLLHBBOK },
            |m: &mut ReplaceLineupCsReq| { &mut m.HCDNLLHBBOK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EGMAFIOOKJJ",
            |m: &ReplaceLineupCsReq| { &m.EGMAFIOOKJJ },
            |m: &mut ReplaceLineupCsReq| { &mut m.EGMAFIOOKJJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NJDMFPFKKIH",
            |m: &ReplaceLineupCsReq| { &m.NJDMFPFKKIH },
            |m: &mut ReplaceLineupCsReq| { &mut m.NJDMFPFKKIH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "OCAFJKKEPOF",
            |m: &ReplaceLineupCsReq| { &m.OCAFJKKEPOF },
            |m: &mut ReplaceLineupCsReq| { &mut m.OCAFJKKEPOF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReplaceLineupCsReq>(
            "ReplaceLineupCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReplaceLineupCsReq {
    const NAME: &'static str = "ReplaceLineupCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                98 => {
                    self.BGBICMHKOMF.push(is.read_message()?);
                },
                40 => {
                    self.EMDHEKKOCMD = is.read_uint32()?;
                },
                72 => {
                    self.PDONLOOBBCI = is.read_uint32()?;
                },
                88 => {
                    self.HCDNLLHBBOK = is.read_bool()?;
                },
                64 => {
                    self.EGMAFIOOKJJ = is.read_uint32()?;
                },
                8 => {
                    self.NJDMFPFKKIH = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.OCAFJKKEPOF = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.BGBICMHKOMF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.EMDHEKKOCMD != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.EMDHEKKOCMD);
        }
        if self.PDONLOOBBCI != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.PDONLOOBBCI);
        }
        if self.HCDNLLHBBOK != false {
            my_size += 1 + 1;
        }
        if self.EGMAFIOOKJJ != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.EGMAFIOOKJJ);
        }
        if self.NJDMFPFKKIH != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.NJDMFPFKKIH.value());
        }
        if self.OCAFJKKEPOF != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.OCAFJKKEPOF);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.BGBICMHKOMF {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if self.EMDHEKKOCMD != 0 {
            os.write_uint32(5, self.EMDHEKKOCMD)?;
        }
        if self.PDONLOOBBCI != 0 {
            os.write_uint32(9, self.PDONLOOBBCI)?;
        }
        if self.HCDNLLHBBOK != false {
            os.write_bool(11, self.HCDNLLHBBOK)?;
        }
        if self.EGMAFIOOKJJ != 0 {
            os.write_uint32(8, self.EGMAFIOOKJJ)?;
        }
        if self.NJDMFPFKKIH != ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.NJDMFPFKKIH))?;
        }
        if self.OCAFJKKEPOF != 0 {
            os.write_uint32(2, self.OCAFJKKEPOF)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReplaceLineupCsReq {
        ReplaceLineupCsReq::new()
    }

    fn clear(&mut self) {
        self.BGBICMHKOMF.clear();
        self.EMDHEKKOCMD = 0;
        self.PDONLOOBBCI = 0;
        self.HCDNLLHBBOK = false;
        self.EGMAFIOOKJJ = 0;
        self.NJDMFPFKKIH = ::protobuf::EnumOrUnknown::new(super::ExtraLineupType::ExtraLineupType::LINEUP_NONE);
        self.OCAFJKKEPOF = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReplaceLineupCsReq {
        static instance: ReplaceLineupCsReq = ReplaceLineupCsReq {
            BGBICMHKOMF: ::std::vec::Vec::new(),
            EMDHEKKOCMD: 0,
            PDONLOOBBCI: 0,
            HCDNLLHBBOK: false,
            EGMAFIOOKJJ: 0,
            NJDMFPFKKIH: ::protobuf::EnumOrUnknown::from_i32(0),
            OCAFJKKEPOF: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReplaceLineupCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReplaceLineupCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReplaceLineupCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplaceLineupCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18ReplaceLineupCsReq.proto\x1a\x15ExtraLineupType.proto\x1a\x11GAKCP\
    BNCMPE.proto\"\xa2\x02\n\x12ReplaceLineupCsReq\x12.\n\x0bBGBICMHKOMF\x18\
    \x0c\x20\x03(\x0b2\x0c.GAKCPBNCMPER\x0bBGBICMHKOMF\x12\x20\n\x0bEMDHEKKO\
    CMD\x18\x05\x20\x01(\rR\x0bEMDHEKKOCMD\x12\x20\n\x0bPDONLOOBBCI\x18\t\
    \x20\x01(\rR\x0bPDONLOOBBCI\x12\x20\n\x0bHCDNLLHBBOK\x18\x0b\x20\x01(\
    \x08R\x0bHCDNLLHBBOK\x12\x20\n\x0bEGMAFIOOKJJ\x18\x08\x20\x01(\rR\x0bEGM\
    AFIOOKJJ\x122\n\x0bNJDMFPFKKIH\x18\x01\x20\x01(\x0e2\x10.ExtraLineupType\
    R\x0bNJDMFPFKKIH\x12\x20\n\x0bOCAFJKKEPOF\x18\x02\x20\x01(\rR\x0bOCAFJKK\
    EPOFb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ExtraLineupType::file_descriptor().clone());
            deps.push(super::GAKCPBNCMPE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ReplaceLineupCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
