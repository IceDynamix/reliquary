// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BattlePassInfoNotify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:BattlePassInfoNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BattlePassInfoNotify {
    // message fields
    // @@protoc_insertion_point(field:BattlePassInfoNotify.INBOCKJGLBO)
    pub INBOCKJGLBO: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.CBJKLLEOHDC)
    pub CBJKLLEOHDC: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.NKAOKNMHOLH)
    pub NKAOKNMHOLH: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.level)
    pub level: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.LJFLFLIMKAD)
    pub LJFLFLIMKAD: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.EKGOPLDJOII)
    pub EKGOPLDJOII: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.exp)
    pub exp: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.CPHIIOCKHPI)
    pub CPHIIOCKHPI: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.FDKKIKGANCK)
    pub FDKKIKGANCK: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.EDBMNMDJBKO)
    pub EDBMNMDJBKO: u32,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.JLLHALOHJII)
    pub JLLHALOHJII: ::protobuf::EnumOrUnknown<super::BpTierType::BpTierType>,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.HKEOAACCBPL)
    pub HKEOAACCBPL: u64,
    // @@protoc_insertion_point(field:BattlePassInfoNotify.LJOEKEFKPKO)
    pub LJOEKEFKPKO: u64,
    // special fields
    // @@protoc_insertion_point(special_field:BattlePassInfoNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BattlePassInfoNotify {
    fn default() -> &'a BattlePassInfoNotify {
        <BattlePassInfoNotify as ::protobuf::Message>::default_instance()
    }
}

impl BattlePassInfoNotify {
    pub fn new() -> BattlePassInfoNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "INBOCKJGLBO",
            |m: &BattlePassInfoNotify| { &m.INBOCKJGLBO },
            |m: &mut BattlePassInfoNotify| { &mut m.INBOCKJGLBO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CBJKLLEOHDC",
            |m: &BattlePassInfoNotify| { &m.CBJKLLEOHDC },
            |m: &mut BattlePassInfoNotify| { &mut m.CBJKLLEOHDC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "NKAOKNMHOLH",
            |m: &BattlePassInfoNotify| { &m.NKAOKNMHOLH },
            |m: &mut BattlePassInfoNotify| { &mut m.NKAOKNMHOLH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &BattlePassInfoNotify| { &m.level },
            |m: &mut BattlePassInfoNotify| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJFLFLIMKAD",
            |m: &BattlePassInfoNotify| { &m.LJFLFLIMKAD },
            |m: &mut BattlePassInfoNotify| { &mut m.LJFLFLIMKAD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKGOPLDJOII",
            |m: &BattlePassInfoNotify| { &m.EKGOPLDJOII },
            |m: &mut BattlePassInfoNotify| { &mut m.EKGOPLDJOII },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exp",
            |m: &BattlePassInfoNotify| { &m.exp },
            |m: &mut BattlePassInfoNotify| { &mut m.exp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPHIIOCKHPI",
            |m: &BattlePassInfoNotify| { &m.CPHIIOCKHPI },
            |m: &mut BattlePassInfoNotify| { &mut m.CPHIIOCKHPI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FDKKIKGANCK",
            |m: &BattlePassInfoNotify| { &m.FDKKIKGANCK },
            |m: &mut BattlePassInfoNotify| { &mut m.FDKKIKGANCK },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EDBMNMDJBKO",
            |m: &BattlePassInfoNotify| { &m.EDBMNMDJBKO },
            |m: &mut BattlePassInfoNotify| { &mut m.EDBMNMDJBKO },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JLLHALOHJII",
            |m: &BattlePassInfoNotify| { &m.JLLHALOHJII },
            |m: &mut BattlePassInfoNotify| { &mut m.JLLHALOHJII },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HKEOAACCBPL",
            |m: &BattlePassInfoNotify| { &m.HKEOAACCBPL },
            |m: &mut BattlePassInfoNotify| { &mut m.HKEOAACCBPL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJOEKEFKPKO",
            |m: &BattlePassInfoNotify| { &m.LJOEKEFKPKO },
            |m: &mut BattlePassInfoNotify| { &mut m.LJOEKEFKPKO },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BattlePassInfoNotify>(
            "BattlePassInfoNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BattlePassInfoNotify {
    const NAME: &'static str = "BattlePassInfoNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                96 => {
                    self.INBOCKJGLBO = is.read_uint64()?;
                },
                80 => {
                    self.CBJKLLEOHDC = is.read_uint64()?;
                },
                88 => {
                    self.NKAOKNMHOLH = is.read_uint64()?;
                },
                16 => {
                    self.level = is.read_uint32()?;
                },
                112 => {
                    self.LJFLFLIMKAD = is.read_uint32()?;
                },
                24 => {
                    self.EKGOPLDJOII = is.read_uint64()?;
                },
                72 => {
                    self.exp = is.read_uint32()?;
                },
                120 => {
                    self.CPHIIOCKHPI = is.read_uint64()?;
                },
                8 => {
                    self.FDKKIKGANCK = is.read_uint64()?;
                },
                32 => {
                    self.EDBMNMDJBKO = is.read_uint32()?;
                },
                64 => {
                    self.JLLHALOHJII = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.HKEOAACCBPL = is.read_uint64()?;
                },
                104 => {
                    self.LJOEKEFKPKO = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.INBOCKJGLBO != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.INBOCKJGLBO);
        }
        if self.CBJKLLEOHDC != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.CBJKLLEOHDC);
        }
        if self.NKAOKNMHOLH != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.NKAOKNMHOLH);
        }
        if self.level != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.level);
        }
        if self.LJFLFLIMKAD != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.LJFLFLIMKAD);
        }
        if self.EKGOPLDJOII != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.EKGOPLDJOII);
        }
        if self.exp != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.exp);
        }
        if self.CPHIIOCKHPI != 0 {
            my_size += ::protobuf::rt::uint64_size(15, self.CPHIIOCKHPI);
        }
        if self.FDKKIKGANCK != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.FDKKIKGANCK);
        }
        if self.EDBMNMDJBKO != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.EDBMNMDJBKO);
        }
        if self.JLLHALOHJII != ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(8, self.JLLHALOHJII.value());
        }
        if self.HKEOAACCBPL != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.HKEOAACCBPL);
        }
        if self.LJOEKEFKPKO != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.LJOEKEFKPKO);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.INBOCKJGLBO != 0 {
            os.write_uint64(12, self.INBOCKJGLBO)?;
        }
        if self.CBJKLLEOHDC != 0 {
            os.write_uint64(10, self.CBJKLLEOHDC)?;
        }
        if self.NKAOKNMHOLH != 0 {
            os.write_uint64(11, self.NKAOKNMHOLH)?;
        }
        if self.level != 0 {
            os.write_uint32(2, self.level)?;
        }
        if self.LJFLFLIMKAD != 0 {
            os.write_uint32(14, self.LJFLFLIMKAD)?;
        }
        if self.EKGOPLDJOII != 0 {
            os.write_uint64(3, self.EKGOPLDJOII)?;
        }
        if self.exp != 0 {
            os.write_uint32(9, self.exp)?;
        }
        if self.CPHIIOCKHPI != 0 {
            os.write_uint64(15, self.CPHIIOCKHPI)?;
        }
        if self.FDKKIKGANCK != 0 {
            os.write_uint64(1, self.FDKKIKGANCK)?;
        }
        if self.EDBMNMDJBKO != 0 {
            os.write_uint32(4, self.EDBMNMDJBKO)?;
        }
        if self.JLLHALOHJII != ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.JLLHALOHJII))?;
        }
        if self.HKEOAACCBPL != 0 {
            os.write_uint64(7, self.HKEOAACCBPL)?;
        }
        if self.LJOEKEFKPKO != 0 {
            os.write_uint64(13, self.LJOEKEFKPKO)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BattlePassInfoNotify {
        BattlePassInfoNotify::new()
    }

    fn clear(&mut self) {
        self.INBOCKJGLBO = 0;
        self.CBJKLLEOHDC = 0;
        self.NKAOKNMHOLH = 0;
        self.level = 0;
        self.LJFLFLIMKAD = 0;
        self.EKGOPLDJOII = 0;
        self.exp = 0;
        self.CPHIIOCKHPI = 0;
        self.FDKKIKGANCK = 0;
        self.EDBMNMDJBKO = 0;
        self.JLLHALOHJII = ::protobuf::EnumOrUnknown::new(super::BpTierType::BpTierType::BP_TIER_TYPE_NONE);
        self.HKEOAACCBPL = 0;
        self.LJOEKEFKPKO = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BattlePassInfoNotify {
        static instance: BattlePassInfoNotify = BattlePassInfoNotify {
            INBOCKJGLBO: 0,
            CBJKLLEOHDC: 0,
            NKAOKNMHOLH: 0,
            level: 0,
            LJFLFLIMKAD: 0,
            EKGOPLDJOII: 0,
            exp: 0,
            CPHIIOCKHPI: 0,
            FDKKIKGANCK: 0,
            EDBMNMDJBKO: 0,
            JLLHALOHJII: ::protobuf::EnumOrUnknown::from_i32(0),
            HKEOAACCBPL: 0,
            LJOEKEFKPKO: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BattlePassInfoNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BattlePassInfoNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BattlePassInfoNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BattlePassInfoNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aBattlePassInfoNotify.proto\x1a\x10BpTierType.proto\"\xc1\x03\n\x14\
    BattlePassInfoNotify\x12\x20\n\x0bINBOCKJGLBO\x18\x0c\x20\x01(\x04R\x0bI\
    NBOCKJGLBO\x12\x20\n\x0bCBJKLLEOHDC\x18\n\x20\x01(\x04R\x0bCBJKLLEOHDC\
    \x12\x20\n\x0bNKAOKNMHOLH\x18\x0b\x20\x01(\x04R\x0bNKAOKNMHOLH\x12\x14\n\
    \x05level\x18\x02\x20\x01(\rR\x05level\x12\x20\n\x0bLJFLFLIMKAD\x18\x0e\
    \x20\x01(\rR\x0bLJFLFLIMKAD\x12\x20\n\x0bEKGOPLDJOII\x18\x03\x20\x01(\
    \x04R\x0bEKGOPLDJOII\x12\x10\n\x03exp\x18\t\x20\x01(\rR\x03exp\x12\x20\n\
    \x0bCPHIIOCKHPI\x18\x0f\x20\x01(\x04R\x0bCPHIIOCKHPI\x12\x20\n\x0bFDKKIK\
    GANCK\x18\x01\x20\x01(\x04R\x0bFDKKIKGANCK\x12\x20\n\x0bEDBMNMDJBKO\x18\
    \x04\x20\x01(\rR\x0bEDBMNMDJBKO\x12-\n\x0bJLLHALOHJII\x18\x08\x20\x01(\
    \x0e2\x0b.BpTierTypeR\x0bJLLHALOHJII\x12\x20\n\x0bHKEOAACCBPL\x18\x07\
    \x20\x01(\x04R\x0bHKEOAACCBPL\x12\x20\n\x0bLJOEKEFKPKO\x18\r\x20\x01(\
    \x04R\x0bLJOEKEFKPKOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::BpTierType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BattlePassInfoNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
