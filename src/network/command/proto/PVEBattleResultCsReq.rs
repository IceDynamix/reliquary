// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PVEBattleResultCsReq.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PVEBattleResultCsReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PVEBattleResultCsReq {
    // message fields
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.BCLNMIDFFOH)
    pub BCLNMIDFFOH: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.JNEHGJEHJFH)
    pub JNEHGJEHJFH: ::std::vec::Vec<super::PEGBANALPOP::PEGBANALPOP>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.HPADEEDKKNE)
    pub HPADEEDKKNE: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.GJGKAGFPAGM)
    pub GJGKAGFPAGM: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.HDOFEBPLNMM)
    pub HDOFEBPLNMM: bool,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DGFCKINCCFD)
    pub DGFCKINCCFD: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.CFONLBPOABP)
    pub CFONLBPOABP: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.JCJFGOJFEGE)
    pub JCJFGOJFEGE: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.HPEKEKIPJLF)
    pub HPEKEKIPJLF: ::std::collections::HashMap<::std::string::String, u32>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.BOKLGJNLFFP)
    pub BOKLGJNLFFP: u32,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DHCLHAEMOON)
    pub DHCLHAEMOON: ::protobuf::MessageField<super::MJBCEOFGHJH::MJBCEOFGHJH>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.CPCLJGPDNAN)
    pub CPCLJGPDNAN: ::std::string::String,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.MKOAAFPEPPM)
    pub MKOAAFPEPPM: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.HCDFGHDALCM)
    pub HCDFGHDALCM: ::protobuf::EnumOrUnknown<super::MPEBBEINPDA::MPEBBEINPDA>,
    // @@protoc_insertion_point(field:PVEBattleResultCsReq.DDFKAEPCANH)
    pub DDFKAEPCANH: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PVEBattleResultCsReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PVEBattleResultCsReq {
    fn default() -> &'a PVEBattleResultCsReq {
        <PVEBattleResultCsReq as ::protobuf::Message>::default_instance()
    }
}

impl PVEBattleResultCsReq {
    pub fn new() -> PVEBattleResultCsReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BCLNMIDFFOH",
            |m: &PVEBattleResultCsReq| { &m.BCLNMIDFFOH },
            |m: &mut PVEBattleResultCsReq| { &mut m.BCLNMIDFFOH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JNEHGJEHJFH",
            |m: &PVEBattleResultCsReq| { &m.JNEHGJEHJFH },
            |m: &mut PVEBattleResultCsReq| { &mut m.JNEHGJEHJFH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HPADEEDKKNE",
            |m: &PVEBattleResultCsReq| { &m.HPADEEDKKNE },
            |m: &mut PVEBattleResultCsReq| { &mut m.HPADEEDKKNE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GJGKAGFPAGM",
            |m: &PVEBattleResultCsReq| { &m.GJGKAGFPAGM },
            |m: &mut PVEBattleResultCsReq| { &mut m.GJGKAGFPAGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HDOFEBPLNMM",
            |m: &PVEBattleResultCsReq| { &m.HDOFEBPLNMM },
            |m: &mut PVEBattleResultCsReq| { &mut m.HDOFEBPLNMM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DGFCKINCCFD",
            |m: &PVEBattleResultCsReq| { &m.DGFCKINCCFD },
            |m: &mut PVEBattleResultCsReq| { &mut m.DGFCKINCCFD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CFONLBPOABP",
            |m: &PVEBattleResultCsReq| { &m.CFONLBPOABP },
            |m: &mut PVEBattleResultCsReq| { &mut m.CFONLBPOABP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JCJFGOJFEGE",
            |m: &PVEBattleResultCsReq| { &m.JCJFGOJFEGE },
            |m: &mut PVEBattleResultCsReq| { &mut m.JCJFGOJFEGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "HPEKEKIPJLF",
            |m: &PVEBattleResultCsReq| { &m.HPEKEKIPJLF },
            |m: &mut PVEBattleResultCsReq| { &mut m.HPEKEKIPJLF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BOKLGJNLFFP",
            |m: &PVEBattleResultCsReq| { &m.BOKLGJNLFFP },
            |m: &mut PVEBattleResultCsReq| { &mut m.BOKLGJNLFFP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::MJBCEOFGHJH::MJBCEOFGHJH>(
            "DHCLHAEMOON",
            |m: &PVEBattleResultCsReq| { &m.DHCLHAEMOON },
            |m: &mut PVEBattleResultCsReq| { &mut m.DHCLHAEMOON },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CPCLJGPDNAN",
            |m: &PVEBattleResultCsReq| { &m.CPCLJGPDNAN },
            |m: &mut PVEBattleResultCsReq| { &mut m.CPCLJGPDNAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MKOAAFPEPPM",
            |m: &PVEBattleResultCsReq| { &m.MKOAAFPEPPM },
            |m: &mut PVEBattleResultCsReq| { &mut m.MKOAAFPEPPM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HCDFGHDALCM",
            |m: &PVEBattleResultCsReq| { &m.HCDFGHDALCM },
            |m: &mut PVEBattleResultCsReq| { &mut m.HCDFGHDALCM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DDFKAEPCANH",
            |m: &PVEBattleResultCsReq| { &m.DDFKAEPCANH },
            |m: &mut PVEBattleResultCsReq| { &mut m.DDFKAEPCANH },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PVEBattleResultCsReq>(
            "PVEBattleResultCsReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PVEBattleResultCsReq {
    const NAME: &'static str = "PVEBattleResultCsReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                80 => {
                    self.BCLNMIDFFOH = is.read_uint32()?;
                },
                58 => {
                    self.JNEHGJEHJFH.push(is.read_message()?);
                },
                24 => {
                    self.HPADEEDKKNE = is.read_uint32()?;
                },
                96 => {
                    self.GJGKAGFPAGM = is.read_bool()?;
                },
                16 => {
                    self.HDOFEBPLNMM = is.read_bool()?;
                },
                48 => {
                    self.DGFCKINCCFD = is.read_uint32()?;
                },
                120 => {
                    self.CFONLBPOABP = is.read_uint32()?;
                },
                104 => {
                    self.JCJFGOJFEGE = is.read_uint32()?;
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.HPEKEKIPJLF.insert(key, value);
                },
                64 => {
                    self.BOKLGJNLFFP = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.DHCLHAEMOON)?;
                },
                10 => {
                    self.CPCLJGPDNAN = is.read_string()?;
                },
                42 => {
                    self.MKOAAFPEPPM = is.read_bytes()?;
                },
                112 => {
                    self.HCDFGHDALCM = is.read_enum_or_unknown()?;
                },
                88 => {
                    self.DDFKAEPCANH = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.BCLNMIDFFOH != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.BCLNMIDFFOH);
        }
        for value in &self.JNEHGJEHJFH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.HPADEEDKKNE != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.HPADEEDKKNE);
        }
        if self.GJGKAGFPAGM != false {
            my_size += 1 + 1;
        }
        if self.HDOFEBPLNMM != false {
            my_size += 1 + 1;
        }
        if self.DGFCKINCCFD != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.DGFCKINCCFD);
        }
        if self.CFONLBPOABP != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.CFONLBPOABP);
        }
        if self.JCJFGOJFEGE != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.JCJFGOJFEGE);
        }
        for (k, v) in &self.HPEKEKIPJLF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.BOKLGJNLFFP != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.BOKLGJNLFFP);
        }
        if let Some(v) = self.DHCLHAEMOON.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.CPCLJGPDNAN.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.CPCLJGPDNAN);
        }
        if !self.MKOAAFPEPPM.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.MKOAAFPEPPM);
        }
        if self.HCDFGHDALCM != ::protobuf::EnumOrUnknown::new(super::MPEBBEINPDA::MPEBBEINPDA::BATTLE_END_NONE) {
            my_size += ::protobuf::rt::int32_size(14, self.HCDFGHDALCM.value());
        }
        if self.DDFKAEPCANH != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.BCLNMIDFFOH != 0 {
            os.write_uint32(10, self.BCLNMIDFFOH)?;
        }
        for v in &self.JNEHGJEHJFH {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.HPADEEDKKNE != 0 {
            os.write_uint32(3, self.HPADEEDKKNE)?;
        }
        if self.GJGKAGFPAGM != false {
            os.write_bool(12, self.GJGKAGFPAGM)?;
        }
        if self.HDOFEBPLNMM != false {
            os.write_bool(2, self.HDOFEBPLNMM)?;
        }
        if self.DGFCKINCCFD != 0 {
            os.write_uint32(6, self.DGFCKINCCFD)?;
        }
        if self.CFONLBPOABP != 0 {
            os.write_uint32(15, self.CFONLBPOABP)?;
        }
        if self.JCJFGOJFEGE != 0 {
            os.write_uint32(13, self.JCJFGOJFEGE)?;
        }
        for (k, v) in &self.HPEKEKIPJLF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint32_size(2, *v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint32(2, *v)?;
        };
        if self.BOKLGJNLFFP != 0 {
            os.write_uint32(8, self.BOKLGJNLFFP)?;
        }
        if let Some(v) = self.DHCLHAEMOON.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if !self.CPCLJGPDNAN.is_empty() {
            os.write_string(1, &self.CPCLJGPDNAN)?;
        }
        if !self.MKOAAFPEPPM.is_empty() {
            os.write_bytes(5, &self.MKOAAFPEPPM)?;
        }
        if self.HCDFGHDALCM != ::protobuf::EnumOrUnknown::new(super::MPEBBEINPDA::MPEBBEINPDA::BATTLE_END_NONE) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.HCDFGHDALCM))?;
        }
        if self.DDFKAEPCANH != false {
            os.write_bool(11, self.DDFKAEPCANH)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PVEBattleResultCsReq {
        PVEBattleResultCsReq::new()
    }

    fn clear(&mut self) {
        self.BCLNMIDFFOH = 0;
        self.JNEHGJEHJFH.clear();
        self.HPADEEDKKNE = 0;
        self.GJGKAGFPAGM = false;
        self.HDOFEBPLNMM = false;
        self.DGFCKINCCFD = 0;
        self.CFONLBPOABP = 0;
        self.JCJFGOJFEGE = 0;
        self.HPEKEKIPJLF.clear();
        self.BOKLGJNLFFP = 0;
        self.DHCLHAEMOON.clear();
        self.CPCLJGPDNAN.clear();
        self.MKOAAFPEPPM.clear();
        self.HCDFGHDALCM = ::protobuf::EnumOrUnknown::new(super::MPEBBEINPDA::MPEBBEINPDA::BATTLE_END_NONE);
        self.DDFKAEPCANH = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PVEBattleResultCsReq {
        static instance: ::protobuf::rt::Lazy<PVEBattleResultCsReq> = ::protobuf::rt::Lazy::new();
        instance.get(PVEBattleResultCsReq::new)
    }
}

impl ::protobuf::MessageFull for PVEBattleResultCsReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PVEBattleResultCsReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PVEBattleResultCsReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PVEBattleResultCsReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aPVEBattleResultCsReq.proto\x1a\x11MJBCEOFGHJH.proto\x1a\x11MPEBBEI\
    NPDA.proto\x1a\x11PEGBANALPOP.proto\"\xa6\x05\n\x14PVEBattleResultCsReq\
    \x12\x20\n\x0bBCLNMIDFFOH\x18\n\x20\x01(\rR\x0bBCLNMIDFFOH\x12.\n\x0bJNE\
    HGJEHJFH\x18\x07\x20\x03(\x0b2\x0c.PEGBANALPOPR\x0bJNEHGJEHJFH\x12\x20\n\
    \x0bHPADEEDKKNE\x18\x03\x20\x01(\rR\x0bHPADEEDKKNE\x12\x20\n\x0bGJGKAGFP\
    AGM\x18\x0c\x20\x01(\x08R\x0bGJGKAGFPAGM\x12\x20\n\x0bHDOFEBPLNMM\x18\
    \x02\x20\x01(\x08R\x0bHDOFEBPLNMM\x12\x20\n\x0bDGFCKINCCFD\x18\x06\x20\
    \x01(\rR\x0bDGFCKINCCFD\x12\x20\n\x0bCFONLBPOABP\x18\x0f\x20\x01(\rR\x0b\
    CFONLBPOABP\x12\x20\n\x0bJCJFGOJFEGE\x18\r\x20\x01(\rR\x0bJCJFGOJFEGE\
    \x12H\n\x0bHPEKEKIPJLF\x18\x04\x20\x03(\x0b2&.PVEBattleResultCsReq.HPEKE\
    KIPJLFEntryR\x0bHPEKEKIPJLF\x12\x20\n\x0bBOKLGJNLFFP\x18\x08\x20\x01(\rR\
    \x0bBOKLGJNLFFP\x12.\n\x0bDHCLHAEMOON\x18\t\x20\x01(\x0b2\x0c.MJBCEOFGHJ\
    HR\x0bDHCLHAEMOON\x12\x20\n\x0bCPCLJGPDNAN\x18\x01\x20\x01(\tR\x0bCPCLJG\
    PDNAN\x12\x20\n\x0bMKOAAFPEPPM\x18\x05\x20\x01(\x0cR\x0bMKOAAFPEPPM\x12.\
    \n\x0bHCDFGHDALCM\x18\x0e\x20\x01(\x0e2\x0c.MPEBBEINPDAR\x0bHCDFGHDALCM\
    \x12\x20\n\x0bDDFKAEPCANH\x18\x0b\x20\x01(\x08R\x0bDDFKAEPCANH\x1a>\n\
    \x10HPEKEKIPJLFEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\rR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::MJBCEOFGHJH::file_descriptor().clone());
            deps.push(super::MPEBBEINPDA::file_descriptor().clone());
            deps.push(super::PEGBANALPOP::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PVEBattleResultCsReq::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
