// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `OMOGAIEOFAH.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:OMOGAIEOFAH)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OMOGAIEOFAH {
    // message fields
    // @@protoc_insertion_point(field:OMOGAIEOFAH.IGCHBPAKBCB)
    pub IGCHBPAKBCB: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.FPOELPFCNBI)
    pub FPOELPFCNBI: ::protobuf::MessageField<super::KNAPAIOFJIE::KNAPAIOFJIE>,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.IPODNBLJPOL)
    pub IPODNBLJPOL: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.CMOGBLHAFHN)
    pub CMOGBLHAFHN: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.PDIHILCLENM)
    pub PDIHILCLENM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.EKFLPNLAPDF)
    pub EKFLPNLAPDF: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.CKKEKMJMABC)
    pub CKKEKMJMABC: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.HHMABJDIMGM)
    pub HHMABJDIMGM: ::protobuf::EnumOrUnknown<super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType>,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.PDAPEHEAMBM)
    pub PDAPEHEAMBM: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.DJFCKFEMGOJ)
    pub DJFCKFEMGOJ: u32,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.EHPMCGOELGB)
    pub EHPMCGOELGB: bool,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.LHMIDPAMBPD)
    pub LHMIDPAMBPD: ::std::vec::Vec<super::MKEELPFDCLM::MKEELPFDCLM>,
    // @@protoc_insertion_point(field:OMOGAIEOFAH.BHEIDPPFCKA)
    pub BHEIDPPFCKA: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OMOGAIEOFAH.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OMOGAIEOFAH {
    fn default() -> &'a OMOGAIEOFAH {
        <OMOGAIEOFAH as ::protobuf::Message>::default_instance()
    }
}

impl OMOGAIEOFAH {
    pub fn new() -> OMOGAIEOFAH {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IGCHBPAKBCB",
            |m: &OMOGAIEOFAH| { &m.IGCHBPAKBCB },
            |m: &mut OMOGAIEOFAH| { &mut m.IGCHBPAKBCB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::KNAPAIOFJIE::KNAPAIOFJIE>(
            "FPOELPFCNBI",
            |m: &OMOGAIEOFAH| { &m.FPOELPFCNBI },
            |m: &mut OMOGAIEOFAH| { &mut m.FPOELPFCNBI },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IPODNBLJPOL",
            |m: &OMOGAIEOFAH| { &m.IPODNBLJPOL },
            |m: &mut OMOGAIEOFAH| { &mut m.IPODNBLJPOL },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CMOGBLHAFHN",
            |m: &OMOGAIEOFAH| { &m.CMOGBLHAFHN },
            |m: &mut OMOGAIEOFAH| { &mut m.CMOGBLHAFHN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "PDIHILCLENM",
            |m: &OMOGAIEOFAH| { &m.PDIHILCLENM },
            |m: &mut OMOGAIEOFAH| { &mut m.PDIHILCLENM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EKFLPNLAPDF",
            |m: &OMOGAIEOFAH| { &m.EKFLPNLAPDF },
            |m: &mut OMOGAIEOFAH| { &mut m.EKFLPNLAPDF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CKKEKMJMABC",
            |m: &OMOGAIEOFAH| { &m.CKKEKMJMABC },
            |m: &mut OMOGAIEOFAH| { &mut m.CKKEKMJMABC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HHMABJDIMGM",
            |m: &OMOGAIEOFAH| { &m.HHMABJDIMGM },
            |m: &mut OMOGAIEOFAH| { &mut m.HHMABJDIMGM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "PDAPEHEAMBM",
            |m: &OMOGAIEOFAH| { &m.PDAPEHEAMBM },
            |m: &mut OMOGAIEOFAH| { &mut m.PDAPEHEAMBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DJFCKFEMGOJ",
            |m: &OMOGAIEOFAH| { &m.DJFCKFEMGOJ },
            |m: &mut OMOGAIEOFAH| { &mut m.DJFCKFEMGOJ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "EHPMCGOELGB",
            |m: &OMOGAIEOFAH| { &m.EHPMCGOELGB },
            |m: &mut OMOGAIEOFAH| { &mut m.EHPMCGOELGB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "LHMIDPAMBPD",
            |m: &OMOGAIEOFAH| { &m.LHMIDPAMBPD },
            |m: &mut OMOGAIEOFAH| { &mut m.LHMIDPAMBPD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "BHEIDPPFCKA",
            |m: &OMOGAIEOFAH| { &m.BHEIDPPFCKA },
            |m: &mut OMOGAIEOFAH| { &mut m.BHEIDPPFCKA },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OMOGAIEOFAH>(
            "OMOGAIEOFAH",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OMOGAIEOFAH {
    const NAME: &'static str = "OMOGAIEOFAH";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.IGCHBPAKBCB = is.read_uint32()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.FPOELPFCNBI)?;
                },
                80 => {
                    self.IPODNBLJPOL = is.read_uint32()?;
                },
                8 => {
                    self.CMOGBLHAFHN = is.read_uint32()?;
                },
                58 => {
                    is.read_repeated_packed_uint32_into(&mut self.PDIHILCLENM)?;
                },
                56 => {
                    self.PDIHILCLENM.push(is.read_uint32()?);
                },
                72 => {
                    self.EKFLPNLAPDF = is.read_uint32()?;
                },
                104 => {
                    self.CKKEKMJMABC = is.read_uint32()?;
                },
                40 => {
                    self.HHMABJDIMGM = is.read_enum_or_unknown()?;
                },
                88 => {
                    self.PDAPEHEAMBM = is.read_uint32()?;
                },
                32 => {
                    self.DJFCKFEMGOJ = is.read_uint32()?;
                },
                48 => {
                    self.EHPMCGOELGB = is.read_bool()?;
                },
                114 => {
                    self.LHMIDPAMBPD.push(is.read_message()?);
                },
                64 => {
                    self.BHEIDPPFCKA = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IGCHBPAKBCB != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.IGCHBPAKBCB);
        }
        if let Some(v) = self.FPOELPFCNBI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.IPODNBLJPOL != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.IPODNBLJPOL);
        }
        if self.CMOGBLHAFHN != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.CMOGBLHAFHN);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(7, &self.PDIHILCLENM);
        if self.EKFLPNLAPDF != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.EKFLPNLAPDF);
        }
        if self.CKKEKMJMABC != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.CKKEKMJMABC);
        }
        if self.HHMABJDIMGM != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            my_size += ::protobuf::rt::int32_size(5, self.HHMABJDIMGM.value());
        }
        if self.PDAPEHEAMBM != 0 {
            my_size += ::protobuf::rt::uint32_size(11, self.PDAPEHEAMBM);
        }
        if self.DJFCKFEMGOJ != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.DJFCKFEMGOJ);
        }
        if self.EHPMCGOELGB != false {
            my_size += 1 + 1;
        }
        for value in &self.LHMIDPAMBPD {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.BHEIDPPFCKA != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.BHEIDPPFCKA);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IGCHBPAKBCB != 0 {
            os.write_uint32(2, self.IGCHBPAKBCB)?;
        }
        if let Some(v) = self.FPOELPFCNBI.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.IPODNBLJPOL != 0 {
            os.write_uint32(10, self.IPODNBLJPOL)?;
        }
        if self.CMOGBLHAFHN != 0 {
            os.write_uint32(1, self.CMOGBLHAFHN)?;
        }
        os.write_repeated_packed_uint32(7, &self.PDIHILCLENM)?;
        if self.EKFLPNLAPDF != 0 {
            os.write_uint32(9, self.EKFLPNLAPDF)?;
        }
        if self.CKKEKMJMABC != 0 {
            os.write_uint32(13, self.CKKEKMJMABC)?;
        }
        if self.HHMABJDIMGM != ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.HHMABJDIMGM))?;
        }
        if self.PDAPEHEAMBM != 0 {
            os.write_uint32(11, self.PDAPEHEAMBM)?;
        }
        if self.DJFCKFEMGOJ != 0 {
            os.write_uint32(4, self.DJFCKFEMGOJ)?;
        }
        if self.EHPMCGOELGB != false {
            os.write_bool(6, self.EHPMCGOELGB)?;
        }
        for v in &self.LHMIDPAMBPD {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if self.BHEIDPPFCKA != 0 {
            os.write_uint32(8, self.BHEIDPPFCKA)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OMOGAIEOFAH {
        OMOGAIEOFAH::new()
    }

    fn clear(&mut self) {
        self.IGCHBPAKBCB = 0;
        self.FPOELPFCNBI.clear();
        self.IPODNBLJPOL = 0;
        self.CMOGBLHAFHN = 0;
        self.PDIHILCLENM.clear();
        self.EKFLPNLAPDF = 0;
        self.CKKEKMJMABC = 0;
        self.HHMABJDIMGM = ::protobuf::EnumOrUnknown::new(super::RogueCommonBuffSelectSourceType::RogueCommonBuffSelectSourceType::ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE);
        self.PDAPEHEAMBM = 0;
        self.DJFCKFEMGOJ = 0;
        self.EHPMCGOELGB = false;
        self.LHMIDPAMBPD.clear();
        self.BHEIDPPFCKA = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OMOGAIEOFAH {
        static instance: OMOGAIEOFAH = OMOGAIEOFAH {
            IGCHBPAKBCB: 0,
            FPOELPFCNBI: ::protobuf::MessageField::none(),
            IPODNBLJPOL: 0,
            CMOGBLHAFHN: 0,
            PDIHILCLENM: ::std::vec::Vec::new(),
            EKFLPNLAPDF: 0,
            CKKEKMJMABC: 0,
            HHMABJDIMGM: ::protobuf::EnumOrUnknown::from_i32(0),
            PDAPEHEAMBM: 0,
            DJFCKFEMGOJ: 0,
            EHPMCGOELGB: false,
            LHMIDPAMBPD: ::std::vec::Vec::new(),
            BHEIDPPFCKA: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OMOGAIEOFAH {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OMOGAIEOFAH").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OMOGAIEOFAH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OMOGAIEOFAH {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11OMOGAIEOFAH.proto\x1a\x11KNAPAIOFJIE.proto\x1a\x11MKEELPFDCLM.prot\
    o\x1a%RogueCommonBuffSelectSourceType.proto\"\x85\x04\n\x0bOMOGAIEOFAH\
    \x12\x20\n\x0bIGCHBPAKBCB\x18\x02\x20\x01(\rR\x0bIGCHBPAKBCB\x12.\n\x0bF\
    POELPFCNBI\x18\x0f\x20\x01(\x0b2\x0c.KNAPAIOFJIER\x0bFPOELPFCNBI\x12\x20\
    \n\x0bIPODNBLJPOL\x18\n\x20\x01(\rR\x0bIPODNBLJPOL\x12\x20\n\x0bCMOGBLHA\
    FHN\x18\x01\x20\x01(\rR\x0bCMOGBLHAFHN\x12\x20\n\x0bPDIHILCLENM\x18\x07\
    \x20\x03(\rR\x0bPDIHILCLENM\x12\x20\n\x0bEKFLPNLAPDF\x18\t\x20\x01(\rR\
    \x0bEKFLPNLAPDF\x12\x20\n\x0bCKKEKMJMABC\x18\r\x20\x01(\rR\x0bCKKEKMJMAB\
    C\x12B\n\x0bHHMABJDIMGM\x18\x05\x20\x01(\x0e2\x20.RogueCommonBuffSelectS\
    ourceTypeR\x0bHHMABJDIMGM\x12\x20\n\x0bPDAPEHEAMBM\x18\x0b\x20\x01(\rR\
    \x0bPDAPEHEAMBM\x12\x20\n\x0bDJFCKFEMGOJ\x18\x04\x20\x01(\rR\x0bDJFCKFEM\
    GOJ\x12\x20\n\x0bEHPMCGOELGB\x18\x06\x20\x01(\x08R\x0bEHPMCGOELGB\x12.\n\
    \x0bLHMIDPAMBPD\x18\x0e\x20\x03(\x0b2\x0c.MKEELPFDCLMR\x0bLHMIDPAMBPD\
    \x12\x20\n\x0bBHEIDPPFCKA\x18\x08\x20\x01(\rR\x0bBHEIDPPFCKAb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::KNAPAIOFJIE::file_descriptor().clone());
            deps.push(super::MKEELPFDCLM::file_descriptor().clone());
            deps.push(super::RogueCommonBuffSelectSourceType::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OMOGAIEOFAH::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
