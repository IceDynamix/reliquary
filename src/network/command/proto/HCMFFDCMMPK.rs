// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `HCMFFDCMMPK.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:HCMFFDCMMPK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HCMFFDCMMPK {
    // message fields
    // @@protoc_insertion_point(field:HCMFFDCMMPK.FJHBCLGAKJH)
    pub FJHBCLGAKJH: ::std::vec::Vec<super::CGJHGMIMBFB::CGJHGMIMBFB>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.LJHIJCABHEP)
    pub LJHIJCABHEP: u32,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.MNDFMJOLBMB)
    pub MNDFMJOLBMB: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.LMEEFKJBPEC)
    pub LMEEFKJBPEC: u32,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.CKKNPFNALKF)
    pub CKKNPFNALKF: ::std::vec::Vec<super::ALMEPNPOCIM::ALMEPNPOCIM>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.JMLDMOCNMHM)
    pub JMLDMOCNMHM: ::std::vec::Vec<super::NPAOGKFKAAE::NPAOGKFKAAE>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.retcode)
    pub retcode: u32,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.BOKNFCIBNBM)
    pub BOKNFCIBNBM: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.FJKBEFFKNKP)
    pub FJKBEFFKNKP: ::std::vec::Vec<super::NBFIOBOHFEO::NBFIOBOHFEO>,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.CCIIHMMJOEM)
    pub CCIIHMMJOEM: u32,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.GFHGLFFHFBD)
    pub GFHGLFFHFBD: u32,
    // @@protoc_insertion_point(field:HCMFFDCMMPK.PIOKKPDLEHF)
    pub PIOKKPDLEHF: ::std::collections::HashMap<::std::string::String, i32>,
    // special fields
    // @@protoc_insertion_point(special_field:HCMFFDCMMPK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HCMFFDCMMPK {
    fn default() -> &'a HCMFFDCMMPK {
        <HCMFFDCMMPK as ::protobuf::Message>::default_instance()
    }
}

impl HCMFFDCMMPK {
    pub fn new() -> HCMFFDCMMPK {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FJHBCLGAKJH",
            |m: &HCMFFDCMMPK| { &m.FJHBCLGAKJH },
            |m: &mut HCMFFDCMMPK| { &mut m.FJHBCLGAKJH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LJHIJCABHEP",
            |m: &HCMFFDCMMPK| { &m.LJHIJCABHEP },
            |m: &mut HCMFFDCMMPK| { &mut m.LJHIJCABHEP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "MNDFMJOLBMB",
            |m: &HCMFFDCMMPK| { &m.MNDFMJOLBMB },
            |m: &mut HCMFFDCMMPK| { &mut m.MNDFMJOLBMB },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LMEEFKJBPEC",
            |m: &HCMFFDCMMPK| { &m.LMEEFKJBPEC },
            |m: &mut HCMFFDCMMPK| { &mut m.LMEEFKJBPEC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "CKKNPFNALKF",
            |m: &HCMFFDCMMPK| { &m.CKKNPFNALKF },
            |m: &mut HCMFFDCMMPK| { &mut m.CKKNPFNALKF },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "JMLDMOCNMHM",
            |m: &HCMFFDCMMPK| { &m.JMLDMOCNMHM },
            |m: &mut HCMFFDCMMPK| { &mut m.JMLDMOCNMHM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retcode",
            |m: &HCMFFDCMMPK| { &m.retcode },
            |m: &mut HCMFFDCMMPK| { &mut m.retcode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "BOKNFCIBNBM",
            |m: &HCMFFDCMMPK| { &m.BOKNFCIBNBM },
            |m: &mut HCMFFDCMMPK| { &mut m.BOKNFCIBNBM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "FJKBEFFKNKP",
            |m: &HCMFFDCMMPK| { &m.FJKBEFFKNKP },
            |m: &mut HCMFFDCMMPK| { &mut m.FJKBEFFKNKP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CCIIHMMJOEM",
            |m: &HCMFFDCMMPK| { &m.CCIIHMMJOEM },
            |m: &mut HCMFFDCMMPK| { &mut m.CCIIHMMJOEM },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GFHGLFFHFBD",
            |m: &HCMFFDCMMPK| { &m.GFHGLFFHFBD },
            |m: &mut HCMFFDCMMPK| { &mut m.GFHGLFFHFBD },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "PIOKKPDLEHF",
            |m: &HCMFFDCMMPK| { &m.PIOKKPDLEHF },
            |m: &mut HCMFFDCMMPK| { &mut m.PIOKKPDLEHF },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HCMFFDCMMPK>(
            "HCMFFDCMMPK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HCMFFDCMMPK {
    const NAME: &'static str = "HCMFFDCMMPK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.FJHBCLGAKJH.push(is.read_message()?);
                },
                24 => {
                    self.LJHIJCABHEP = is.read_uint32()?;
                },
                98 => {
                    is.read_repeated_packed_uint32_into(&mut self.MNDFMJOLBMB)?;
                },
                96 => {
                    self.MNDFMJOLBMB.push(is.read_uint32()?);
                },
                80 => {
                    self.LMEEFKJBPEC = is.read_uint32()?;
                },
                90 => {
                    self.CKKNPFNALKF.push(is.read_message()?);
                },
                66 => {
                    self.JMLDMOCNMHM.push(is.read_message()?);
                },
                112 => {
                    self.retcode = is.read_uint32()?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.BOKNFCIBNBM)?;
                },
                32 => {
                    self.BOKNFCIBNBM.push(is.read_uint32()?);
                },
                122 => {
                    self.FJKBEFFKNKP.push(is.read_message()?);
                },
                56 => {
                    self.CCIIHMMJOEM = is.read_uint32()?;
                },
                72 => {
                    self.GFHGLFFHFBD = is.read_uint32()?;
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.PIOKKPDLEHF.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.FJHBCLGAKJH {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.LJHIJCABHEP != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.LJHIJCABHEP);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(12, &self.MNDFMJOLBMB);
        if self.LMEEFKJBPEC != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.LMEEFKJBPEC);
        }
        for value in &self.CKKNPFNALKF {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.JMLDMOCNMHM {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.retcode != 0 {
            my_size += ::protobuf::rt::uint32_size(14, self.retcode);
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(4, &self.BOKNFCIBNBM);
        for value in &self.FJKBEFFKNKP {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.CCIIHMMJOEM != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.CCIIHMMJOEM);
        }
        if self.GFHGLFFHFBD != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.GFHGLFFHFBD);
        }
        for (k, v) in &self.PIOKKPDLEHF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.FJHBCLGAKJH {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.LJHIJCABHEP != 0 {
            os.write_uint32(3, self.LJHIJCABHEP)?;
        }
        os.write_repeated_packed_uint32(12, &self.MNDFMJOLBMB)?;
        if self.LMEEFKJBPEC != 0 {
            os.write_uint32(10, self.LMEEFKJBPEC)?;
        }
        for v in &self.CKKNPFNALKF {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.JMLDMOCNMHM {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.retcode != 0 {
            os.write_uint32(14, self.retcode)?;
        }
        os.write_repeated_packed_uint32(4, &self.BOKNFCIBNBM)?;
        for v in &self.FJKBEFFKNKP {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if self.CCIIHMMJOEM != 0 {
            os.write_uint32(7, self.CCIIHMMJOEM)?;
        }
        if self.GFHGLFFHFBD != 0 {
            os.write_uint32(9, self.GFHGLFFHFBD)?;
        }
        for (k, v) in &self.PIOKKPDLEHF {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HCMFFDCMMPK {
        HCMFFDCMMPK::new()
    }

    fn clear(&mut self) {
        self.FJHBCLGAKJH.clear();
        self.LJHIJCABHEP = 0;
        self.MNDFMJOLBMB.clear();
        self.LMEEFKJBPEC = 0;
        self.CKKNPFNALKF.clear();
        self.JMLDMOCNMHM.clear();
        self.retcode = 0;
        self.BOKNFCIBNBM.clear();
        self.FJKBEFFKNKP.clear();
        self.CCIIHMMJOEM = 0;
        self.GFHGLFFHFBD = 0;
        self.PIOKKPDLEHF.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HCMFFDCMMPK {
        static instance: ::protobuf::rt::Lazy<HCMFFDCMMPK> = ::protobuf::rt::Lazy::new();
        instance.get(HCMFFDCMMPK::new)
    }
}

impl ::protobuf::MessageFull for HCMFFDCMMPK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HCMFFDCMMPK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HCMFFDCMMPK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HCMFFDCMMPK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11HCMFFDCMMPK.proto\x1a\x11ALMEPNPOCIM.proto\x1a\x11CGJHGMIMBFB.prot\
    o\x1a\x11NBFIOBOHFEO.proto\x1a\x11NPAOGKFKAAE.proto\"\xb4\x04\n\x0bHCMFF\
    DCMMPK\x12.\n\x0bFJHBCLGAKJH\x18\x05\x20\x03(\x0b2\x0c.CGJHGMIMBFBR\x0bF\
    JHBCLGAKJH\x12\x20\n\x0bLJHIJCABHEP\x18\x03\x20\x01(\rR\x0bLJHIJCABHEP\
    \x12\x20\n\x0bMNDFMJOLBMB\x18\x0c\x20\x03(\rR\x0bMNDFMJOLBMB\x12\x20\n\
    \x0bLMEEFKJBPEC\x18\n\x20\x01(\rR\x0bLMEEFKJBPEC\x12.\n\x0bCKKNPFNALKF\
    \x18\x0b\x20\x03(\x0b2\x0c.ALMEPNPOCIMR\x0bCKKNPFNALKF\x12.\n\x0bJMLDMOC\
    NMHM\x18\x08\x20\x03(\x0b2\x0c.NPAOGKFKAAER\x0bJMLDMOCNMHM\x12\x18\n\x07\
    retcode\x18\x0e\x20\x01(\rR\x07retcode\x12\x20\n\x0bBOKNFCIBNBM\x18\x04\
    \x20\x03(\rR\x0bBOKNFCIBNBM\x12.\n\x0bFJKBEFFKNKP\x18\x0f\x20\x03(\x0b2\
    \x0c.NBFIOBOHFEOR\x0bFJKBEFFKNKP\x12\x20\n\x0bCCIIHMMJOEM\x18\x07\x20\
    \x01(\rR\x0bCCIIHMMJOEM\x12\x20\n\x0bGFHGLFFHFBD\x18\t\x20\x01(\rR\x0bGF\
    HGLFFHFBD\x12?\n\x0bPIOKKPDLEHF\x18\x06\x20\x03(\x0b2\x1d.HCMFFDCMMPK.PI\
    OKKPDLEHFEntryR\x0bPIOKKPDLEHF\x1a>\n\x10PIOKKPDLEHFEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\
    \x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::ALMEPNPOCIM::file_descriptor().clone());
            deps.push(super::CGJHGMIMBFB::file_descriptor().clone());
            deps.push(super::NBFIOBOHFEO::file_descriptor().clone());
            deps.push(super::NPAOGKFKAAE::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HCMFFDCMMPK::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
