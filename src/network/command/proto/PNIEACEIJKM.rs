// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `PNIEACEIJKM.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:PNIEACEIJKM)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PNIEACEIJKM {
    // message oneof groups
    pub KFELKJLDKEH: ::std::option::Option<pnieaceijkm::KFELKJLDKEH>,
    // special fields
    // @@protoc_insertion_point(special_field:PNIEACEIJKM.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PNIEACEIJKM {
    fn default() -> &'a PNIEACEIJKM {
        <PNIEACEIJKM as ::protobuf::Message>::default_instance()
    }
}

impl PNIEACEIJKM {
    pub fn new() -> PNIEACEIJKM {
        ::std::default::Default::default()
    }

    // .KILDAMJJLMF IEEJCHFEPHA = 5;

    pub fn IEEJCHFEPHA(&self) -> &super::KILDAMJJLMF::KILDAMJJLMF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(ref v)) => v,
            _ => <super::KILDAMJJLMF::KILDAMJJLMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IEEJCHFEPHA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IEEJCHFEPHA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IEEJCHFEPHA(&mut self, v: super::KILDAMJJLMF::KILDAMJJLMF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IEEJCHFEPHA(&mut self) -> &mut super::KILDAMJJLMF::KILDAMJJLMF {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(super::KILDAMJJLMF::KILDAMJJLMF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IEEJCHFEPHA(&mut self) -> super::KILDAMJJLMF::KILDAMJJLMF {
        if self.has_IEEJCHFEPHA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KILDAMJJLMF::KILDAMJJLMF::new()
        }
    }

    // .KILDAMJJLMF INDNBEDJNCO = 7;

    pub fn INDNBEDJNCO(&self) -> &super::KILDAMJJLMF::KILDAMJJLMF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(ref v)) => v,
            _ => <super::KILDAMJJLMF::KILDAMJJLMF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_INDNBEDJNCO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_INDNBEDJNCO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_INDNBEDJNCO(&mut self, v: super::KILDAMJJLMF::KILDAMJJLMF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_INDNBEDJNCO(&mut self) -> &mut super::KILDAMJJLMF::KILDAMJJLMF {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(super::KILDAMJJLMF::KILDAMJJLMF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_INDNBEDJNCO(&mut self) -> super::KILDAMJJLMF::KILDAMJJLMF {
        if self.has_INDNBEDJNCO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KILDAMJJLMF::KILDAMJJLMF::new()
        }
    }

    // .FFAMNKOAIHF NOENHHILNAH = 145;

    pub fn NOENHHILNAH(&self) -> &super::FFAMNKOAIHF::FFAMNKOAIHF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(ref v)) => v,
            _ => <super::FFAMNKOAIHF::FFAMNKOAIHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_NOENHHILNAH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_NOENHHILNAH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_NOENHHILNAH(&mut self, v: super::FFAMNKOAIHF::FFAMNKOAIHF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_NOENHHILNAH(&mut self) -> &mut super::FFAMNKOAIHF::FFAMNKOAIHF {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(super::FFAMNKOAIHF::FFAMNKOAIHF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_NOENHHILNAH(&mut self) -> super::FFAMNKOAIHF::FFAMNKOAIHF {
        if self.has_NOENHHILNAH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFAMNKOAIHF::FFAMNKOAIHF::new()
        }
    }

    // .FFAMNKOAIHF KPBJIPGEJPL = 1650;

    pub fn KPBJIPGEJPL(&self) -> &super::FFAMNKOAIHF::FFAMNKOAIHF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(ref v)) => v,
            _ => <super::FFAMNKOAIHF::FFAMNKOAIHF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KPBJIPGEJPL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KPBJIPGEJPL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KPBJIPGEJPL(&mut self, v: super::FFAMNKOAIHF::FFAMNKOAIHF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KPBJIPGEJPL(&mut self) -> &mut super::FFAMNKOAIHF::FFAMNKOAIHF {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(super::FFAMNKOAIHF::FFAMNKOAIHF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KPBJIPGEJPL(&mut self) -> super::FFAMNKOAIHF::FFAMNKOAIHF {
        if self.has_KPBJIPGEJPL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FFAMNKOAIHF::FFAMNKOAIHF::new()
        }
    }

    // .JPAJNJBEBFB KBHPFADBDOH = 1801;

    pub fn KBHPFADBDOH(&self) -> &super::JPAJNJBEBFB::JPAJNJBEBFB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(ref v)) => v,
            _ => <super::JPAJNJBEBFB::JPAJNJBEBFB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KBHPFADBDOH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KBHPFADBDOH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KBHPFADBDOH(&mut self, v: super::JPAJNJBEBFB::JPAJNJBEBFB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KBHPFADBDOH(&mut self) -> &mut super::JPAJNJBEBFB::JPAJNJBEBFB {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(super::JPAJNJBEBFB::JPAJNJBEBFB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KBHPFADBDOH(&mut self) -> super::JPAJNJBEBFB::JPAJNJBEBFB {
        if self.has_KBHPFADBDOH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JPAJNJBEBFB::JPAJNJBEBFB::new()
        }
    }

    // .GLIAIPCABIM FBNFLJKLJGC = 148;

    pub fn FBNFLJKLJGC(&self) -> &super::GLIAIPCABIM::GLIAIPCABIM {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(ref v)) => v,
            _ => <super::GLIAIPCABIM::GLIAIPCABIM as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_FBNFLJKLJGC(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_FBNFLJKLJGC(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_FBNFLJKLJGC(&mut self, v: super::GLIAIPCABIM::GLIAIPCABIM) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(v))
    }

    // Mutable pointer to the field.
    pub fn mut_FBNFLJKLJGC(&mut self) -> &mut super::GLIAIPCABIM::GLIAIPCABIM {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(super::GLIAIPCABIM::GLIAIPCABIM::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_FBNFLJKLJGC(&mut self) -> super::GLIAIPCABIM::GLIAIPCABIM {
        if self.has_FBNFLJKLJGC() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GLIAIPCABIM::GLIAIPCABIM::new()
        }
    }

    // .IBIBPOOPDEN APFMFBBDCJK = 290;

    pub fn APFMFBBDCJK(&self) -> &super::IBIBPOOPDEN::IBIBPOOPDEN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(ref v)) => v,
            _ => <super::IBIBPOOPDEN::IBIBPOOPDEN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_APFMFBBDCJK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_APFMFBBDCJK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APFMFBBDCJK(&mut self, v: super::IBIBPOOPDEN::IBIBPOOPDEN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_APFMFBBDCJK(&mut self) -> &mut super::IBIBPOOPDEN::IBIBPOOPDEN {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(super::IBIBPOOPDEN::IBIBPOOPDEN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_APFMFBBDCJK(&mut self) -> super::IBIBPOOPDEN::IBIBPOOPDEN {
        if self.has_APFMFBBDCJK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::IBIBPOOPDEN::IBIBPOOPDEN::new()
        }
    }

    // .MAAAAGPJJFE BMDJOPGHLCA = 634;

    pub fn BMDJOPGHLCA(&self) -> &super::MAAAAGPJJFE::MAAAAGPJJFE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(ref v)) => v,
            _ => <super::MAAAAGPJJFE::MAAAAGPJJFE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BMDJOPGHLCA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BMDJOPGHLCA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BMDJOPGHLCA(&mut self, v: super::MAAAAGPJJFE::MAAAAGPJJFE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BMDJOPGHLCA(&mut self) -> &mut super::MAAAAGPJJFE::MAAAAGPJJFE {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(super::MAAAAGPJJFE::MAAAAGPJJFE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BMDJOPGHLCA(&mut self) -> super::MAAAAGPJJFE::MAAAAGPJJFE {
        if self.has_BMDJOPGHLCA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MAAAAGPJJFE::MAAAAGPJJFE::new()
        }
    }

    // .PBALOEJCGFN OMPBJJOHPOO = 1543;

    pub fn OMPBJJOHPOO(&self) -> &super::PBALOEJCGFN::PBALOEJCGFN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(ref v)) => v,
            _ => <super::PBALOEJCGFN::PBALOEJCGFN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_OMPBJJOHPOO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_OMPBJJOHPOO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OMPBJJOHPOO(&mut self, v: super::PBALOEJCGFN::PBALOEJCGFN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OMPBJJOHPOO(&mut self) -> &mut super::PBALOEJCGFN::PBALOEJCGFN {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(super::PBALOEJCGFN::PBALOEJCGFN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OMPBJJOHPOO(&mut self) -> super::PBALOEJCGFN::PBALOEJCGFN {
        if self.has_OMPBJJOHPOO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::PBALOEJCGFN::PBALOEJCGFN::new()
        }
    }

    // .HBLNHGANBAB IOMJMEAOMFI = 1135;

    pub fn IOMJMEAOMFI(&self) -> &super::HBLNHGANBAB::HBLNHGANBAB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(ref v)) => v,
            _ => <super::HBLNHGANBAB::HBLNHGANBAB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_IOMJMEAOMFI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_IOMJMEAOMFI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_IOMJMEAOMFI(&mut self, v: super::HBLNHGANBAB::HBLNHGANBAB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_IOMJMEAOMFI(&mut self) -> &mut super::HBLNHGANBAB::HBLNHGANBAB {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(super::HBLNHGANBAB::HBLNHGANBAB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_IOMJMEAOMFI(&mut self) -> super::HBLNHGANBAB::HBLNHGANBAB {
        if self.has_IOMJMEAOMFI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HBLNHGANBAB::HBLNHGANBAB::new()
        }
    }

    // .MDGJIKLJDDE BBLGEEMHIIM = 1407;

    pub fn BBLGEEMHIIM(&self) -> &super::MDGJIKLJDDE::MDGJIKLJDDE {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(ref v)) => v,
            _ => <super::MDGJIKLJDDE::MDGJIKLJDDE as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BBLGEEMHIIM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BBLGEEMHIIM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BBLGEEMHIIM(&mut self, v: super::MDGJIKLJDDE::MDGJIKLJDDE) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BBLGEEMHIIM(&mut self) -> &mut super::MDGJIKLJDDE::MDGJIKLJDDE {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(super::MDGJIKLJDDE::MDGJIKLJDDE::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BBLGEEMHIIM(&mut self) -> super::MDGJIKLJDDE::MDGJIKLJDDE {
        if self.has_BBLGEEMHIIM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MDGJIKLJDDE::MDGJIKLJDDE::new()
        }
    }

    // .DBNDIAGBMJI MANFKMDDPEG = 1503;

    pub fn MANFKMDDPEG(&self) -> &super::DBNDIAGBMJI::DBNDIAGBMJI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(ref v)) => v,
            _ => <super::DBNDIAGBMJI::DBNDIAGBMJI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_MANFKMDDPEG(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_MANFKMDDPEG(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_MANFKMDDPEG(&mut self, v: super::DBNDIAGBMJI::DBNDIAGBMJI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(v))
    }

    // Mutable pointer to the field.
    pub fn mut_MANFKMDDPEG(&mut self) -> &mut super::DBNDIAGBMJI::DBNDIAGBMJI {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(super::DBNDIAGBMJI::DBNDIAGBMJI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_MANFKMDDPEG(&mut self) -> super::DBNDIAGBMJI::DBNDIAGBMJI {
        if self.has_MANFKMDDPEG() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DBNDIAGBMJI::DBNDIAGBMJI::new()
        }
    }

    // .CDNEJCEKNLF APGCCJFBDLH = 876;

    pub fn APGCCJFBDLH(&self) -> &super::CDNEJCEKNLF::CDNEJCEKNLF {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(ref v)) => v,
            _ => <super::CDNEJCEKNLF::CDNEJCEKNLF as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_APGCCJFBDLH(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_APGCCJFBDLH(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_APGCCJFBDLH(&mut self, v: super::CDNEJCEKNLF::CDNEJCEKNLF) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(v))
    }

    // Mutable pointer to the field.
    pub fn mut_APGCCJFBDLH(&mut self) -> &mut super::CDNEJCEKNLF::CDNEJCEKNLF {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(super::CDNEJCEKNLF::CDNEJCEKNLF::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_APGCCJFBDLH(&mut self) -> super::CDNEJCEKNLF::CDNEJCEKNLF {
        if self.has_APGCCJFBDLH() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CDNEJCEKNLF::CDNEJCEKNLF::new()
        }
    }

    // .DCGJLCPCLBL JFPMGOJDKMD = 1812;

    pub fn JFPMGOJDKMD(&self) -> &super::DCGJLCPCLBL::DCGJLCPCLBL {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(ref v)) => v,
            _ => <super::DCGJLCPCLBL::DCGJLCPCLBL as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JFPMGOJDKMD(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JFPMGOJDKMD(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JFPMGOJDKMD(&mut self, v: super::DCGJLCPCLBL::DCGJLCPCLBL) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JFPMGOJDKMD(&mut self) -> &mut super::DCGJLCPCLBL::DCGJLCPCLBL {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(super::DCGJLCPCLBL::DCGJLCPCLBL::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JFPMGOJDKMD(&mut self) -> super::DCGJLCPCLBL::DCGJLCPCLBL {
        if self.has_JFPMGOJDKMD() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DCGJLCPCLBL::DCGJLCPCLBL::new()
        }
    }

    // .MJCOPBFEJJI PKNGAIJMDAO = 949;

    pub fn PKNGAIJMDAO(&self) -> &super::MJCOPBFEJJI::MJCOPBFEJJI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(ref v)) => v,
            _ => <super::MJCOPBFEJJI::MJCOPBFEJJI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PKNGAIJMDAO(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PKNGAIJMDAO(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PKNGAIJMDAO(&mut self, v: super::MJCOPBFEJJI::MJCOPBFEJJI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PKNGAIJMDAO(&mut self) -> &mut super::MJCOPBFEJJI::MJCOPBFEJJI {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(super::MJCOPBFEJJI::MJCOPBFEJJI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PKNGAIJMDAO(&mut self) -> super::MJCOPBFEJJI::MJCOPBFEJJI {
        if self.has_PKNGAIJMDAO() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(v)) => v,
                _ => panic!(),
            }
        } else {
            super::MJCOPBFEJJI::MJCOPBFEJJI::new()
        }
    }

    // .FIPFPHBPHLH DMKGEBHPIPJ = 1688;

    pub fn DMKGEBHPIPJ(&self) -> &super::FIPFPHBPHLH::FIPFPHBPHLH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(ref v)) => v,
            _ => <super::FIPFPHBPHLH::FIPFPHBPHLH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_DMKGEBHPIPJ(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_DMKGEBHPIPJ(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_DMKGEBHPIPJ(&mut self, v: super::FIPFPHBPHLH::FIPFPHBPHLH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(v))
    }

    // Mutable pointer to the field.
    pub fn mut_DMKGEBHPIPJ(&mut self) -> &mut super::FIPFPHBPHLH::FIPFPHBPHLH {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(super::FIPFPHBPHLH::FIPFPHBPHLH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_DMKGEBHPIPJ(&mut self) -> super::FIPFPHBPHLH::FIPFPHBPHLH {
        if self.has_DMKGEBHPIPJ() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FIPFPHBPHLH::FIPFPHBPHLH::new()
        }
    }

    // .LBKKDLHOEGN KPBMFKPCBMA = 1668;

    pub fn KPBMFKPCBMA(&self) -> &super::LBKKDLHOEGN::LBKKDLHOEGN {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(ref v)) => v,
            _ => <super::LBKKDLHOEGN::LBKKDLHOEGN as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KPBMFKPCBMA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KPBMFKPCBMA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KPBMFKPCBMA(&mut self, v: super::LBKKDLHOEGN::LBKKDLHOEGN) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KPBMFKPCBMA(&mut self) -> &mut super::LBKKDLHOEGN::LBKKDLHOEGN {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(super::LBKKDLHOEGN::LBKKDLHOEGN::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KPBMFKPCBMA(&mut self) -> super::LBKKDLHOEGN::LBKKDLHOEGN {
        if self.has_KPBMFKPCBMA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LBKKDLHOEGN::LBKKDLHOEGN::new()
        }
    }

    // .GOEEKPLLCBJ BEHLMOKIAFL = 810;

    pub fn BEHLMOKIAFL(&self) -> &super::GOEEKPLLCBJ::GOEEKPLLCBJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(ref v)) => v,
            _ => <super::GOEEKPLLCBJ::GOEEKPLLCBJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BEHLMOKIAFL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_BEHLMOKIAFL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BEHLMOKIAFL(&mut self, v: super::GOEEKPLLCBJ::GOEEKPLLCBJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BEHLMOKIAFL(&mut self) -> &mut super::GOEEKPLLCBJ::GOEEKPLLCBJ {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(super::GOEEKPLLCBJ::GOEEKPLLCBJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BEHLMOKIAFL(&mut self) -> super::GOEEKPLLCBJ::GOEEKPLLCBJ {
        if self.has_BEHLMOKIAFL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::GOEEKPLLCBJ::GOEEKPLLCBJ::new()
        }
    }

    // .DFLKELGHOOK KAIFNDMJJMK = 859;

    pub fn KAIFNDMJJMK(&self) -> &super::DFLKELGHOOK::DFLKELGHOOK {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(ref v)) => v,
            _ => <super::DFLKELGHOOK::DFLKELGHOOK as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KAIFNDMJJMK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KAIFNDMJJMK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KAIFNDMJJMK(&mut self, v: super::DFLKELGHOOK::DFLKELGHOOK) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KAIFNDMJJMK(&mut self) -> &mut super::DFLKELGHOOK::DFLKELGHOOK {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(super::DFLKELGHOOK::DFLKELGHOOK::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KAIFNDMJJMK(&mut self) -> super::DFLKELGHOOK::DFLKELGHOOK {
        if self.has_KAIFNDMJJMK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DFLKELGHOOK::DFLKELGHOOK::new()
        }
    }

    // .KNJAEACKJIB AIDOJPOLNON = 1401;

    pub fn AIDOJPOLNON(&self) -> &super::KNJAEACKJIB::KNJAEACKJIB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(ref v)) => v,
            _ => <super::KNJAEACKJIB::KNJAEACKJIB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AIDOJPOLNON(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AIDOJPOLNON(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AIDOJPOLNON(&mut self, v: super::KNJAEACKJIB::KNJAEACKJIB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AIDOJPOLNON(&mut self) -> &mut super::KNJAEACKJIB::KNJAEACKJIB {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(super::KNJAEACKJIB::KNJAEACKJIB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AIDOJPOLNON(&mut self) -> super::KNJAEACKJIB::KNJAEACKJIB {
        if self.has_AIDOJPOLNON() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(v)) => v,
                _ => panic!(),
            }
        } else {
            super::KNJAEACKJIB::KNJAEACKJIB::new()
        }
    }

    // .LHPDOLPKFEO JBLKICBNMHL = 1945;

    pub fn JBLKICBNMHL(&self) -> &super::LHPDOLPKFEO::LHPDOLPKFEO {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(ref v)) => v,
            _ => <super::LHPDOLPKFEO::LHPDOLPKFEO as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JBLKICBNMHL(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JBLKICBNMHL(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JBLKICBNMHL(&mut self, v: super::LHPDOLPKFEO::LHPDOLPKFEO) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JBLKICBNMHL(&mut self) -> &mut super::LHPDOLPKFEO::LHPDOLPKFEO {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(super::LHPDOLPKFEO::LHPDOLPKFEO::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JBLKICBNMHL(&mut self) -> super::LHPDOLPKFEO::LHPDOLPKFEO {
        if self.has_JBLKICBNMHL() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LHPDOLPKFEO::LHPDOLPKFEO::new()
        }
    }

    // .AEFFJLGFAMH KAAILMGCHOK = 1829;

    pub fn KAAILMGCHOK(&self) -> &super::AEFFJLGFAMH::AEFFJLGFAMH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(ref v)) => v,
            _ => <super::AEFFJLGFAMH::AEFFJLGFAMH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_KAAILMGCHOK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_KAAILMGCHOK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_KAAILMGCHOK(&mut self, v: super::AEFFJLGFAMH::AEFFJLGFAMH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_KAAILMGCHOK(&mut self) -> &mut super::AEFFJLGFAMH::AEFFJLGFAMH {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(super::AEFFJLGFAMH::AEFFJLGFAMH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_KAAILMGCHOK(&mut self) -> super::AEFFJLGFAMH::AEFFJLGFAMH {
        if self.has_KAAILMGCHOK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AEFFJLGFAMH::AEFFJLGFAMH::new()
        }
    }

    // .JFGFLGBLCAJ JCDMGFPMIAM = 830;

    pub fn JCDMGFPMIAM(&self) -> &super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(ref v)) => v,
            _ => <super::JFGFLGBLCAJ::JFGFLGBLCAJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JCDMGFPMIAM(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JCDMGFPMIAM(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JCDMGFPMIAM(&mut self, v: super::JFGFLGBLCAJ::JFGFLGBLCAJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JCDMGFPMIAM(&mut self) -> &mut super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JCDMGFPMIAM(&mut self) -> super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if self.has_JCDMGFPMIAM() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()
        }
    }

    // .JFGFLGBLCAJ PIOFBMMEGHB = 1334;

    pub fn PIOFBMMEGHB(&self) -> &super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(ref v)) => v,
            _ => <super::JFGFLGBLCAJ::JFGFLGBLCAJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_PIOFBMMEGHB(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_PIOFBMMEGHB(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_PIOFBMMEGHB(&mut self, v: super::JFGFLGBLCAJ::JFGFLGBLCAJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(v))
    }

    // Mutable pointer to the field.
    pub fn mut_PIOFBMMEGHB(&mut self) -> &mut super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_PIOFBMMEGHB(&mut self) -> super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if self.has_PIOFBMMEGHB() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()
        }
    }

    // .JFGFLGBLCAJ JGDAEBNEFKA = 236;

    pub fn JGDAEBNEFKA(&self) -> &super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(ref v)) => v,
            _ => <super::JFGFLGBLCAJ::JFGFLGBLCAJ as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_JGDAEBNEFKA(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_JGDAEBNEFKA(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_JGDAEBNEFKA(&mut self, v: super::JFGFLGBLCAJ::JFGFLGBLCAJ) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(v))
    }

    // Mutable pointer to the field.
    pub fn mut_JGDAEBNEFKA(&mut self) -> &mut super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_JGDAEBNEFKA(&mut self) -> super::JFGFLGBLCAJ::JFGFLGBLCAJ {
        if self.has_JGDAEBNEFKA() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JFGFLGBLCAJ::JFGFLGBLCAJ::new()
        }
    }

    // .JBIHOCIOANH AOIBHCMANFK = 1039;

    pub fn AOIBHCMANFK(&self) -> &super::JBIHOCIOANH::JBIHOCIOANH {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(ref v)) => v,
            _ => <super::JBIHOCIOANH::JBIHOCIOANH as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_AOIBHCMANFK(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_AOIBHCMANFK(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_AOIBHCMANFK(&mut self, v: super::JBIHOCIOANH::JBIHOCIOANH) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(v))
    }

    // Mutable pointer to the field.
    pub fn mut_AOIBHCMANFK(&mut self) -> &mut super::JBIHOCIOANH::JBIHOCIOANH {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(super::JBIHOCIOANH::JBIHOCIOANH::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_AOIBHCMANFK(&mut self) -> super::JBIHOCIOANH::JBIHOCIOANH {
        if self.has_AOIBHCMANFK() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(v)) => v,
                _ => panic!(),
            }
        } else {
            super::JBIHOCIOANH::JBIHOCIOANH::new()
        }
    }

    // .HOBKEOICBMI ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE = 423;

    pub fn ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> &super::HOBKEOICBMI::HOBKEOICBMI {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v)) => v,
            _ => <super::HOBKEOICBMI::HOBKEOICBMI as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self, v: super::HOBKEOICBMI::HOBKEOICBMI) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> &mut super::HOBKEOICBMI::HOBKEOICBMI {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::HOBKEOICBMI::HOBKEOICBMI::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE(&mut self) -> super::HOBKEOICBMI::HOBKEOICBMI {
        if self.has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(v)) => v,
                _ => panic!(),
            }
        } else {
            super::HOBKEOICBMI::HOBKEOICBMI::new()
        }
    }

    // .LNAMGOMHGJB EDBPEHABHBI = 1889;

    pub fn EDBPEHABHBI(&self) -> &super::LNAMGOMHGJB::LNAMGOMHGJB {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(ref v)) => v,
            _ => <super::LNAMGOMHGJB::LNAMGOMHGJB as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_EDBPEHABHBI(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
    }

    pub fn has_EDBPEHABHBI(&self) -> bool {
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_EDBPEHABHBI(&mut self, v: super::LNAMGOMHGJB::LNAMGOMHGJB) {
        self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(v))
    }

    // Mutable pointer to the field.
    pub fn mut_EDBPEHABHBI(&mut self) -> &mut super::LNAMGOMHGJB::LNAMGOMHGJB {
        if let ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(_)) = self.KFELKJLDKEH {
        } else {
            self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(super::LNAMGOMHGJB::LNAMGOMHGJB::new()));
        }
        match self.KFELKJLDKEH {
            ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_EDBPEHABHBI(&mut self) -> super::LNAMGOMHGJB::LNAMGOMHGJB {
        if self.has_EDBPEHABHBI() {
            match self.KFELKJLDKEH.take() {
                ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(v)) => v,
                _ => panic!(),
            }
        } else {
            super::LNAMGOMHGJB::LNAMGOMHGJB::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(28);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KILDAMJJLMF::KILDAMJJLMF>(
            "IEEJCHFEPHA",
            PNIEACEIJKM::has_IEEJCHFEPHA,
            PNIEACEIJKM::IEEJCHFEPHA,
            PNIEACEIJKM::mut_IEEJCHFEPHA,
            PNIEACEIJKM::set_IEEJCHFEPHA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KILDAMJJLMF::KILDAMJJLMF>(
            "INDNBEDJNCO",
            PNIEACEIJKM::has_INDNBEDJNCO,
            PNIEACEIJKM::INDNBEDJNCO,
            PNIEACEIJKM::mut_INDNBEDJNCO,
            PNIEACEIJKM::set_INDNBEDJNCO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFAMNKOAIHF::FFAMNKOAIHF>(
            "NOENHHILNAH",
            PNIEACEIJKM::has_NOENHHILNAH,
            PNIEACEIJKM::NOENHHILNAH,
            PNIEACEIJKM::mut_NOENHHILNAH,
            PNIEACEIJKM::set_NOENHHILNAH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FFAMNKOAIHF::FFAMNKOAIHF>(
            "KPBJIPGEJPL",
            PNIEACEIJKM::has_KPBJIPGEJPL,
            PNIEACEIJKM::KPBJIPGEJPL,
            PNIEACEIJKM::mut_KPBJIPGEJPL,
            PNIEACEIJKM::set_KPBJIPGEJPL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JPAJNJBEBFB::JPAJNJBEBFB>(
            "KBHPFADBDOH",
            PNIEACEIJKM::has_KBHPFADBDOH,
            PNIEACEIJKM::KBHPFADBDOH,
            PNIEACEIJKM::mut_KBHPFADBDOH,
            PNIEACEIJKM::set_KBHPFADBDOH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GLIAIPCABIM::GLIAIPCABIM>(
            "FBNFLJKLJGC",
            PNIEACEIJKM::has_FBNFLJKLJGC,
            PNIEACEIJKM::FBNFLJKLJGC,
            PNIEACEIJKM::mut_FBNFLJKLJGC,
            PNIEACEIJKM::set_FBNFLJKLJGC,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::IBIBPOOPDEN::IBIBPOOPDEN>(
            "APFMFBBDCJK",
            PNIEACEIJKM::has_APFMFBBDCJK,
            PNIEACEIJKM::APFMFBBDCJK,
            PNIEACEIJKM::mut_APFMFBBDCJK,
            PNIEACEIJKM::set_APFMFBBDCJK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MAAAAGPJJFE::MAAAAGPJJFE>(
            "BMDJOPGHLCA",
            PNIEACEIJKM::has_BMDJOPGHLCA,
            PNIEACEIJKM::BMDJOPGHLCA,
            PNIEACEIJKM::mut_BMDJOPGHLCA,
            PNIEACEIJKM::set_BMDJOPGHLCA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::PBALOEJCGFN::PBALOEJCGFN>(
            "OMPBJJOHPOO",
            PNIEACEIJKM::has_OMPBJJOHPOO,
            PNIEACEIJKM::OMPBJJOHPOO,
            PNIEACEIJKM::mut_OMPBJJOHPOO,
            PNIEACEIJKM::set_OMPBJJOHPOO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HBLNHGANBAB::HBLNHGANBAB>(
            "IOMJMEAOMFI",
            PNIEACEIJKM::has_IOMJMEAOMFI,
            PNIEACEIJKM::IOMJMEAOMFI,
            PNIEACEIJKM::mut_IOMJMEAOMFI,
            PNIEACEIJKM::set_IOMJMEAOMFI,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MDGJIKLJDDE::MDGJIKLJDDE>(
            "BBLGEEMHIIM",
            PNIEACEIJKM::has_BBLGEEMHIIM,
            PNIEACEIJKM::BBLGEEMHIIM,
            PNIEACEIJKM::mut_BBLGEEMHIIM,
            PNIEACEIJKM::set_BBLGEEMHIIM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DBNDIAGBMJI::DBNDIAGBMJI>(
            "MANFKMDDPEG",
            PNIEACEIJKM::has_MANFKMDDPEG,
            PNIEACEIJKM::MANFKMDDPEG,
            PNIEACEIJKM::mut_MANFKMDDPEG,
            PNIEACEIJKM::set_MANFKMDDPEG,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::CDNEJCEKNLF::CDNEJCEKNLF>(
            "APGCCJFBDLH",
            PNIEACEIJKM::has_APGCCJFBDLH,
            PNIEACEIJKM::APGCCJFBDLH,
            PNIEACEIJKM::mut_APGCCJFBDLH,
            PNIEACEIJKM::set_APGCCJFBDLH,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DCGJLCPCLBL::DCGJLCPCLBL>(
            "JFPMGOJDKMD",
            PNIEACEIJKM::has_JFPMGOJDKMD,
            PNIEACEIJKM::JFPMGOJDKMD,
            PNIEACEIJKM::mut_JFPMGOJDKMD,
            PNIEACEIJKM::set_JFPMGOJDKMD,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::MJCOPBFEJJI::MJCOPBFEJJI>(
            "PKNGAIJMDAO",
            PNIEACEIJKM::has_PKNGAIJMDAO,
            PNIEACEIJKM::PKNGAIJMDAO,
            PNIEACEIJKM::mut_PKNGAIJMDAO,
            PNIEACEIJKM::set_PKNGAIJMDAO,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::FIPFPHBPHLH::FIPFPHBPHLH>(
            "DMKGEBHPIPJ",
            PNIEACEIJKM::has_DMKGEBHPIPJ,
            PNIEACEIJKM::DMKGEBHPIPJ,
            PNIEACEIJKM::mut_DMKGEBHPIPJ,
            PNIEACEIJKM::set_DMKGEBHPIPJ,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LBKKDLHOEGN::LBKKDLHOEGN>(
            "KPBMFKPCBMA",
            PNIEACEIJKM::has_KPBMFKPCBMA,
            PNIEACEIJKM::KPBMFKPCBMA,
            PNIEACEIJKM::mut_KPBMFKPCBMA,
            PNIEACEIJKM::set_KPBMFKPCBMA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::GOEEKPLLCBJ::GOEEKPLLCBJ>(
            "BEHLMOKIAFL",
            PNIEACEIJKM::has_BEHLMOKIAFL,
            PNIEACEIJKM::BEHLMOKIAFL,
            PNIEACEIJKM::mut_BEHLMOKIAFL,
            PNIEACEIJKM::set_BEHLMOKIAFL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DFLKELGHOOK::DFLKELGHOOK>(
            "KAIFNDMJJMK",
            PNIEACEIJKM::has_KAIFNDMJJMK,
            PNIEACEIJKM::KAIFNDMJJMK,
            PNIEACEIJKM::mut_KAIFNDMJJMK,
            PNIEACEIJKM::set_KAIFNDMJJMK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::KNJAEACKJIB::KNJAEACKJIB>(
            "AIDOJPOLNON",
            PNIEACEIJKM::has_AIDOJPOLNON,
            PNIEACEIJKM::AIDOJPOLNON,
            PNIEACEIJKM::mut_AIDOJPOLNON,
            PNIEACEIJKM::set_AIDOJPOLNON,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LHPDOLPKFEO::LHPDOLPKFEO>(
            "JBLKICBNMHL",
            PNIEACEIJKM::has_JBLKICBNMHL,
            PNIEACEIJKM::JBLKICBNMHL,
            PNIEACEIJKM::mut_JBLKICBNMHL,
            PNIEACEIJKM::set_JBLKICBNMHL,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::AEFFJLGFAMH::AEFFJLGFAMH>(
            "KAAILMGCHOK",
            PNIEACEIJKM::has_KAAILMGCHOK,
            PNIEACEIJKM::KAAILMGCHOK,
            PNIEACEIJKM::mut_KAAILMGCHOK,
            PNIEACEIJKM::set_KAAILMGCHOK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFGFLGBLCAJ::JFGFLGBLCAJ>(
            "JCDMGFPMIAM",
            PNIEACEIJKM::has_JCDMGFPMIAM,
            PNIEACEIJKM::JCDMGFPMIAM,
            PNIEACEIJKM::mut_JCDMGFPMIAM,
            PNIEACEIJKM::set_JCDMGFPMIAM,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFGFLGBLCAJ::JFGFLGBLCAJ>(
            "PIOFBMMEGHB",
            PNIEACEIJKM::has_PIOFBMMEGHB,
            PNIEACEIJKM::PIOFBMMEGHB,
            PNIEACEIJKM::mut_PIOFBMMEGHB,
            PNIEACEIJKM::set_PIOFBMMEGHB,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JFGFLGBLCAJ::JFGFLGBLCAJ>(
            "JGDAEBNEFKA",
            PNIEACEIJKM::has_JGDAEBNEFKA,
            PNIEACEIJKM::JGDAEBNEFKA,
            PNIEACEIJKM::mut_JGDAEBNEFKA,
            PNIEACEIJKM::set_JGDAEBNEFKA,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::JBIHOCIOANH::JBIHOCIOANH>(
            "AOIBHCMANFK",
            PNIEACEIJKM::has_AOIBHCMANFK,
            PNIEACEIJKM::AOIBHCMANFK,
            PNIEACEIJKM::mut_AOIBHCMANFK,
            PNIEACEIJKM::set_AOIBHCMANFK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::HOBKEOICBMI::HOBKEOICBMI>(
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE",
            PNIEACEIJKM::has_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            PNIEACEIJKM::ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            PNIEACEIJKM::mut_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
            PNIEACEIJKM::set_ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::LNAMGOMHGJB::LNAMGOMHGJB>(
            "EDBPEHABHBI",
            PNIEACEIJKM::has_EDBPEHABHBI,
            PNIEACEIJKM::EDBPEHABHBI,
            PNIEACEIJKM::mut_EDBPEHABHBI,
            PNIEACEIJKM::set_EDBPEHABHBI,
        ));
        oneofs.push(pnieaceijkm::KFELKJLDKEH::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PNIEACEIJKM>(
            "PNIEACEIJKM",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PNIEACEIJKM {
    const NAME: &'static str = "PNIEACEIJKM";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(is.read_message()?));
                },
                58 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(is.read_message()?));
                },
                1162 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(is.read_message()?));
                },
                13202 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(is.read_message()?));
                },
                14410 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(is.read_message()?));
                },
                1186 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(is.read_message()?));
                },
                2322 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(is.read_message()?));
                },
                5074 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(is.read_message()?));
                },
                12346 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(is.read_message()?));
                },
                9082 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(is.read_message()?));
                },
                11258 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(is.read_message()?));
                },
                12026 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(is.read_message()?));
                },
                7010 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(is.read_message()?));
                },
                14498 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(is.read_message()?));
                },
                7594 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(is.read_message()?));
                },
                13506 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(is.read_message()?));
                },
                13346 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(is.read_message()?));
                },
                6482 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(is.read_message()?));
                },
                6874 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(is.read_message()?));
                },
                11210 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(is.read_message()?));
                },
                15562 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(is.read_message()?));
                },
                14634 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(is.read_message()?));
                },
                6642 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(is.read_message()?));
                },
                10674 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(is.read_message()?));
                },
                1890 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(is.read_message()?));
                },
                8314 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(is.read_message()?));
                },
                3386 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(is.read_message()?));
                },
                15114 => {
                    self.KFELKJLDKEH = ::std::option::Option::Some(pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.KFELKJLDKEH {
            match v {
                &pnieaceijkm::KFELKJLDKEH::IEEJCHFEPHA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::INDNBEDJNCO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::NOENHHILNAH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(145, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::KPBJIPGEJPL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1650, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::KBHPFADBDOH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1801, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::FBNFLJKLJGC(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(148, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::APFMFBBDCJK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(290, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::BMDJOPGHLCA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(634, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::OMPBJJOHPOO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1543, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::IOMJMEAOMFI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1135, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::BBLGEEMHIIM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1407, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::MANFKMDDPEG(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1503, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::APGCCJFBDLH(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(876, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::JFPMGOJDKMD(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1812, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::PKNGAIJMDAO(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(949, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::DMKGEBHPIPJ(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1688, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::KPBMFKPCBMA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1668, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::BEHLMOKIAFL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(810, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::KAIFNDMJJMK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(859, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::AIDOJPOLNON(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1401, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::JBLKICBNMHL(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1945, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::KAAILMGCHOK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1829, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::JCDMGFPMIAM(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(830, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::PIOFBMMEGHB(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1334, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::JGDAEBNEFKA(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(236, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::AOIBHCMANFK(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1039, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(423, v, os)?;
                },
                &pnieaceijkm::KFELKJLDKEH::EDBPEHABHBI(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1889, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PNIEACEIJKM {
        PNIEACEIJKM::new()
    }

    fn clear(&mut self) {
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.KFELKJLDKEH = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PNIEACEIJKM {
        static instance: PNIEACEIJKM = PNIEACEIJKM {
            KFELKJLDKEH: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PNIEACEIJKM {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PNIEACEIJKM").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PNIEACEIJKM {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PNIEACEIJKM {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PNIEACEIJKM`
pub mod pnieaceijkm {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:PNIEACEIJKM.KFELKJLDKEH)
    pub enum KFELKJLDKEH {
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.IEEJCHFEPHA)
        IEEJCHFEPHA(super::super::KILDAMJJLMF::KILDAMJJLMF),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.INDNBEDJNCO)
        INDNBEDJNCO(super::super::KILDAMJJLMF::KILDAMJJLMF),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.NOENHHILNAH)
        NOENHHILNAH(super::super::FFAMNKOAIHF::FFAMNKOAIHF),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.KPBJIPGEJPL)
        KPBJIPGEJPL(super::super::FFAMNKOAIHF::FFAMNKOAIHF),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.KBHPFADBDOH)
        KBHPFADBDOH(super::super::JPAJNJBEBFB::JPAJNJBEBFB),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.FBNFLJKLJGC)
        FBNFLJKLJGC(super::super::GLIAIPCABIM::GLIAIPCABIM),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.APFMFBBDCJK)
        APFMFBBDCJK(super::super::IBIBPOOPDEN::IBIBPOOPDEN),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.BMDJOPGHLCA)
        BMDJOPGHLCA(super::super::MAAAAGPJJFE::MAAAAGPJJFE),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.OMPBJJOHPOO)
        OMPBJJOHPOO(super::super::PBALOEJCGFN::PBALOEJCGFN),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.IOMJMEAOMFI)
        IOMJMEAOMFI(super::super::HBLNHGANBAB::HBLNHGANBAB),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.BBLGEEMHIIM)
        BBLGEEMHIIM(super::super::MDGJIKLJDDE::MDGJIKLJDDE),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.MANFKMDDPEG)
        MANFKMDDPEG(super::super::DBNDIAGBMJI::DBNDIAGBMJI),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.APGCCJFBDLH)
        APGCCJFBDLH(super::super::CDNEJCEKNLF::CDNEJCEKNLF),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.JFPMGOJDKMD)
        JFPMGOJDKMD(super::super::DCGJLCPCLBL::DCGJLCPCLBL),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.PKNGAIJMDAO)
        PKNGAIJMDAO(super::super::MJCOPBFEJJI::MJCOPBFEJJI),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.DMKGEBHPIPJ)
        DMKGEBHPIPJ(super::super::FIPFPHBPHLH::FIPFPHBPHLH),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.KPBMFKPCBMA)
        KPBMFKPCBMA(super::super::LBKKDLHOEGN::LBKKDLHOEGN),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.BEHLMOKIAFL)
        BEHLMOKIAFL(super::super::GOEEKPLLCBJ::GOEEKPLLCBJ),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.KAIFNDMJJMK)
        KAIFNDMJJMK(super::super::DFLKELGHOOK::DFLKELGHOOK),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.AIDOJPOLNON)
        AIDOJPOLNON(super::super::KNJAEACKJIB::KNJAEACKJIB),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.JBLKICBNMHL)
        JBLKICBNMHL(super::super::LHPDOLPKFEO::LHPDOLPKFEO),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.KAAILMGCHOK)
        KAAILMGCHOK(super::super::AEFFJLGFAMH::AEFFJLGFAMH),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.JCDMGFPMIAM)
        JCDMGFPMIAM(super::super::JFGFLGBLCAJ::JFGFLGBLCAJ),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.PIOFBMMEGHB)
        PIOFBMMEGHB(super::super::JFGFLGBLCAJ::JFGFLGBLCAJ),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.JGDAEBNEFKA)
        JGDAEBNEFKA(super::super::JFGFLGBLCAJ::JFGFLGBLCAJ),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.AOIBHCMANFK)
        AOIBHCMANFK(super::super::JBIHOCIOANH::JBIHOCIOANH),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE)
        ROGUECOMMONACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE(super::super::HOBKEOICBMI::HOBKEOICBMI),
        // @@protoc_insertion_point(oneof_field:PNIEACEIJKM.EDBPEHABHBI)
        EDBPEHABHBI(super::super::LNAMGOMHGJB::LNAMGOMHGJB),
    }

    impl ::protobuf::Oneof for KFELKJLDKEH {
    }

    impl ::protobuf::OneofFull for KFELKJLDKEH {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PNIEACEIJKM as ::protobuf::MessageFull>::descriptor().oneof_by_name("KFELKJLDKEH").unwrap()).clone()
        }
    }

    impl KFELKJLDKEH {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<KFELKJLDKEH>("KFELKJLDKEH")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11PNIEACEIJKM.proto\x1a\x11AEFFJLGFAMH.proto\x1a\x11CDNEJCEKNLF.prot\
    o\x1a\x11DBNDIAGBMJI.proto\x1a\x11DCGJLCPCLBL.proto\x1a\x11DFLKELGHOOK.p\
    roto\x1a\x11FFAMNKOAIHF.proto\x1a\x11FIPFPHBPHLH.proto\x1a\x11GLIAIPCABI\
    M.proto\x1a\x11GOEEKPLLCBJ.proto\x1a\x11HBLNHGANBAB.proto\x1a\x11HOBKEOI\
    CBMI.proto\x1a\x11IBIBPOOPDEN.proto\x1a\x11JBIHOCIOANH.proto\x1a\x11JFGF\
    LGBLCAJ.proto\x1a\x11JPAJNJBEBFB.proto\x1a\x11KILDAMJJLMF.proto\x1a\x11K\
    NJAEACKJIB.proto\x1a\x11LBKKDLHOEGN.proto\x1a\x11LHPDOLPKFEO.proto\x1a\
    \x11LNAMGOMHGJB.proto\x1a\x11MAAAAGPJJFE.proto\x1a\x11MDGJIKLJDDE.proto\
    \x1a\x11MJCOPBFEJJI.proto\x1a\x11PBALOEJCGFN.proto\"\x83\x0c\n\x0bPNIEAC\
    EIJKM\x120\n\x0bIEEJCHFEPHA\x18\x05\x20\x01(\x0b2\x0c.KILDAMJJLMFH\0R\
    \x0bIEEJCHFEPHA\x120\n\x0bINDNBEDJNCO\x18\x07\x20\x01(\x0b2\x0c.KILDAMJJ\
    LMFH\0R\x0bINDNBEDJNCO\x121\n\x0bNOENHHILNAH\x18\x91\x01\x20\x01(\x0b2\
    \x0c.FFAMNKOAIHFH\0R\x0bNOENHHILNAH\x121\n\x0bKPBJIPGEJPL\x18\xf2\x0c\
    \x20\x01(\x0b2\x0c.FFAMNKOAIHFH\0R\x0bKPBJIPGEJPL\x121\n\x0bKBHPFADBDOH\
    \x18\x89\x0e\x20\x01(\x0b2\x0c.JPAJNJBEBFBH\0R\x0bKBHPFADBDOH\x121\n\x0b\
    FBNFLJKLJGC\x18\x94\x01\x20\x01(\x0b2\x0c.GLIAIPCABIMH\0R\x0bFBNFLJKLJGC\
    \x121\n\x0bAPFMFBBDCJK\x18\xa2\x02\x20\x01(\x0b2\x0c.IBIBPOOPDENH\0R\x0b\
    APFMFBBDCJK\x121\n\x0bBMDJOPGHLCA\x18\xfa\x04\x20\x01(\x0b2\x0c.MAAAAGPJ\
    JFEH\0R\x0bBMDJOPGHLCA\x121\n\x0bOMPBJJOHPOO\x18\x87\x0c\x20\x01(\x0b2\
    \x0c.PBALOEJCGFNH\0R\x0bOMPBJJOHPOO\x121\n\x0bIOMJMEAOMFI\x18\xef\x08\
    \x20\x01(\x0b2\x0c.HBLNHGANBABH\0R\x0bIOMJMEAOMFI\x121\n\x0bBBLGEEMHIIM\
    \x18\xff\n\x20\x01(\x0b2\x0c.MDGJIKLJDDEH\0R\x0bBBLGEEMHIIM\x121\n\x0bMA\
    NFKMDDPEG\x18\xdf\x0b\x20\x01(\x0b2\x0c.DBNDIAGBMJIH\0R\x0bMANFKMDDPEG\
    \x121\n\x0bAPGCCJFBDLH\x18\xec\x06\x20\x01(\x0b2\x0c.CDNEJCEKNLFH\0R\x0b\
    APGCCJFBDLH\x121\n\x0bJFPMGOJDKMD\x18\x94\x0e\x20\x01(\x0b2\x0c.DCGJLCPC\
    LBLH\0R\x0bJFPMGOJDKMD\x121\n\x0bPKNGAIJMDAO\x18\xb5\x07\x20\x01(\x0b2\
    \x0c.MJCOPBFEJJIH\0R\x0bPKNGAIJMDAO\x121\n\x0bDMKGEBHPIPJ\x18\x98\r\x20\
    \x01(\x0b2\x0c.FIPFPHBPHLHH\0R\x0bDMKGEBHPIPJ\x121\n\x0bKPBMFKPCBMA\x18\
    \x84\r\x20\x01(\x0b2\x0c.LBKKDLHOEGNH\0R\x0bKPBMFKPCBMA\x121\n\x0bBEHLMO\
    KIAFL\x18\xaa\x06\x20\x01(\x0b2\x0c.GOEEKPLLCBJH\0R\x0bBEHLMOKIAFL\x121\
    \n\x0bKAIFNDMJJMK\x18\xdb\x06\x20\x01(\x0b2\x0c.DFLKELGHOOKH\0R\x0bKAIFN\
    DMJJMK\x121\n\x0bAIDOJPOLNON\x18\xf9\n\x20\x01(\x0b2\x0c.KNJAEACKJIBH\0R\
    \x0bAIDOJPOLNON\x121\n\x0bJBLKICBNMHL\x18\x99\x0f\x20\x01(\x0b2\x0c.LHPD\
    OLPKFEOH\0R\x0bJBLKICBNMHL\x121\n\x0bKAAILMGCHOK\x18\xa5\x0e\x20\x01(\
    \x0b2\x0c.AEFFJLGFAMHH\0R\x0bKAAILMGCHOK\x121\n\x0bJCDMGFPMIAM\x18\xbe\
    \x06\x20\x01(\x0b2\x0c.JFGFLGBLCAJH\0R\x0bJCDMGFPMIAM\x121\n\x0bPIOFBMME\
    GHB\x18\xb6\n\x20\x01(\x0b2\x0c.JFGFLGBLCAJH\0R\x0bPIOFBMMEGHB\x121\n\
    \x0bJGDAEBNEFKA\x18\xec\x01\x20\x01(\x0b2\x0c.JFGFLGBLCAJH\0R\x0bJGDAEBN\
    EFKA\x121\n\x0bAOIBHCMANFK\x18\x8f\x08\x20\x01(\x0b2\x0c.JBIHOCIOANHH\0R\
    \x0bAOIBHCMANFK\x12\x85\x01\n9ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAG\
    IC_UNIT_COMPOSE\x18\xa7\x03\x20\x01(\x0b2\x0c.HOBKEOICBMIH\0R1ROGUECOMMO\
    NACTIONRESULTSOURCETYPEMAGICUNITCOMPOSE\x121\n\x0bEDBPEHABHBI\x18\xe1\
    \x0e\x20\x01(\x0b2\x0c.LNAMGOMHGJBH\0R\x0bEDBPEHABHBIB\r\n\x0bKFELKJLDKE\
    Hb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(24);
            deps.push(super::AEFFJLGFAMH::file_descriptor().clone());
            deps.push(super::CDNEJCEKNLF::file_descriptor().clone());
            deps.push(super::DBNDIAGBMJI::file_descriptor().clone());
            deps.push(super::DCGJLCPCLBL::file_descriptor().clone());
            deps.push(super::DFLKELGHOOK::file_descriptor().clone());
            deps.push(super::FFAMNKOAIHF::file_descriptor().clone());
            deps.push(super::FIPFPHBPHLH::file_descriptor().clone());
            deps.push(super::GLIAIPCABIM::file_descriptor().clone());
            deps.push(super::GOEEKPLLCBJ::file_descriptor().clone());
            deps.push(super::HBLNHGANBAB::file_descriptor().clone());
            deps.push(super::HOBKEOICBMI::file_descriptor().clone());
            deps.push(super::IBIBPOOPDEN::file_descriptor().clone());
            deps.push(super::JBIHOCIOANH::file_descriptor().clone());
            deps.push(super::JFGFLGBLCAJ::file_descriptor().clone());
            deps.push(super::JPAJNJBEBFB::file_descriptor().clone());
            deps.push(super::KILDAMJJLMF::file_descriptor().clone());
            deps.push(super::KNJAEACKJIB::file_descriptor().clone());
            deps.push(super::LBKKDLHOEGN::file_descriptor().clone());
            deps.push(super::LHPDOLPKFEO::file_descriptor().clone());
            deps.push(super::LNAMGOMHGJB::file_descriptor().clone());
            deps.push(super::MAAAAGPJJFE::file_descriptor().clone());
            deps.push(super::MDGJIKLJDDE::file_descriptor().clone());
            deps.push(super::MJCOPBFEJJI::file_descriptor().clone());
            deps.push(super::PBALOEJCGFN::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PNIEACEIJKM::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
